/* Generated by Cython 0.26 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "PYIMGUI_CUSTOM_EXCEPTION",
                null
            ]
        ],
        "depends": [
            "imgui-cpp\\imgui.h"
        ],
        "extra_compile_args": [
            "/FIpy_imconfig.h"
        ],
        "include_dirs": [
            "imgui-cpp",
            "imgui",
            "config-cpp"
        ],
        "language": "c++",
        "name": "imgui.core",
        "sources": [
            "imgui/core.pyx",
            "imgui-cpp/imgui.cpp",
            "imgui-cpp/imgui_draw.cpp",
            "imgui-cpp/imgui_demo.cpp",
            "config-cpp/py_imconfig.cpp"
        ]
    },
    "module_name": "imgui.core"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_26"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #ifdef __cplusplus
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough) || (defined(__GNUC__) && defined(__attribute__))
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__imgui__core
#define __PYX_HAVE_API__imgui__core
#include <string.h>
#include <stdlib.h>
#include <stdint.h>
#include "imgui.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <stdio.h>
#include "pythread.h"
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "imgui\\core.pyx",
  "stringsource",
  "type.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) &&\
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && 0
    #include <Windows.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;


/*--- Type declarations ---*/
struct __pyx_obj_5imgui_4core__DrawCmd;
struct __pyx_obj_5imgui_4core__DrawList;
struct __pyx_obj_5imgui_4core_GuiStyle;
struct __pyx_obj_5imgui_4core__DrawData;
struct __pyx_obj_5imgui_4core__StaticGlyphRanges;
struct __pyx_obj_5imgui_4core__Font;
struct __pyx_obj_5imgui_4core__FontAtlas;
struct __pyx_obj_5imgui_4core__IO;
struct __pyx_obj_5imgui_4core___pyx_scope_struct__font;
struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled;
struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;
struct __pyx_opt_args_5imgui_4core_push_style_color;
struct __pyx_opt_args_5imgui_4core_pop_style_var;
struct __pyx_opt_args_5imgui_4core_push_text_wrap_pos;
struct __pyx_opt_args_5imgui_4core_pop_style_color;
struct __pyx_defaults;
typedef struct __pyx_defaults __pyx_defaults;
struct __pyx_defaults1;
typedef struct __pyx_defaults1 __pyx_defaults1;
struct __pyx_defaults2;
typedef struct __pyx_defaults2 __pyx_defaults2;
struct __pyx_defaults3;
typedef struct __pyx_defaults3 __pyx_defaults3;

/* "imgui/core.pyx":4825
 * 
 * cpdef push_style_color(
 *     cimgui.ImGuiCol variable,             # <<<<<<<<<<<<<<
 *     float r,
 *     float g,
 */
struct __pyx_opt_args_5imgui_4core_push_style_color {
  int __pyx_n;
  float a;
};

/* "imgui/core.pyx":4869
 * 
 * 
 * cpdef pop_style_var(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style variables from stack.
 * 
 */
struct __pyx_opt_args_5imgui_4core_pop_style_var {
  int __pyx_n;
  unsigned int count;
};

/* "imgui/core.pyx":4954
 * 
 * 
 * cpdef push_text_wrap_pos(float wrap_pos_x = 0.0):             # <<<<<<<<<<<<<<
 *     """Word-wrapping function for text*() commands.
 * 
 */
struct __pyx_opt_args_5imgui_4core_push_text_wrap_pos {
  int __pyx_n;
  float wrap_pos_x;
};

/* "imgui/core.pyx":4985
 * 
 * 
 * cpdef pop_style_color(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style color from stack.
 * 
 */
struct __pyx_opt_args_5imgui_4core_pop_style_color {
  int __pyx_n;
  unsigned int count;
};
struct __pyx_defaults {
  float __pyx_arg_width;
  float __pyx_arg_height;
  bool __pyx_arg_border;
  ImGuiWindowFlags __pyx_arg_flags;
};
struct __pyx_defaults1 {
  float __pyx_arg_width;
  float __pyx_arg_height;
  bool __pyx_arg_border;
  ImGuiWindowFlags __pyx_arg_flags;
};
struct __pyx_defaults2 {
  float __pyx_arg_width;
  float __pyx_arg_height;
  bool __pyx_arg_border;
  ImGuiWindowFlags __pyx_arg_flags;
};
struct __pyx_defaults3 {
  float __pyx_arg_width;
  float __pyx_arg_height;
  bool __pyx_arg_border;
  ImGuiWindowFlags __pyx_arg_flags;
};

/* "imgui/core.pyx":249
 * 
 * 
 * cdef class _DrawCmd(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImDrawCmd* _ptr
 * 
 */
struct __pyx_obj_5imgui_4core__DrawCmd {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__DrawCmd *__pyx_vtab;
  ImDrawCmd *_ptr;
};


/* "imgui/core.pyx":273
 * 
 * 
 * cdef class _DrawList(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImDrawList* _ptr
 * 
 */
struct __pyx_obj_5imgui_4core__DrawList {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__DrawList *__pyx_vtab;
  ImDrawList *_ptr;
};


/* "imgui/core.pyx":317
 * 
 * 
 * cdef class GuiStyle(object):             # <<<<<<<<<<<<<<
 *     """
 *     Container for ImGui style information
 */
struct __pyx_obj_5imgui_4core_GuiStyle {
  PyObject_HEAD
  ImGuiStyle ref;
};


/* "imgui/core.pyx":520
 * 
 * 
 * cdef class _DrawData(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImDrawData* _ptr
 * 
 */
struct __pyx_obj_5imgui_4core__DrawData {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__DrawData *__pyx_vtab;
  ImDrawData *_ptr;
};


/* "imgui/core.pyx":575
 * 
 * 
 * cdef class _StaticGlyphRanges(object):             # <<<<<<<<<<<<<<
 *     cdef const cimgui.ImWchar* ranges_ptr
 * 
 */
struct __pyx_obj_5imgui_4core__StaticGlyphRanges {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__StaticGlyphRanges *__pyx_vtab;
  ImWchar const *ranges_ptr;
};


/* "imgui/core.pyx":585
 * 
 * 
 * cdef class _Font(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImFont* _ptr
 * 
 */
struct __pyx_obj_5imgui_4core__Font {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__Font *__pyx_vtab;
  ImFont *_ptr;
};


/* "imgui/core.pyx":595
 * 
 * 
 * cdef class _FontAtlas(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImFontAtlas* _ptr
 * 
 */
struct __pyx_obj_5imgui_4core__FontAtlas {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__FontAtlas *__pyx_vtab;
  ImFontAtlas *_ptr;
};


/* "imgui/core.pyx":702
 * 
 * 
 * cdef class _IO(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImGuiIO* _ptr
 *     cdef object _render_callback
 */
struct __pyx_obj_5imgui_4core__IO {
  PyObject_HEAD
  struct __pyx_vtabstruct_5imgui_4core__IO *__pyx_vtab;
  ImGuiIO *_ptr;
  PyObject *_render_callback;
  PyObject *_fonts;
};


/* "imgui/core.pyx":5380
 * 
 * @contextmanager
 * def font(_Font font):             # <<<<<<<<<<<<<<
 *     """Use specified font in given context.
 * 
 */
struct __pyx_obj_5imgui_4core___pyx_scope_struct__font {
  PyObject_HEAD
  struct __pyx_obj_5imgui_4core__Font *__pyx_v_font;
};


/* "imgui/core.pyx":5408
 * 
 * @contextmanager
 * def styled(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 */
struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled {
  PyObject_HEAD
  PyObject *__pyx_v_count;
  PyObject *__pyx_v_value;
  ImGuiStyleVar __pyx_v_variable;
};


/* "imgui/core.pyx":5417
 * 
 * @contextmanager
 * def istyled(*variables_and_values):             # <<<<<<<<<<<<<<
 *     # todo: rename to nstyled?
 *     count = 0
 */
struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled {
  PyObject_HEAD
  PyObject *__pyx_v_count;
  PyObject *__pyx_v_iterator;
  PyObject *__pyx_v_val;
  PyObject *__pyx_v_var;
  PyObject *__pyx_v_variables_and_values;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
};


/* "View.MemoryView":103
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":275
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":326
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":951
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "View.MemoryView":103
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "imgui/core.pyx":249
 * 
 * 
 * cdef class _DrawCmd(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImDrawCmd* _ptr
 * 
 */

struct __pyx_vtabstruct_5imgui_4core__DrawCmd {
  PyObject *(*from_ptr)(ImDrawCmd *);
};
static struct __pyx_vtabstruct_5imgui_4core__DrawCmd *__pyx_vtabptr_5imgui_4core__DrawCmd;


/* "imgui/core.pyx":273
 * 
 * 
 * cdef class _DrawList(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImDrawList* _ptr
 * 
 */

struct __pyx_vtabstruct_5imgui_4core__DrawList {
  PyObject *(*from_ptr)(ImDrawList *);
};
static struct __pyx_vtabstruct_5imgui_4core__DrawList *__pyx_vtabptr_5imgui_4core__DrawList;


/* "imgui/core.pyx":520
 * 
 * 
 * cdef class _DrawData(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImDrawData* _ptr
 * 
 */

struct __pyx_vtabstruct_5imgui_4core__DrawData {
  PyObject *(*from_ptr)(ImDrawData *);
};
static struct __pyx_vtabstruct_5imgui_4core__DrawData *__pyx_vtabptr_5imgui_4core__DrawData;


/* "imgui/core.pyx":575
 * 
 * 
 * cdef class _StaticGlyphRanges(object):             # <<<<<<<<<<<<<<
 *     cdef const cimgui.ImWchar* ranges_ptr
 * 
 */

struct __pyx_vtabstruct_5imgui_4core__StaticGlyphRanges {
  PyObject *(*from_ptr)(ImWchar const *);
};
static struct __pyx_vtabstruct_5imgui_4core__StaticGlyphRanges *__pyx_vtabptr_5imgui_4core__StaticGlyphRanges;


/* "imgui/core.pyx":585
 * 
 * 
 * cdef class _Font(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImFont* _ptr
 * 
 */

struct __pyx_vtabstruct_5imgui_4core__Font {
  PyObject *(*from_ptr)(ImFont *);
};
static struct __pyx_vtabstruct_5imgui_4core__Font *__pyx_vtabptr_5imgui_4core__Font;


/* "imgui/core.pyx":595
 * 
 * 
 * cdef class _FontAtlas(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImFontAtlas* _ptr
 * 
 */

struct __pyx_vtabstruct_5imgui_4core__FontAtlas {
  PyObject *(*from_ptr)(ImFontAtlas *);
};
static struct __pyx_vtabstruct_5imgui_4core__FontAtlas *__pyx_vtabptr_5imgui_4core__FontAtlas;


/* "imgui/core.pyx":702
 * 
 * 
 * cdef class _IO(object):             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImGuiIO* _ptr
 *     cdef object _render_callback
 */

struct __pyx_vtabstruct_5imgui_4core__IO {
  void (*_io_render_callback)(ImDrawData *);
};
static struct __pyx_vtabstruct_5imgui_4core__IO *__pyx_vtabptr_5imgui_4core__IO;


/* "View.MemoryView":326
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":951
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_bytes(
         PyObject* string, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        PyBytes_AS_STRING(string), PyBytes_GET_SIZE(string),
        start, stop, encoding, errors, decode_func);
}

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* None.proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* FusedFunction.proto */
typedef struct {
    __pyx_CyFunctionObject func;
    PyObject *__signatures__;
    PyObject *type;
    PyObject *self;
} __pyx_FusedFunctionObject;
#define __pyx_FusedFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
        __pyx_FusedFunction_New(__pyx_FusedFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__pyx_FusedFunction_New(PyTypeObject *type,
                                         PyMethodDef *ml, int flags,
                                         PyObject *qualname, PyObject *self,
                                         PyObject *module, PyObject *globals,
                                         PyObject *code);
static int __pyx_FusedFunction_clear(__pyx_FusedFunctionObject *self);
static PyTypeObject *__pyx_FusedFunctionType = NULL;
static int __pyx_FusedFunction_init(void);
#define __Pyx_FusedFunction_USED

/* CLineInTraceback.proto */
static int __Pyx_CLineForTraceback(int c_line);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* None.proto */
static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs,
                                        char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* None.proto */
#include <new>

/* IsLittleEndian.proto */
static int __Pyx_Is_Little_Endian(void);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSetCond_(ImGuiSetCond_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiWindowFlags(ImGuiWindowFlags value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiID(ImGuiID value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiMouseCursor(ImGuiMouseCursor value);

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* BufferFormatCheck.proto */
static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* CIntFromPy.proto */
static CYTHON_INLINE ImWchar __Pyx_PyInt_As_ImWchar(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiWindowFlags __Pyx_PyInt_As_ImGuiWindowFlags(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiID __Pyx_PyInt_As_ImGuiID(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiSetCond __Pyx_PyInt_As_ImGuiSetCond(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiTreeNodeFlags __Pyx_PyInt_As_ImGuiTreeNodeFlags(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiInputTextFlags __Pyx_PyInt_As_ImGuiInputTextFlags(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiMouseCursor __Pyx_PyInt_As_ImGuiMouseCursor(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiStyleVar __Pyx_PyInt_As_ImGuiStyleVar(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiCol __Pyx_PyInt_As_ImGuiCol(PyObject *);

/* ImportNumPyArray.proto */
static PyObject *__pyx_numpy_ndarray = NULL;
static PyObject* __Pyx_ImportNumPyArrayTypeIfAvailable(void);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_5imgui_4core_8_DrawCmd_from_ptr(ImDrawCmd *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_5imgui_4core_9_DrawList_from_ptr(ImDrawList *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_5imgui_4core_9_DrawData_from_ptr(ImDrawData *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(ImWchar const *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_5imgui_4core_5_Font_from_ptr(ImFont *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_5imgui_4core_10_FontAtlas_from_ptr(ImFontAtlas *__pyx_v_ptr); /* proto*/
static void __pyx_f_5imgui_4core_3_IO__io_render_callback(ImDrawData *__pyx_v_data); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'cython.view' */

/* Module declarations from 'cython' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'imgui.enums' */

/* Module declarations from 'imgui.cimgui' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'imgui.core' */
static PyTypeObject *__pyx_ptype_5imgui_4core__DrawCmd = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core__DrawList = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core_GuiStyle = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core__DrawData = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core__StaticGlyphRanges = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core__Font = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core__FontAtlas = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core__IO = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core___pyx_scope_struct__font = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core___pyx_scope_struct_1_styled = 0;
static PyTypeObject *__pyx_ptype_5imgui_4core___pyx_scope_struct_2_istyled = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static unsigned short *__pyx_v_5imgui_4core__LATIN_ALL;
__PYX_EXTERN_C DL_EXPORT(PyObject) *ImGuiError;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static PyObject *__pyx_f_5imgui_4core__bytes(PyObject *); /*proto*/
static PyObject *__pyx_f_5imgui_4core__from_bytes(PyObject *); /*proto*/
static PyObject *__pyx_f_5imgui_4core__cast_ImVec2_tuple(ImVec2); /*proto*/
static ImVec2 __pyx_f_5imgui_4core__cast_tuple_ImVec2(PyObject *); /*proto*/
static ImVec2 __pyx_f_5imgui_4core__cast_args_ImVec2(float, float); /*proto*/
static ImVec4 __pyx_f_5imgui_4core__cast_tuple_ImVec4(PyObject *); /*proto*/
static ImVec4 __pyx_f_5imgui_4core__cast_args_ImVec4(float, float, float, float); /*proto*/
static PyObject *__pyx_f_5imgui_4core__cast_ImVec4_tuple(ImVec4); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_style_var(ImGuiStyleVar, PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_style_color(ImGuiCol, float, float, float, int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_push_style_color *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_style_var(int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_pop_style_var *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_item_width(float, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_item_width(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_calculate_item_width(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_text_wrap_pos(int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_push_text_wrap_pos *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_text_wrap_pos(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_style_color(int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_pop_style_color *__pyx_optional_args); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "imgui.core"
int __pyx_module_is_main_imgui__core = 0;

/* Implementation of 'imgui.core' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_O[] = "O";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_f[] = "%.f";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_3f[] = "%.3f";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_io[] = "_io";
static const char __pyx_k__25[] = "";
static const char __pyx_k__26[] = "()";
static const char __pyx_k__28[] = "|";
static const char __pyx_k__45[] = "\000";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_str[] = "str";
static const char __pyx_k_uv0[] = "uv0";
static const char __pyx_k_uv1[] = "uv1";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_var[] = "var";
static const char __pyx_k_ONCE[] = "ONCE";
static const char __pyx_k_Vec2[] = "Vec2";
static const char __pyx_k_Vec4[] = "Vec4";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_clip[] = "clip";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_font[] = "font";
static const char __pyx_k_item[] = "item";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_KEY_A[] = "KEY_A";
static const char __pyx_k_KEY_C[] = "KEY_C";
static const char __pyx_k_KEY_V[] = "KEY_V";
static const char __pyx_k_KEY_X[] = "KEY_X";
static const char __pyx_k_KEY_Y[] = "KEY_Y";
static const char __pyx_k_KEY_Z[] = "KEY_Z";
static const char __pyx_k_begin[] = "begin";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_combo[] = "combo";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_dummy[] = "dummy";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_image[] = "image";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_power[] = "power";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_scale[] = "scale";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_style[] = "style";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_title[] = "title";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_ALWAYS[] = "ALWAYS";
static const char __pyx_k_active[] = "active";
static const char __pyx_k_border[] = "border";
static const char __pyx_k_bullet[] = "bullet";
static const char __pyx_k_button[] = "button";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_get_io[] = "get_io";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_indent[] = "indent";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_opened[] = "opened";
static const char __pyx_k_output[] = "output";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_render[] = "render";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_styled[] = "styled";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_value0[] = "value0";
static const char __pyx_k_value1[] = "value1";
static const char __pyx_k_value2[] = "value2";
static const char __pyx_k_value3[] = "value3";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_ImGuiID[] = "ImGuiID";
static const char __pyx_k_KEY_END[] = "KEY_END";
static const char __pyx_k_KEY_TAB[] = "KEY_TAB";
static const char __pyx_k_changed[] = "changed";
static const char __pyx_k_clicked[] = "clicked";
static const char __pyx_k_columns[] = "columns";
static const char __pyx_k_current[] = "current";
static const char __pyx_k_enabled[] = "enabled";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_istyled[] = "istyled";
static const char __pyx_k_listbox[] = "listbox";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_r_max_x[] = "r_max_x";
static const char __pyx_k_r_max_y[] = "r_max_y";
static const char __pyx_k_r_min_x[] = "r_min_x";
static const char __pyx_k_r_min_y[] = "r_min_y";
static const char __pyx_k_spacing[] = "spacing";
static const char __pyx_k_visible[] = "visible";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_KEY_HOME[] = "KEY_HOME";
static const char __pyx_k_checkbox[] = "checkbox";
static const char __pyx_k_closable[] = "closable";
static const char __pyx_k_defaults[] = "defaults";
static const char __pyx_k_drag_int[] = "drag_int";
static const char __pyx_k_end_menu[] = "end_menu";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_in_items[] = "in_items";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_iterator[] = "iterator";
static const char __pyx_k_new_line[] = "new_line";
static const char __pyx_k_offset_x[] = "offset_x";
static const char __pyx_k_pop_font[] = "pop_font";
static const char __pyx_k_position[] = "position";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_selected[] = "selected";
static const char __pyx_k_shortcut[] = "shortcut";
static const char __pyx_k_shutdown[] = "shutdown";
static const char __pyx_k_tree_pop[] = "tree_pop";
static const char __pyx_k_unindent[] = "unindent";
static const char __pyx_k_variable[] = "variable";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_APPEARING[] = "APPEARING";
static const char __pyx_k_KEY_ENTER[] = "KEY_ENTER";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_collapsed[] = "collapsed";
static const char __pyx_k_condition[] = "condition";
static const char __pyx_k_drag_int2[] = "drag_int2";
static const char __pyx_k_drag_int3[] = "drag_int3";
static const char __pyx_k_drag_int4[] = "drag_int4";
static const char __pyx_k_end_child[] = "end_child";
static const char __pyx_k_end_group[] = "end_group";
static const char __pyx_k_end_popup[] = "end_popup";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_fillvalue[] = "fillvalue";
static const char __pyx_k_get_style[] = "get_style";
static const char __pyx_k_input_int[] = "input_int";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_max_value[] = "max_value";
static const char __pyx_k_menu_item[] = "menu_item";
static const char __pyx_k_min_value[] = "min_value";
static const char __pyx_k_new_frame[] = "new_frame";
static const char __pyx_k_push_font[] = "push_font";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_same_line[] = "same_line";
static const char __pyx_k_separator[] = "separator";
static const char __pyx_k_step_fast[] = "step_fast";
static const char __pyx_k_tree_node[] = "tree_node";
static const char __pyx_k_COLOR_TEXT[] = "COLOR_TEXT";
static const char __pyx_k_ImGuiError[] = "ImGuiError";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_KEY_DELETE[] = "KEY_DELETE";
static const char __pyx_k_KEY_ESCAPE[] = "KEY_ESCAPE";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_begin_menu[] = "begin_menu";
static const char __pyx_k_contextlib[] = "contextlib";
static const char __pyx_k_drag_float[] = "drag_float";
static const char __pyx_k_identifier[] = "identifier";
static const char __pyx_k_imgui_core[] = "imgui.core";
static const char __pyx_k_inout_text[] = "inout_text";
static const char __pyx_k_input_int2[] = "input_int2";
static const char __pyx_k_input_int3[] = "input_int3";
static const char __pyx_k_input_int4[] = "input_int4";
static const char __pyx_k_input_text[] = "input_text";
static const char __pyx_k_label_text[] = "label_text";
static const char __pyx_k_namedtuple[] = "namedtuple";
static const char __pyx_k_open_popup[] = "open_popup";
static const char __pyx_k_position_x[] = "position_x";
static const char __pyx_k_position_y[] = "position_y";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_selectable[] = "selectable";
static const char __pyx_k_show_alpha[] = "show_alpha";
static const char __pyx_k_signatures[] = "signatures";
static const char __pyx_k_size_width[] = "size_width";
static const char __pyx_k_slider_int[] = "slider_int";
static const char __pyx_k_texture_id[] = "texture_id";
static const char __pyx_k_tint_color[] = "tint_color";
static const char __pyx_k_wrap_pos_x[] = "wrap_pos_x";
static const char __pyx_k_COLOR_COUNT[] = "COLOR_COUNT";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_KEY_PAGE_UP[] = "KEY_PAGE_UP";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_STYLE_ALPHA[] = "STYLE_ALPHA";
static const char __pyx_k_begin_child[] = "begin_child";
static const char __pyx_k_begin_group[] = "begin_group";
static const char __pyx_k_begin_popup[] = "begin_popup";
static const char __pyx_k_bullet_text[] = "bullet_text";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_color_edit3[] = "color_edit3";
static const char __pyx_k_color_edit4[] = "color_edit4";
static const char __pyx_k_drag_float2[] = "drag_float2";
static const char __pyx_k_drag_float3[] = "drag_float3";
static const char __pyx_k_drag_float4[] = "drag_float4";
static const char __pyx_k_end_tooltip[] = "end_tooltip";
static const char __pyx_k_flags_value[] = "flags_value";
static const char __pyx_k_inout_color[] = "inout_color";
static const char __pyx_k_inout_flags[] = "inout_flags";
static const char __pyx_k_inout_state[] = "inout_state";
static const char __pyx_k_inout_value[] = "inout_value";
static const char __pyx_k_input_float[] = "input_float";
static const char __pyx_k_next_column[] = "next_column";
static const char __pyx_k_set_tooltip[] = "set_tooltip";
static const char __pyx_k_size_height[] = "size_height";
static const char __pyx_k_size_pixels[] = "size_pixels";
static const char __pyx_k_slider_int2[] = "slider_int2";
static const char __pyx_k_slider_int3[] = "slider_int3";
static const char __pyx_k_slider_int4[] = "slider_int4";
static const char __pyx_k_zip_longest[] = "zip_longest";
static const char __pyx_k_COLOR_BORDER[] = "COLOR_BORDER";
static const char __pyx_k_COLOR_BUTTON[] = "COLOR_BUTTON";
static const char __pyx_k_COLOR_COLUMN[] = "COLOR_COLUMN";
static const char __pyx_k_COLOR_HEADER[] = "COLOR_HEADER";
static const char __pyx_k_KEY_UP_ARROW[] = "KEY_UP_ARROW";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_border_color[] = "border_color";
static const char __pyx_k_change_speed[] = "change_speed";
static const char __pyx_k_color_button[] = "color_button";
static const char __pyx_k_column_index[] = "column_index";
static const char __pyx_k_end_menu_bar[] = "end_menu_bar";
static const char __pyx_k_glyph_ranges[] = "glyph_ranges";
static const char __pyx_k_image_button[] = "image_button";
static const char __pyx_k_inout_opened[] = "inout_opened";
static const char __pyx_k_inout_values[] = "inout_values";
static const char __pyx_k_input_float2[] = "input_float2";
static const char __pyx_k_input_float3[] = "input_float3";
static const char __pyx_k_input_float4[] = "input_float4";
static const char __pyx_k_izip_longest[] = "izip_longest";
static const char __pyx_k_mouse_button[] = "mouse_button";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_radio_button[] = "radio_button";
static const char __pyx_k_slider_float[] = "slider_float";
static const char __pyx_k_small_button[] = "small_button";
static const char __pyx_k_small_height[] = "small_height";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_text_colored[] = "text_colored";
static const char __pyx_k_v_slider_int[] = "v_slider_int";
static const char __pyx_k_KEY_BACKSPACE[] = "KEY_BACKSPACE";
static const char __pyx_k_KEY_PAGE_DOWN[] = "KEY_PAGE_DOWN";
static const char __pyx_k_begin_tooltip[] = "begin_tooltip";
static const char __pyx_k_buffer_length[] = "buffer_length";
static const char __pyx_k_frame_padding[] = "frame_padding";
static const char __pyx_k_get_draw_data[] = "get_draw_data";
static const char __pyx_k_inout_current[] = "inout_current";
static const char __pyx_k_inout_visible[] = "inout_visible";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_slider_float2[] = "slider_float2";
static const char __pyx_k_slider_float3[] = "slider_float3";
static const char __pyx_k_slider_float4[] = "slider_float4";
static const char __pyx_k_FIRST_USE_EVER[] = "FIRST_USE_EVER";
static const char __pyx_k_KEY_DOWN_ARROW[] = "KEY_DOWN_ARROW";
static const char __pyx_k_KEY_LEFT_ARROW[] = "KEY_LEFT_ARROW";
static const char __pyx_k_TREE_NODE_LEAF[] = "TREE_NODE_LEAF";
static const char __pyx_k_WINDOW_NO_MOVE[] = "WINDOW_NO_MOVE";
static const char __pyx_k_begin_menu_bar[] = "begin_menu_bar";
static const char __pyx_k_checkbox_flags[] = "checkbox_flags";
static const char __pyx_k_contextmanager[] = "contextmanager";
static const char __pyx_k_display_format[] = "display_format";
static const char __pyx_k_imgui_core_pyx[] = "imgui\\core.pyx";
static const char __pyx_k_inout_selected[] = "inout_selected";
static const char __pyx_k_is_item_active[] = "is_item_active";
static const char __pyx_k_listbox_footer[] = "listbox_footer";
static const char __pyx_k_listbox_header[] = "listbox_header";
static const char __pyx_k_lock_threshold[] = "lock_threshold";
static const char __pyx_k_outline_border[] = "outline_border";
static const char __pyx_k_v_slider_float[] = "v_slider_float";
static const char __pyx_k_KEY_RIGHT_ARROW[] = "KEY_RIGHT_ARROW";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_WINDOW_MENU_BAR[] = "WINDOW_MENU_BAR";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_also_over_items[] = "also_over_items";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_get_window_size[] = "get_window_size";
static const char __pyx_k_height_in_items[] = "height_in_items";
static const char __pyx_k_is_item_clicked[] = "is_item_clicked";
static const char __pyx_k_is_item_hovered[] = "is_item_hovered";
static const char __pyx_k_is_item_visible[] = "is_item_visible";
static const char __pyx_k_is_rect_visible[] = "is_rect_visible";
static const char __pyx_k_render_callback[] = "render_callback";
static const char __pyx_k_require_pointer[] = "_require_pointer";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_show_user_guide[] = "show_user_guide";
static const char __pyx_k_COLOR_CHECK_MARK[] = "COLOR_CHECK_MARK";
static const char __pyx_k_COLOR_PLOT_LINES[] = "COLOR_PLOT_LINES";
static const char __pyx_k_TREE_NODE_BULLET[] = "TREE_NODE_BULLET";
static const char __pyx_k_TREE_NODE_FRAMED[] = "TREE_NODE_FRAMED";
static const char __pyx_k_WINDOW_NO_INPUTS[] = "WINDOW_NO_INPUTS";
static const char __pyx_k_WINDOW_NO_RESIZE[] = "WINDOW_NO_RESIZE";
static const char __pyx_k_get_column_index[] = "get_column_index";
static const char __pyx_k_get_column_width[] = "get_column_width";
static const char __pyx_k_get_mouse_cursor[] = "get_mouse_cursor";
static const char __pyx_k_get_window_width[] = "get_window_width";
static const char __pyx_k_invisible_button[] = "invisible_button";
static const char __pyx_k_set_mouse_cursor[] = "set_mouse_cursor";
static const char __pyx_k_show_test_window[] = "show_test_window";
static const char __pyx_k_text_unformatted[] = "text_unformatted";
static const char __pyx_k_COLOR_RESIZE_GRIP[] = "COLOR_RESIZE_GRIP";
static const char __pyx_k_COLOR_SLIDER_GRAB[] = "COLOR_SLIDER_GRAB";
static const char __pyx_k_MOUSE_CURSOR_MOVE[] = "MOUSE_CURSOR_MOVE";
static const char __pyx_k_begin_popup_modal[] = "begin_popup_modal";
static const char __pyx_k_collapsing_header[] = "collapsing_header";
static const char __pyx_k_decimal_precision[] = "decimal_precision";
static const char __pyx_k_end_main_menu_bar[] = "end_main_menu_bar";
static const char __pyx_k_get_column_offset[] = "get_column_offset";
static const char __pyx_k_get_columns_count[] = "get_columns_count";
static const char __pyx_k_get_item_rect_max[] = "get_item_rect_max";
static const char __pyx_k_get_item_rect_min[] = "get_item_rect_min";
static const char __pyx_k_get_window_height[] = "get_window_height";
static const char __pyx_k_is_mouse_dragging[] = "is_mouse_dragging";
static const char __pyx_k_is_window_focused[] = "is_window_focused";
static const char __pyx_k_is_window_hovered[] = "is_window_hovered";
static const char __pyx_k_mouse_cursor_type[] = "mouse_cursor_type";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_set_column_offset[] = "set_column_offset";
static const char __pyx_k_show_style_editor[] = "show_style_editor";
static const char __pyx_k_COLOR_CLOSE_BUTTON[] = "COLOR_CLOSE_BUTTON";
static const char __pyx_k_MOUSE_CURSOR_ARROW[] = "MOUSE_CURSOR_ARROW";
static const char __pyx_k_STYLE_ITEM_SPACING[] = "STYLE_ITEM_SPACING";
static const char __pyx_k_TREE_NODE_SELECTED[] = "TREE_NODE_SELECTED";
static const char __pyx_k_WINDOW_NO_COLLAPSE[] = "WINDOW_NO_COLLAPSE";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_get_item_rect_size[] = "get_item_rect_size";
static const char __pyx_k_is_any_item_active[] = "is_any_item_active";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_COLOR_BORDER_SHADOW[] = "COLOR_BORDER_SHADOW";
static const char __pyx_k_COLOR_BUTTON_ACTIVE[] = "COLOR_BUTTON_ACTIVE";
static const char __pyx_k_COLOR_COLUMN_ACTIVE[] = "COLOR_COLUMN_ACTIVE";
static const char __pyx_k_COLOR_HEADER_ACTIVE[] = "COLOR_HEADER_ACTIVE";
static const char __pyx_k_COLOR_TEXT_DISABLED[] = "COLOR_TEXT_DISABLED";
static const char __pyx_k_INPUT_TEXT_PASSWORD[] = "INPUT_TEXT_PASSWORD";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_STYLE_FRAME_PADDING[] = "STYLE_FRAME_PADDING";
static const char __pyx_k_STYLE_GRAB_MIN_SIZE[] = "STYLE_GRAB_MIN_SIZE";
static const char __pyx_k_WINDOW_NO_SCROLLBAR[] = "WINDOW_NO_SCROLLBAR";
static const char __pyx_k_WINDOW_NO_TITLE_BAR[] = "WINDOW_NO_TITLE_BAR";
static const char __pyx_k_WINDOW_SHOW_BORDERS[] = "WINDOW_SHOW_BORDERS";
static const char __pyx_k_begin_main_menu_bar[] = "begin_main_menu_bar";
static const char __pyx_k_close_current_popup[] = "close_current_popup";
static const char __pyx_k_get_window_position[] = "get_window_position";
static const char __pyx_k_is_any_item_hovered[] = "is_any_item_hovered";
static const char __pyx_k_is_window_collapsed[] = "is_window_collapsed";
static const char __pyx_k_show_metrics_window[] = "show_metrics_window";
static const char __pyx_k_COLOR_BUTTON_HOVERED[] = "COLOR_BUTTON_HOVERED";
static const char __pyx_k_COLOR_COLUMN_HOVERED[] = "COLOR_COLUMN_HOVERED";
static const char __pyx_k_COLOR_HEADER_HOVERED[] = "COLOR_HEADER_HOVERED";
static const char __pyx_k_COLOR_PLOT_HISTOGRAM[] = "COLOR_PLOT_HISTOGRAM";
static const char __pyx_k_COLOR_SCROLLBAR_GRAB[] = "COLOR_SCROLLBAR_GRAB";
static const char __pyx_k_INPUT_TEXT_READ_ONLY[] = "INPUT_TEXT_READ_ONLY";
static const char __pyx_k_STYLE_FRAME_ROUNDING[] = "STYLE_FRAME_ROUNDING";
static const char __pyx_k_STYLE_INDENT_SPACING[] = "STYLE_INDENT_SPACING";
static const char __pyx_k_STYLE_WINDOW_PADDING[] = "STYLE_WINDOW_PADDING";
static const char __pyx_k_get_mouse_drag_delta[] = "get_mouse_drag_delta";
static const char __pyx_k_input_text_multiline[] = "input_text_multiline";
static const char __pyx_k_is_item_hovered_rect[] = "is_item_hovered_rect";
static const char __pyx_k_set_next_window_size[] = "set_next_window_size";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_variables_and_values[] = "variables_and_values";
static const char __pyx_k_STYLE_WINDOW_MIN_SIZE[] = "STYLE_WINDOW_MIN_SIZE";
static const char __pyx_k_STYLE_WINDOW_ROUNDING[] = "STYLE_WINDOW_ROUNDING";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_set_next_window_focus[] = "set_next_window_focus";
static const char __pyx_k_set_window_font_scale[] = "set_window_font_scale";
static const char __pyx_k_COLOR_COMBO_BACKGROUND[] = "COLOR_COMBO_BACKGROUND";
static const char __pyx_k_COLOR_FRAME_BACKGROUND[] = "COLOR_FRAME_BACKGROUND";
static const char __pyx_k_COLOR_POPUP_BACKGROUND[] = "COLOR_POPUP_BACKGROUND";
static const char __pyx_k_COLOR_TITLE_BACKGROUND[] = "COLOR_TITLE_BACKGROUND";
static const char __pyx_k_MOUSE_CURSOR_RESIZE_EW[] = "MOUSE_CURSOR_RESIZE_EW";
static const char __pyx_k_MOUSE_CURSOR_RESIZE_NS[] = "MOUSE_CURSOR_RESIZE_NS";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_TREE_NODE_DEFAULT_OPEN[] = "TREE_NODE_DEFAULT_OPEN";
static const char __pyx_k_get_content_region_max[] = "get_content_region_max";
static const char __pyx_k_is_mouse_hovering_rect[] = "is_mouse_hovering_rect";
static const char __pyx_k_is_root_window_focused[] = "is_root_window_focused";
static const char __pyx_k_reset_mouse_drag_delta[] = "reset_mouse_drag_delta";
static const char __pyx_k_set_item_allow_overlap[] = "set_item_allow_overlap";
static const char __pyx_k_COLOR_WINDOW_BACKGROUND[] = "COLOR_WINDOW_BACKGROUND";
static const char __pyx_k_MOUSE_CURSOR_TEXT_INPUT[] = "MOUSE_CURSOR_TEXT_INPUT";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_TREE_NODE_OPEN_ON_ARROW[] = "TREE_NODE_OPEN_ON_ARROW";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_index_buffer_index_size[] = "index_buffer_index_size";
static const char __pyx_k_COLOR_MENUBAR_BACKGROUND[] = "COLOR_MENUBAR_BACKGROUND";
static const char __pyx_k_COLOR_PLOT_LINES_HOVERED[] = "COLOR_PLOT_LINES_HOVERED";
static const char __pyx_k_COLOR_RESIZE_GRIP_ACTIVE[] = "COLOR_RESIZE_GRIP_ACTIVE";
static const char __pyx_k_COLOR_SLIDER_GRAB_ACTIVE[] = "COLOR_SLIDER_GRAB_ACTIVE";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_INPUT_TEXT_CHARS_DECIMAL[] = "INPUT_TEXT_CHARS_DECIMAL";
static const char __pyx_k_MOUSE_CURSOR_RESIZE_NESW[] = "MOUSE_CURSOR_RESIZE_NESW";
static const char __pyx_k_MOUSE_CURSOR_RESIZE_NWSE[] = "MOUSE_CURSOR_RESIZE_NWSE";
static const char __pyx_k_STYLE_ITEM_INNER_SPACING[] = "STYLE_ITEM_INNER_SPACING";
static const char __pyx_k_WINDOW_NO_SAVED_SETTINGS[] = "WINDOW_NO_SAVED_SETTINGS";
static const char __pyx_k_begin_popup_context_item[] = "begin_popup_context_item";
static const char __pyx_k_is_mouse_hovering_window[] = "is_mouse_hovering_window";
static const char __pyx_k_s_improperly_initialized[] = "%s improperly initialized";
static const char __pyx_k_set_next_window_centered[] = "set_next_window_centered";
static const char __pyx_k_set_next_window_position[] = "set_next_window_position";
static const char __pyx_k_COLOR_CLOSE_BUTTON_ACTIVE[] = "COLOR_CLOSE_BUTTON_ACTIVE";
static const char __pyx_k_COLOR_RESIZE_GRIP_HOVERED[] = "COLOR_RESIZE_GRIP_HOVERED";
static const char __pyx_k_INPUT_TEXT_CHARS_NO_BLANK[] = "INPUT_TEXT_CHARS_NO_BLANK";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_WINDOW_ALWAYS_AUTO_RESIZE[] = "WINDOW_ALWAYS_AUTO_RESIZE";
static const char __pyx_k_set_next_window_collapsed[] = "set_next_window_collapsed";
static const char __pyx_k_vertex_buffer_vertex_size[] = "vertex_buffer_vertex_size";
static const char __pyx_k_COLOR_CLOSE_BUTTON_HOVERED[] = "COLOR_CLOSE_BUTTON_HOVERED";
static const char __pyx_k_COLOR_SCROLLBAR_BACKGROUND[] = "COLOR_SCROLLBAR_BACKGROUND";
static const char __pyx_k_INPUT_TEXT_ALLOW_TAB_INPUT[] = "INPUT_TEXT_ALLOW_TAB_INPUT";
static const char __pyx_k_INPUT_TEXT_AUTO_SELECT_ALL[] = "INPUT_TEXT_AUTO_SELECT_ALL";
static const char __pyx_k_INPUT_TEXT_CALLBACK_ALWAYS[] = "INPUT_TEXT_CALLBACK_ALWAYS";
static const char __pyx_k_INPUT_TEXT_CHARS_UPPERCASE[] = "INPUT_TEXT_CHARS_UPPERCASE";
static const char __pyx_k_begin_popup_context_window[] = "begin_popup_context_window";
static const char __pyx_k_is_pos_hovering_any_window[] = "is_pos_hovering_any_window";
static const char __pyx_k_COLOR_SCROLLBAR_GRAB_ACTIVE[] = "COLOR_SCROLLBAR_GRAB_ACTIVE";
static const char __pyx_k_INPUT_TEXT_CALLBACK_HISTORY[] = "INPUT_TEXT_CALLBACK_HISTORY";
static const char __pyx_k_No_matching_signature_found[] = "No matching signature found";
static const char __pyx_k_SELECTABLE_SPAN_ALL_COLUMNS[] = "SELECTABLE_SPAN_ALL_COLUMNS";
static const char __pyx_k_STYLE_CHILD_WINDOW_ROUNDING[] = "STYLE_CHILD_WINDOW_ROUNDING";
static const char __pyx_k_TREE_NODE_COLLAPSING_HEADER[] = "TREE_NODE_COLLAPSING_HEADER";
static const char __pyx_k_WINDOW_NO_SCROLL_WITH_MOUSE[] = "WINDOW_NO_SCROLL_WITH_MOUSE";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_COLOR_MODAL_WINDOW_DARKENING[] = "COLOR_MODAL_WINDOW_DARKENING";
static const char __pyx_k_COLOR_PLOT_HISTOGRAM_HOVERED[] = "COLOR_PLOT_HISTOGRAM_HOVERED";
static const char __pyx_k_COLOR_SCROLLBAR_GRAB_HOVERED[] = "COLOR_SCROLLBAR_GRAB_HOVERED";
static const char __pyx_k_INPUT_TEXT_CHARS_HEXADECIMAL[] = "INPUT_TEXT_CHARS_HEXADECIMAL";
static const char __pyx_k_SELECTABLE_DONT_CLOSE_POPUPS[] = "SELECTABLE_DONT_CLOSE_POPUPS";
static const char __pyx_k_TREE_NODE_ALLOW_OVERLAP_MODE[] = "TREE_NODE_ALLOW_OVERLAP_MODE";
static const char __pyx_k_WINDOW_NO_FOCUS_ON_APPEARING[] = "WINDOW_NO_FOCUS_ON_APPEARING";
static const char __pyx_k_get_content_region_available[] = "get_content_region_available";
static const char __pyx_k_is_mouse_hovering_any_window[] = "is_mouse_hovering_any_window";
static const char __pyx_k_COLOR_CHILD_WINDOW_BACKGROUND[] = "COLOR_CHILD_WINDOW_BACKGROUND";
static const char __pyx_k_COLOR_FRAME_BACKGROUND_ACTIVE[] = "COLOR_FRAME_BACKGROUND_ACTIVE";
static const char __pyx_k_COLOR_TITLE_BACKGROUND_ACTIVE[] = "COLOR_TITLE_BACKGROUND_ACTIVE";
static const char __pyx_k_INPUT_TEXT_ALWAYS_INSERT_MODE[] = "INPUT_TEXT_ALWAYS_INSERT_MODE";
static const char __pyx_k_INPUT_TEXT_ENTER_RETURNS_TRUE[] = "INPUT_TEXT_ENTER_RETURNS_TRUE";
static const char __pyx_k_SELECTABLE_ALLOW_DOUBLE_CLICK[] = "SELECTABLE_ALLOW_DOUBLE_CLICK";
static const char __pyx_k_TREE_NODE_NO_AUTO_OPEN_ON_LOG[] = "TREE_NODE_NO_AUTO_OPEN_ON_LOG";
static const char __pyx_k_get_window_content_region_max[] = "get_window_content_region_max";
static const char __pyx_k_get_window_content_region_min[] = "get_window_content_region_min";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_COLOR_FRAME_BACKGROUND_HOVERED[] = "COLOR_FRAME_BACKGROUND_HOVERED";
static const char __pyx_k_COLOR_TEXT_SELECTED_BACKGROUND[] = "COLOR_TEXT_SELECTED_BACKGROUND";
static const char __pyx_k_INPUT_TEXT_CALLBACK_COMPLETION[] = "INPUT_TEXT_CALLBACK_COMPLETION";
static const char __pyx_k_TREE_NODE_NO_TREE_PUSH_ON_OPEN[] = "TREE_NODE_NO_TREE_PUSH_ON_OPEN";
static const char __pyx_k_TREE_NODE_OPEN_ON_DOUBLE_CLICK[] = "TREE_NODE_OPEN_ON_DOUBLE_CLICK";
static const char __pyx_k_pair_param_must_be_length_of_2[] = "pair param must be length of 2";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_vertex_buffer_vertex_uv_offset[] = "vertex_buffer_vertex_uv_offset";
static const char __pyx_k_INPUT_TEXT_CALLBACK_CHAR_FILTER[] = "INPUT_TEXT_CALLBACK_CHAR_FILTER";
static const char __pyx_k_INPUT_TEXT_NO_HORIZONTAL_SCROLL[] = "INPUT_TEXT_NO_HORIZONTAL_SCROLL";
static const char __pyx_k_WINDOW_HORIZONTAL_SCROLLING_BAR[] = "WINDOW_HORIZONTAL_SCROLLING_BAR";
static const char __pyx_k_get_window_content_region_width[] = "get_window_content_region_width";
static const char __pyx_k_self_ref_cannot_be_converted_to[] = "self.ref cannot be converted to a Python object for pickling";
static const char __pyx_k_todo_consider_inlining_every_oc[] = "\n\n.. todo:: consider inlining every occurence of ``_cast_args_ImVecX`` (profile)\n.. todo: verify mem safety of char* variables and check for leaks\n";
static const char __pyx_k_vertex_buffer_vertex_col_offset[] = "vertex_buffer_vertex_col_offset";
static const char __pyx_k_vertex_buffer_vertex_pos_offset[] = "vertex_buffer_vertex_pos_offset";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_COLOR_TITLE_BACKGROUND_COLLAPSED[] = "COLOR_TITLE_BACKGROUND_COLLAPSED";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Expected_at_least_d_argument_s_g[] = "Expected at least %d argument%s, got %d";
static const char __pyx_k_Function_call_with_ambiguous_arg[] = "Function call with ambiguous argument types";
static const char __pyx_k_INPUT_TEXT_CTRL_ENTER_FOR_NEW_LI[] = "INPUT_TEXT_CTRL_ENTER_FOR_NEW_LINE";
static const char __pyx_k_Incompatible_checksums_s_vs_0xb0[] = "Incompatible checksums (%s vs 0xb068931 = (name))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_Style_value_must_be_float_or_two[] = "Style value must be float or two-elements list/tuple";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_Unsufficient_style_info_variable[] = "Unsufficient style info: {} variable lacks a value";
static const char __pyx_k_WINDOW_ALWAYS_HORIZONTAL_SCROLLB[] = "WINDOW_ALWAYS_HORIZONTAL_SCROLLBAR";
static const char __pyx_k_WINDOW_ALWAYS_USE_WINDOW_PADDING[] = "WINDOW_ALWAYS_USE_WINDOW_PADDING";
static const char __pyx_k_WINDOW_ALWAYS_VERTICAL_SCROLLBAR[] = "WINDOW_ALWAYS_VERTICAL_SCROLLBAR";
static const char __pyx_k_WINDOW_NO_BRING_TO_FRONT_ON_FOCU[] = "WINDOW_NO_BRING_TO_FRONT_ON_FOCUS";
static const char __pyx_k_get_content_region_available_wid[] = "get_content_region_available_width";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_is_root_window_or_any_child_focu[] = "is_root_window_or_any_child_focused";
static const char __pyx_k_is_root_window_or_any_child_hove[] = "is_root_window_or_any_child_hovered";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_quadruple_param_must_be_length_o[] = "quadruple param must be length of 4";
static const char __pyx_k_self__ptr_cannot_be_converted_to[] = "self._ptr cannot be converted to a Python object for pickling";
static const char __pyx_k_self_ranges_ptr_cannot_be_conver[] = "self.ranges_ptr cannot be converted to a Python object for pickling";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static PyObject *__pyx_kp_s_3f;
static PyObject *__pyx_n_s_ALWAYS;
static PyObject *__pyx_n_s_APPEARING;
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_n_s_COLOR_BORDER;
static PyObject *__pyx_n_s_COLOR_BORDER_SHADOW;
static PyObject *__pyx_n_s_COLOR_BUTTON;
static PyObject *__pyx_n_s_COLOR_BUTTON_ACTIVE;
static PyObject *__pyx_n_s_COLOR_BUTTON_HOVERED;
static PyObject *__pyx_n_s_COLOR_CHECK_MARK;
static PyObject *__pyx_n_s_COLOR_CHILD_WINDOW_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_CLOSE_BUTTON;
static PyObject *__pyx_n_s_COLOR_CLOSE_BUTTON_ACTIVE;
static PyObject *__pyx_n_s_COLOR_CLOSE_BUTTON_HOVERED;
static PyObject *__pyx_n_s_COLOR_COLUMN;
static PyObject *__pyx_n_s_COLOR_COLUMN_ACTIVE;
static PyObject *__pyx_n_s_COLOR_COLUMN_HOVERED;
static PyObject *__pyx_n_s_COLOR_COMBO_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_COUNT;
static PyObject *__pyx_n_s_COLOR_FRAME_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_FRAME_BACKGROUND_ACTIVE;
static PyObject *__pyx_n_s_COLOR_FRAME_BACKGROUND_HOVERED;
static PyObject *__pyx_n_s_COLOR_HEADER;
static PyObject *__pyx_n_s_COLOR_HEADER_ACTIVE;
static PyObject *__pyx_n_s_COLOR_HEADER_HOVERED;
static PyObject *__pyx_n_s_COLOR_MENUBAR_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_MODAL_WINDOW_DARKENING;
static PyObject *__pyx_n_s_COLOR_PLOT_HISTOGRAM;
static PyObject *__pyx_n_s_COLOR_PLOT_HISTOGRAM_HOVERED;
static PyObject *__pyx_n_s_COLOR_PLOT_LINES;
static PyObject *__pyx_n_s_COLOR_PLOT_LINES_HOVERED;
static PyObject *__pyx_n_s_COLOR_POPUP_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_RESIZE_GRIP;
static PyObject *__pyx_n_s_COLOR_RESIZE_GRIP_ACTIVE;
static PyObject *__pyx_n_s_COLOR_RESIZE_GRIP_HOVERED;
static PyObject *__pyx_n_s_COLOR_SCROLLBAR_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_SCROLLBAR_GRAB;
static PyObject *__pyx_n_s_COLOR_SCROLLBAR_GRAB_ACTIVE;
static PyObject *__pyx_n_s_COLOR_SCROLLBAR_GRAB_HOVERED;
static PyObject *__pyx_n_s_COLOR_SLIDER_GRAB;
static PyObject *__pyx_n_s_COLOR_SLIDER_GRAB_ACTIVE;
static PyObject *__pyx_n_s_COLOR_TEXT;
static PyObject *__pyx_n_s_COLOR_TEXT_DISABLED;
static PyObject *__pyx_n_s_COLOR_TEXT_SELECTED_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_TITLE_BACKGROUND;
static PyObject *__pyx_n_s_COLOR_TITLE_BACKGROUND_ACTIVE;
static PyObject *__pyx_n_s_COLOR_TITLE_BACKGROUND_COLLAPSED;
static PyObject *__pyx_n_s_COLOR_WINDOW_BACKGROUND;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_kp_s_Expected_at_least_d_argument_s_g;
static PyObject *__pyx_n_s_FIRST_USE_EVER;
static PyObject *__pyx_kp_s_Function_call_with_ambiguous_arg;
static PyObject *__pyx_n_s_INPUT_TEXT_ALLOW_TAB_INPUT;
static PyObject *__pyx_n_s_INPUT_TEXT_ALWAYS_INSERT_MODE;
static PyObject *__pyx_n_s_INPUT_TEXT_AUTO_SELECT_ALL;
static PyObject *__pyx_n_s_INPUT_TEXT_CALLBACK_ALWAYS;
static PyObject *__pyx_n_s_INPUT_TEXT_CALLBACK_CHAR_FILTER;
static PyObject *__pyx_n_s_INPUT_TEXT_CALLBACK_COMPLETION;
static PyObject *__pyx_n_s_INPUT_TEXT_CALLBACK_HISTORY;
static PyObject *__pyx_n_s_INPUT_TEXT_CHARS_DECIMAL;
static PyObject *__pyx_n_s_INPUT_TEXT_CHARS_HEXADECIMAL;
static PyObject *__pyx_n_s_INPUT_TEXT_CHARS_NO_BLANK;
static PyObject *__pyx_n_s_INPUT_TEXT_CHARS_UPPERCASE;
static PyObject *__pyx_n_s_INPUT_TEXT_CTRL_ENTER_FOR_NEW_LI;
static PyObject *__pyx_n_s_INPUT_TEXT_ENTER_RETURNS_TRUE;
static PyObject *__pyx_n_s_INPUT_TEXT_NO_HORIZONTAL_SCROLL;
static PyObject *__pyx_n_s_INPUT_TEXT_PASSWORD;
static PyObject *__pyx_n_s_INPUT_TEXT_READ_ONLY;
static PyObject *__pyx_n_s_ImGuiError;
static PyObject *__pyx_n_s_ImGuiID;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xb0;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_KEY_A;
static PyObject *__pyx_n_s_KEY_BACKSPACE;
static PyObject *__pyx_n_s_KEY_C;
static PyObject *__pyx_n_s_KEY_DELETE;
static PyObject *__pyx_n_s_KEY_DOWN_ARROW;
static PyObject *__pyx_n_s_KEY_END;
static PyObject *__pyx_n_s_KEY_ENTER;
static PyObject *__pyx_n_s_KEY_ESCAPE;
static PyObject *__pyx_n_s_KEY_HOME;
static PyObject *__pyx_n_s_KEY_LEFT_ARROW;
static PyObject *__pyx_n_s_KEY_PAGE_DOWN;
static PyObject *__pyx_n_s_KEY_PAGE_UP;
static PyObject *__pyx_n_s_KEY_RIGHT_ARROW;
static PyObject *__pyx_n_s_KEY_TAB;
static PyObject *__pyx_n_s_KEY_UP_ARROW;
static PyObject *__pyx_n_s_KEY_V;
static PyObject *__pyx_n_s_KEY_X;
static PyObject *__pyx_n_s_KEY_Y;
static PyObject *__pyx_n_s_KEY_Z;
static PyObject *__pyx_n_s_MOUSE_CURSOR_ARROW;
static PyObject *__pyx_n_s_MOUSE_CURSOR_MOVE;
static PyObject *__pyx_n_s_MOUSE_CURSOR_RESIZE_EW;
static PyObject *__pyx_n_s_MOUSE_CURSOR_RESIZE_NESW;
static PyObject *__pyx_n_s_MOUSE_CURSOR_RESIZE_NS;
static PyObject *__pyx_n_s_MOUSE_CURSOR_RESIZE_NWSE;
static PyObject *__pyx_n_s_MOUSE_CURSOR_TEXT_INPUT;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_kp_s_No_matching_signature_found;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_n_s_ONCE;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SELECTABLE_ALLOW_DOUBLE_CLICK;
static PyObject *__pyx_n_s_SELECTABLE_DONT_CLOSE_POPUPS;
static PyObject *__pyx_n_s_SELECTABLE_SPAN_ALL_COLUMNS;
static PyObject *__pyx_n_s_STYLE_ALPHA;
static PyObject *__pyx_n_s_STYLE_CHILD_WINDOW_ROUNDING;
static PyObject *__pyx_n_s_STYLE_FRAME_PADDING;
static PyObject *__pyx_n_s_STYLE_FRAME_ROUNDING;
static PyObject *__pyx_n_s_STYLE_GRAB_MIN_SIZE;
static PyObject *__pyx_n_s_STYLE_INDENT_SPACING;
static PyObject *__pyx_n_s_STYLE_ITEM_INNER_SPACING;
static PyObject *__pyx_n_s_STYLE_ITEM_SPACING;
static PyObject *__pyx_n_s_STYLE_WINDOW_MIN_SIZE;
static PyObject *__pyx_n_s_STYLE_WINDOW_PADDING;
static PyObject *__pyx_n_s_STYLE_WINDOW_ROUNDING;
static PyObject *__pyx_kp_s_Style_value_must_be_float_or_two;
static PyObject *__pyx_n_s_TREE_NODE_ALLOW_OVERLAP_MODE;
static PyObject *__pyx_n_s_TREE_NODE_BULLET;
static PyObject *__pyx_n_s_TREE_NODE_COLLAPSING_HEADER;
static PyObject *__pyx_n_s_TREE_NODE_DEFAULT_OPEN;
static PyObject *__pyx_n_s_TREE_NODE_FRAMED;
static PyObject *__pyx_n_s_TREE_NODE_LEAF;
static PyObject *__pyx_n_s_TREE_NODE_NO_AUTO_OPEN_ON_LOG;
static PyObject *__pyx_n_s_TREE_NODE_NO_TREE_PUSH_ON_OPEN;
static PyObject *__pyx_n_s_TREE_NODE_OPEN_ON_ARROW;
static PyObject *__pyx_n_s_TREE_NODE_OPEN_ON_DOUBLE_CLICK;
static PyObject *__pyx_n_s_TREE_NODE_SELECTED;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_kp_s_Unsufficient_style_info_variable;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_Vec2;
static PyObject *__pyx_n_s_Vec4;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_n_s_WINDOW_ALWAYS_AUTO_RESIZE;
static PyObject *__pyx_n_s_WINDOW_ALWAYS_HORIZONTAL_SCROLLB;
static PyObject *__pyx_n_s_WINDOW_ALWAYS_USE_WINDOW_PADDING;
static PyObject *__pyx_n_s_WINDOW_ALWAYS_VERTICAL_SCROLLBAR;
static PyObject *__pyx_n_s_WINDOW_HORIZONTAL_SCROLLING_BAR;
static PyObject *__pyx_n_s_WINDOW_MENU_BAR;
static PyObject *__pyx_n_s_WINDOW_NO_BRING_TO_FRONT_ON_FOCU;
static PyObject *__pyx_n_s_WINDOW_NO_COLLAPSE;
static PyObject *__pyx_n_s_WINDOW_NO_FOCUS_ON_APPEARING;
static PyObject *__pyx_n_s_WINDOW_NO_INPUTS;
static PyObject *__pyx_n_s_WINDOW_NO_MOVE;
static PyObject *__pyx_n_s_WINDOW_NO_RESIZE;
static PyObject *__pyx_n_s_WINDOW_NO_SAVED_SETTINGS;
static PyObject *__pyx_n_s_WINDOW_NO_SCROLLBAR;
static PyObject *__pyx_n_s_WINDOW_NO_SCROLL_WITH_MOUSE;
static PyObject *__pyx_n_s_WINDOW_NO_TITLE_BAR;
static PyObject *__pyx_n_s_WINDOW_SHOW_BORDERS;
static PyObject *__pyx_kp_s__25;
static PyObject *__pyx_kp_s__26;
static PyObject *__pyx_kp_s__28;
static PyObject *__pyx_kp_s__45;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_active;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_also_over_items;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_begin;
static PyObject *__pyx_n_s_begin_child;
static PyObject *__pyx_n_s_begin_group;
static PyObject *__pyx_n_s_begin_main_menu_bar;
static PyObject *__pyx_n_s_begin_menu;
static PyObject *__pyx_n_s_begin_menu_bar;
static PyObject *__pyx_n_s_begin_popup;
static PyObject *__pyx_n_s_begin_popup_context_item;
static PyObject *__pyx_n_s_begin_popup_context_window;
static PyObject *__pyx_n_s_begin_popup_modal;
static PyObject *__pyx_n_s_begin_tooltip;
static PyObject *__pyx_n_s_border;
static PyObject *__pyx_n_s_border_color;
static PyObject *__pyx_n_s_buffer_length;
static PyObject *__pyx_n_s_bullet;
static PyObject *__pyx_n_s_bullet_text;
static PyObject *__pyx_n_s_button;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_change_speed;
static PyObject *__pyx_n_s_changed;
static PyObject *__pyx_n_s_checkbox;
static PyObject *__pyx_n_s_checkbox_flags;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_clicked;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_clip;
static PyObject *__pyx_n_s_closable;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_close_current_popup;
static PyObject *__pyx_n_s_collapsed;
static PyObject *__pyx_n_s_collapsing_header;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_color_button;
static PyObject *__pyx_n_s_color_edit3;
static PyObject *__pyx_n_s_color_edit4;
static PyObject *__pyx_n_s_column_index;
static PyObject *__pyx_n_s_columns;
static PyObject *__pyx_n_s_combo;
static PyObject *__pyx_n_s_condition;
static PyObject *__pyx_n_s_contextlib;
static PyObject *__pyx_n_s_contextmanager;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_current;
static PyObject *__pyx_n_s_decimal_precision;
static PyObject *__pyx_n_s_defaults;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_display_format;
static PyObject *__pyx_n_s_drag_float;
static PyObject *__pyx_n_s_drag_float2;
static PyObject *__pyx_n_s_drag_float3;
static PyObject *__pyx_n_s_drag_float4;
static PyObject *__pyx_n_s_drag_int;
static PyObject *__pyx_n_s_drag_int2;
static PyObject *__pyx_n_s_drag_int3;
static PyObject *__pyx_n_s_drag_int4;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_dummy;
static PyObject *__pyx_n_s_enabled;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_end_child;
static PyObject *__pyx_n_s_end_group;
static PyObject *__pyx_n_s_end_main_menu_bar;
static PyObject *__pyx_n_s_end_menu;
static PyObject *__pyx_n_s_end_menu_bar;
static PyObject *__pyx_n_s_end_popup;
static PyObject *__pyx_n_s_end_tooltip;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_kp_s_f;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_fillvalue;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_flags_value;
static PyObject *__pyx_n_s_font;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_frame_padding;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_get_column_index;
static PyObject *__pyx_n_s_get_column_offset;
static PyObject *__pyx_n_s_get_column_width;
static PyObject *__pyx_n_s_get_columns_count;
static PyObject *__pyx_n_s_get_content_region_available;
static PyObject *__pyx_n_s_get_content_region_available_wid;
static PyObject *__pyx_n_s_get_content_region_max;
static PyObject *__pyx_n_s_get_draw_data;
static PyObject *__pyx_n_s_get_io;
static PyObject *__pyx_n_s_get_item_rect_max;
static PyObject *__pyx_n_s_get_item_rect_min;
static PyObject *__pyx_n_s_get_item_rect_size;
static PyObject *__pyx_n_s_get_mouse_cursor;
static PyObject *__pyx_n_s_get_mouse_drag_delta;
static PyObject *__pyx_n_s_get_style;
static PyObject *__pyx_n_s_get_window_content_region_max;
static PyObject *__pyx_n_s_get_window_content_region_min;
static PyObject *__pyx_n_s_get_window_content_region_width;
static PyObject *__pyx_n_s_get_window_height;
static PyObject *__pyx_n_s_get_window_position;
static PyObject *__pyx_n_s_get_window_size;
static PyObject *__pyx_n_s_get_window_width;
static PyObject *__pyx_n_s_glyph_ranges;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_n_s_height_in_items;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_identifier;
static PyObject *__pyx_n_s_image;
static PyObject *__pyx_n_s_image_button;
static PyObject *__pyx_n_s_imgui_core;
static PyObject *__pyx_kp_s_imgui_core_pyx;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_items;
static PyObject *__pyx_n_s_indent;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_index_buffer_index_size;
static PyObject *__pyx_n_s_inout_color;
static PyObject *__pyx_n_s_inout_current;
static PyObject *__pyx_n_s_inout_flags;
static PyObject *__pyx_n_s_inout_opened;
static PyObject *__pyx_n_s_inout_selected;
static PyObject *__pyx_n_s_inout_state;
static PyObject *__pyx_n_s_inout_text;
static PyObject *__pyx_n_s_inout_value;
static PyObject *__pyx_n_s_inout_values;
static PyObject *__pyx_n_s_inout_visible;
static PyObject *__pyx_n_s_input_float;
static PyObject *__pyx_n_s_input_float2;
static PyObject *__pyx_n_s_input_float3;
static PyObject *__pyx_n_s_input_float4;
static PyObject *__pyx_n_s_input_int;
static PyObject *__pyx_n_s_input_int2;
static PyObject *__pyx_n_s_input_int3;
static PyObject *__pyx_n_s_input_int4;
static PyObject *__pyx_n_s_input_text;
static PyObject *__pyx_n_s_input_text_multiline;
static PyObject *__pyx_n_s_invisible_button;
static PyObject *__pyx_n_s_io;
static PyObject *__pyx_n_s_is_any_item_active;
static PyObject *__pyx_n_s_is_any_item_hovered;
static PyObject *__pyx_n_s_is_item_active;
static PyObject *__pyx_n_s_is_item_clicked;
static PyObject *__pyx_n_s_is_item_hovered;
static PyObject *__pyx_n_s_is_item_hovered_rect;
static PyObject *__pyx_n_s_is_item_visible;
static PyObject *__pyx_n_s_is_mouse_dragging;
static PyObject *__pyx_n_s_is_mouse_hovering_any_window;
static PyObject *__pyx_n_s_is_mouse_hovering_rect;
static PyObject *__pyx_n_s_is_mouse_hovering_window;
static PyObject *__pyx_n_s_is_pos_hovering_any_window;
static PyObject *__pyx_n_s_is_rect_visible;
static PyObject *__pyx_n_s_is_root_window_focused;
static PyObject *__pyx_n_s_is_root_window_or_any_child_focu;
static PyObject *__pyx_n_s_is_root_window_or_any_child_hove;
static PyObject *__pyx_n_s_is_window_collapsed;
static PyObject *__pyx_n_s_is_window_focused;
static PyObject *__pyx_n_s_is_window_hovered;
static PyObject *__pyx_n_s_istyled;
static PyObject *__pyx_n_s_item;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_iterator;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_izip_longest;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_label_text;
static PyObject *__pyx_n_s_listbox;
static PyObject *__pyx_n_s_listbox_footer;
static PyObject *__pyx_n_s_listbox_header;
static PyObject *__pyx_n_s_lock_threshold;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_value;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_menu_item;
static PyObject *__pyx_n_s_min_value;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_mouse_button;
static PyObject *__pyx_n_s_mouse_cursor_type;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_namedtuple;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_new_frame;
static PyObject *__pyx_n_s_new_line;
static PyObject *__pyx_n_s_next_column;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_offset_x;
static PyObject *__pyx_n_s_open_popup;
static PyObject *__pyx_n_s_opened;
static PyObject *__pyx_n_s_outline_border;
static PyObject *__pyx_n_s_output;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_kp_s_pair_param_must_be_length_of_2;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pop_font;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_position_x;
static PyObject *__pyx_n_s_position_y;
static PyObject *__pyx_n_s_power;
static PyObject *__pyx_n_s_push_font;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_kp_s_quadruple_param_must_be_length_o;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_r_max_x;
static PyObject *__pyx_n_s_r_max_y;
static PyObject *__pyx_n_s_r_min_x;
static PyObject *__pyx_n_s_r_min_y;
static PyObject *__pyx_n_s_radio_button;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_render;
static PyObject *__pyx_n_s_render_callback;
static PyObject *__pyx_n_s_require_pointer;
static PyObject *__pyx_n_s_reset_mouse_drag_delta;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_kp_s_s_improperly_initialized;
static PyObject *__pyx_n_s_same_line;
static PyObject *__pyx_n_s_scale;
static PyObject *__pyx_n_s_selectable;
static PyObject *__pyx_n_s_selected;
static PyObject *__pyx_kp_s_self__ptr_cannot_be_converted_to;
static PyObject *__pyx_kp_s_self_ranges_ptr_cannot_be_conver;
static PyObject *__pyx_kp_s_self_ref_cannot_be_converted_to;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_separator;
static PyObject *__pyx_n_s_set_column_offset;
static PyObject *__pyx_n_s_set_item_allow_overlap;
static PyObject *__pyx_n_s_set_mouse_cursor;
static PyObject *__pyx_n_s_set_next_window_centered;
static PyObject *__pyx_n_s_set_next_window_collapsed;
static PyObject *__pyx_n_s_set_next_window_focus;
static PyObject *__pyx_n_s_set_next_window_position;
static PyObject *__pyx_n_s_set_next_window_size;
static PyObject *__pyx_n_s_set_tooltip;
static PyObject *__pyx_n_s_set_window_font_scale;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_shortcut;
static PyObject *__pyx_n_s_show_alpha;
static PyObject *__pyx_n_s_show_metrics_window;
static PyObject *__pyx_n_s_show_style_editor;
static PyObject *__pyx_n_s_show_test_window;
static PyObject *__pyx_n_s_show_user_guide;
static PyObject *__pyx_n_s_shutdown;
static PyObject *__pyx_n_s_signatures;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_size_height;
static PyObject *__pyx_n_s_size_pixels;
static PyObject *__pyx_n_s_size_width;
static PyObject *__pyx_n_s_slider_float;
static PyObject *__pyx_n_s_slider_float2;
static PyObject *__pyx_n_s_slider_float3;
static PyObject *__pyx_n_s_slider_float4;
static PyObject *__pyx_n_s_slider_int;
static PyObject *__pyx_n_s_slider_int2;
static PyObject *__pyx_n_s_slider_int3;
static PyObject *__pyx_n_s_slider_int4;
static PyObject *__pyx_n_s_small_button;
static PyObject *__pyx_n_s_small_height;
static PyObject *__pyx_n_s_spacing;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_state;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_step_fast;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_strip;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_style;
static PyObject *__pyx_n_s_styled;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_text_colored;
static PyObject *__pyx_n_s_text_unformatted;
static PyObject *__pyx_n_s_texture_id;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tint_color;
static PyObject *__pyx_n_s_title;
static PyObject *__pyx_n_s_tree_node;
static PyObject *__pyx_n_s_tree_pop;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unindent;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_kp_s_utf_8;
static PyObject *__pyx_n_s_uv0;
static PyObject *__pyx_n_s_uv1;
static PyObject *__pyx_n_s_v_slider_float;
static PyObject *__pyx_n_s_v_slider_int;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_value0;
static PyObject *__pyx_n_s_value1;
static PyObject *__pyx_n_s_value2;
static PyObject *__pyx_n_s_value3;
static PyObject *__pyx_n_s_var;
static PyObject *__pyx_n_s_variable;
static PyObject *__pyx_n_s_variables_and_values;
static PyObject *__pyx_n_s_vertex_buffer_vertex_col_offset;
static PyObject *__pyx_n_s_vertex_buffer_vertex_pos_offset;
static PyObject *__pyx_n_s_vertex_buffer_vertex_size;
static PyObject *__pyx_n_s_vertex_buffer_vertex_uv_offset;
static PyObject *__pyx_n_s_visible;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_wrap_pos_x;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_zip_longest;
static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_10texture_id___get__(struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_9clip_rect___get__(struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_10elem_count___get__(struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15cmd_buffer_size___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15cmd_buffer_data___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15vtx_buffer_size___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15vtx_buffer_data___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15idx_buffer_size___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15idx_buffer_data___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_8commands___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawList_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_5alpha___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_5alpha_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14window_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_14window_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_15window_min_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_15window_min_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_15window_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_15window_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_21child_window_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_21child_window_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_13frame_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_13frame_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14frame_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_14frame_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_12item_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_12item_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18item_inner_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_18item_inner_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_19touch_extra_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_19touch_extra_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14indent_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_14indent_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_19columns_min_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_19columns_min_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14scrollbar_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_14scrollbar_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18scrollbar_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_18scrollbar_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_13grab_min_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_13grab_min_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_13grab_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_13grab_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_22display_window_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_22display_window_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_25display_safe_area_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_25display_safe_area_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18anti_aliased_lines___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_18anti_aliased_lines_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_19anti_aliased_shapes___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_19anti_aliased_shapes_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5imgui_4core_9_DrawData___init__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_2_require_pointer(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_4deindex_all_buffers(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_6scale_clip_rects(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_5valid___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_9cmd_count___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_15total_vtx_count___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_15total_idx_count___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_14commands_lists___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_9_DrawData_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5imgui_4core_18_StaticGlyphRanges___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_18_StaticGlyphRanges_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5imgui_4core_5_Font___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__Font *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_5_Font_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__Font *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5imgui_4core_10_FontAtlas___init__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_2_require_pointer(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_4add_font_default(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_6add_font_from_file_ttf(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self, PyObject *__pyx_v_filename, float __pyx_v_size_pixels, struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_glyph_ranges); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_8clear_tex_data(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_10clear_input_data(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_12clear_fonts(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_14clear(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_16get_glyph_ranges_default(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_18get_glyph_ranges_korean(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_20get_glyph_ranges_japanese(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_22get_glyph_ranges_chinese(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_24get_glyph_ranges_cyrillic(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_26get_glyph_ranges_latin(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_28get_tex_data_as_alpha8(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_30get_tex_data_as_rgba32(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_10texture_id___get__(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_10_FontAtlas_10texture_id_2__set__(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_32__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_34__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5imgui_4core_3_IO___init__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_12display_size___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_12display_size_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_10delta_time___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_10delta_time_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_time); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_15ini_saving_rate___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_15ini_saving_rate_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_13log_file_name___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_13log_file_name_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_23mouse_double_click_time___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_23mouse_double_click_time_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_31mouse_double_click_max_distance___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_31mouse_double_click_max_distance_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_20mouse_drag_threshold___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_20mouse_drag_threshold_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_7key_map___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_16key_repeat_delay___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_16key_repeat_delay_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_15key_repeat_rate___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_15key_repeat_rate_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_5fonts___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_17font_global_scale___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_17font_global_scale_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_23font_allow_user_scaling___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_23font_allow_user_scaling_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_15render_callback___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_15render_callback_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_fn); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_16display_fb_scale___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_16display_fb_scale_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_19display_visible_min___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_19display_visible_min_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_19display_visible_max___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_19display_visible_max_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_9mouse_pos___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_9mouse_pos_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_10mouse_down___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_11mouse_wheel___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_11mouse_wheel_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_17mouse_draw_cursor___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_17mouse_draw_cursor_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_8key_ctrl___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_8key_ctrl_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_9key_shift___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_9key_shift_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_7key_alt___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_7key_alt_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_9key_super___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static int __pyx_pf_5imgui_4core_3_IO_9key_super_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_9keys_down___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_2add_input_character(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, ImWchar __pyx_v_c); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_18want_capture_mouse___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_21want_capture_keyboard___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_15want_text_input___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_9framerate___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_14metrics_allocs___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_23metrics_render_vertices___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_22metrics_active_windows___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__IO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_3_IO_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5imgui_4core_get_io(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_2get_style(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_4new_frame(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_6render(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_8shutdown(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_10show_user_guide(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_12show_style_editor(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_style); /* proto */
static PyObject *__pyx_pf_5imgui_4core_14show_test_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_closable); /* proto */
static PyObject *__pyx_pf_5imgui_4core_16show_metrics_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_closable); /* proto */
static PyObject *__pyx_pf_5imgui_4core_18begin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_closable, ImGuiWindowFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_20get_draw_data(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_22end(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_24begin_child(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults); /* proto */
static PyObject *__pyx_pf_5imgui_4core_337__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_327begin_child(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, float __pyx_v_width, float __pyx_v_height, bool __pyx_v_border, ImGuiWindowFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_339__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_329begin_child(CYTHON_UNUSED PyObject *__pyx_self, ImGuiID __pyx_v_name, float __pyx_v_width, float __pyx_v_height, bool __pyx_v_border, ImGuiWindowFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_26end_child(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_28get_content_region_max(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_30get_content_region_available(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_32get_content_region_available_width(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_34get_window_content_region_min(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_36get_window_content_region_max(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_38get_window_content_region_width(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_40set_window_font_scale(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_scale); /* proto */
static PyObject *__pyx_pf_5imgui_4core_42set_next_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_collapsed, ImGuiSetCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_5imgui_4core_44set_next_window_focus(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_46get_window_position(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_48get_window_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_50get_window_width(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_52get_window_height(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_54set_next_window_position(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_x, float __pyx_v_y, ImGuiSetCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_5imgui_4core_56set_next_window_centered(CYTHON_UNUSED PyObject *__pyx_self, ImGuiSetCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_5imgui_4core_58set_next_window_size(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width, float __pyx_v_height, ImGuiSetCond __pyx_v_condition); /* proto */
static PyObject *__pyx_pf_5imgui_4core_60is_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_62tree_node(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, ImGuiTreeNodeFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_64tree_pop(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_66collapsing_header(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, PyObject *__pyx_v_visible, ImGuiTreeNodeFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_68selectable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_selected, ImGuiTreeNodeFlags __pyx_v_flags, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_70listbox(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_current, PyObject *__pyx_v_items, int __pyx_v_height_in_items); /* proto */
static PyObject *__pyx_pf_5imgui_4core_72listbox_header(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_74listbox_footer(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_76set_tooltip(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_5imgui_4core_78begin_tooltip(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_80end_tooltip(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_82begin_main_menu_bar(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_84end_main_menu_bar(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_86begin_menu_bar(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_88end_menu_bar(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_90begin_menu(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_enabled); /* proto */
static PyObject *__pyx_pf_5imgui_4core_92end_menu(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_94menu_item(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_shortcut, bool __pyx_v_selected, PyObject *__pyx_v_enabled); /* proto */
static PyObject *__pyx_pf_5imgui_4core_96open_popup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_5imgui_4core_98begin_popup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_5imgui_4core_100begin_popup_modal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_title, PyObject *__pyx_v_visible, ImGuiWindowFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_102begin_popup_context_item(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, int __pyx_v_mouse_button); /* proto */
static PyObject *__pyx_pf_5imgui_4core_104begin_popup_context_window(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_also_over_items, PyObject *__pyx_v_name, int __pyx_v_mouse_button); /* proto */
static PyObject *__pyx_pf_5imgui_4core_106end_popup(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_108close_current_popup(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_110text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_5imgui_4core_112text_colored(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_5imgui_4core_114label_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_5imgui_4core_116text_unformatted(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_5imgui_4core_118bullet(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_120bullet_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_5imgui_4core_122button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_124small_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_5imgui_4core_126invisible_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_identifier, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_128color_button(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, PyObject *__pyx_v_a, bool __pyx_v_small_height, bool __pyx_v_outline_border); /* proto */
static PyObject *__pyx_pf_5imgui_4core_130image_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_texture_id, float __pyx_v_width, float __pyx_v_height, PyObject *__pyx_v_uv0, PyObject *__pyx_v_uv1, PyObject *__pyx_v_tint_color, PyObject *__pyx_v_border_color, int __pyx_v_frame_padding); /* proto */
static PyObject *__pyx_pf_5imgui_4core_132image(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_texture_id, float __pyx_v_width, float __pyx_v_height, PyObject *__pyx_v_uv0, PyObject *__pyx_v_uv1, PyObject *__pyx_v_tint_color, PyObject *__pyx_v_border_color); /* proto */
static PyObject *__pyx_pf_5imgui_4core_134checkbox(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_state); /* proto */
static PyObject *__pyx_pf_5imgui_4core_136checkbox_flags(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, unsigned int __pyx_v_flags, unsigned int __pyx_v_flags_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_138radio_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_active); /* proto */
static PyObject *__pyx_pf_5imgui_4core_140combo(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_current, PyObject *__pyx_v_items, int __pyx_v_height_in_items); /* proto */
static PyObject *__pyx_pf_5imgui_4core_142color_edit3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b); /* proto */
static PyObject *__pyx_pf_5imgui_4core_144color_edit4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a, bool __pyx_v_show_alpha); /* proto */
static PyObject *__pyx_pf_5imgui_4core_146drag_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_change_speed, float __pyx_v_max_value, float __pyx_v_min_value, PyObject *__pyx_v_display_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_148drag_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_change_speed, float __pyx_v_max_value, float __pyx_v_min_value, PyObject *__pyx_v_display_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_150drag_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_change_speed, float __pyx_v_max_value, float __pyx_v_min_value, PyObject *__pyx_v_display_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_152drag_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, float __pyx_v_change_speed, float __pyx_v_max_value, float __pyx_v_min_value, PyObject *__pyx_v_display_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_154drag_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, float __pyx_v_change_speed, int __pyx_v_max_value, int __pyx_v_min_value, PyObject *__pyx_v_display_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_156drag_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, float __pyx_v_change_speed, int __pyx_v_max_value, int __pyx_v_min_value, PyObject *__pyx_v_display_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_158drag_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, float __pyx_v_change_speed, int __pyx_v_max_value, int __pyx_v_min_value, PyObject *__pyx_v_display_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_160drag_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, float __pyx_v_change_speed, int __pyx_v_max_value, int __pyx_v_min_value, PyObject *__pyx_v_display_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_162input_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_value, int __pyx_v_buffer_length, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_164input_text_multiline(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_value, int __pyx_v_buffer_length, float __pyx_v_width, float __pyx_v_height, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_166input_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_step, float __pyx_v_step_fast, int __pyx_v_decimal_precision, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_168input_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, int __pyx_v_decimal_precision, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_170input_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, int __pyx_v_decimal_precision, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_172input_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, int __pyx_v_decimal_precision, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_174input_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, int __pyx_v_step, int __pyx_v_step_fast, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_176input_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_178input_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_180input_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, ImGuiInputTextFlags __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_5imgui_4core_182slider_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_display_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_184slider_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_display_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_186slider_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_display_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_188slider_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_display_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_190slider_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_display_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_192slider_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_display_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_194slider_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_display_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_196slider_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_display_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_198v_slider_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_display_format, float __pyx_v_power); /* proto */
static PyObject *__pyx_pf_5imgui_4core_200v_slider_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, int __pyx_v_value, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_display_format); /* proto */
static PyObject *__pyx_pf_5imgui_4core_202is_item_hovered(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_204is_item_hovered_rect(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_206is_item_active(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_208is_item_clicked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_mouse_button); /* proto */
static PyObject *__pyx_pf_5imgui_4core_210is_item_visible(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_212is_any_item_hovered(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_214is_any_item_active(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_216get_item_rect_min(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_218get_item_rect_max(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_220get_item_rect_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_222set_item_allow_overlap(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_224is_window_hovered(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_226is_window_focused(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_228is_root_window_focused(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_230is_root_window_or_any_child_focused(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_232is_root_window_or_any_child_hovered(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_234is_rect_visible(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_size_width, float __pyx_v_size_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_236is_pos_hovering_any_window(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_position_x, float __pyx_v_position_y); /* proto */
static PyObject *__pyx_pf_5imgui_4core_238is_mouse_hovering_window(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_240is_mouse_hovering_any_window(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_242is_mouse_hovering_rect(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_r_min_x, float __pyx_v_r_min_y, float __pyx_v_r_max_x, float __pyx_v_r_max_y, bool __pyx_v_clip); /* proto */
static PyObject *__pyx_pf_5imgui_4core_244is_mouse_dragging(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, float __pyx_v_lock_threshold); /* proto */
static PyObject *__pyx_pf_5imgui_4core_246get_mouse_drag_delta(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, float __pyx_v_lock_threshold); /* proto */
static PyObject *__pyx_pf_5imgui_4core_248reset_mouse_drag_delta(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button); /* proto */
static PyObject *__pyx_pf_5imgui_4core_250get_mouse_cursor(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_252set_mouse_cursor(CYTHON_UNUSED PyObject *__pyx_self, ImGuiMouseCursor __pyx_v_mouse_cursor_type); /* proto */
static PyObject *__pyx_pf_5imgui_4core_254push_font(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core__Font *__pyx_v_font); /* proto */
static PyObject *__pyx_pf_5imgui_4core_256pop_font(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_258push_style_var(CYTHON_UNUSED PyObject *__pyx_self, ImGuiStyleVar __pyx_v_variable, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_260push_style_color(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_variable, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a); /* proto */
static PyObject *__pyx_pf_5imgui_4core_262pop_style_var(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_count); /* proto */
static PyObject *__pyx_pf_5imgui_4core_264push_item_width(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_item_width); /* proto */
static PyObject *__pyx_pf_5imgui_4core_266pop_item_width(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_268calculate_item_width(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_270push_text_wrap_pos(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_wrap_pos_x); /* proto */
static PyObject *__pyx_pf_5imgui_4core_272pop_text_wrap_pos(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_274pop_style_color(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_count); /* proto */
static PyObject *__pyx_pf_5imgui_4core_276separator(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_278same_line(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_position, float __pyx_v_spacing); /* proto */
static PyObject *__pyx_pf_5imgui_4core_280new_line(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_282spacing(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_284dummy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_5imgui_4core_286indent(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width); /* proto */
static PyObject *__pyx_pf_5imgui_4core_288unindent(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width); /* proto */
static PyObject *__pyx_pf_5imgui_4core_290columns(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_count, PyObject *__pyx_v_identifier, bool __pyx_v_border); /* proto */
static PyObject *__pyx_pf_5imgui_4core_292next_column(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_294get_column_index(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_296get_column_offset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index); /* proto */
static PyObject *__pyx_pf_5imgui_4core_298set_column_offset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index, float __pyx_v_offset_x); /* proto */
static PyObject *__pyx_pf_5imgui_4core_300get_column_width(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index); /* proto */
static PyObject *__pyx_pf_5imgui_4core_302get_columns_count(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_304begin_group(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_306end_group(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_308font(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core__Font *__pyx_v_font); /* proto */
static PyObject *__pyx_pf_5imgui_4core_311styled(CYTHON_UNUSED PyObject *__pyx_self, ImGuiStyleVar __pyx_v_variable, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5imgui_4core_314istyled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_variables_and_values); /* proto */
static PyObject *__pyx_pf_5imgui_4core_317vertex_buffer_vertex_pos_offset(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_319vertex_buffer_vertex_uv_offset(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_321vertex_buffer_vertex_col_offset(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_323vertex_buffer_vertex_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5imgui_4core_325index_buffer_index_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_5imgui_4core__DrawCmd(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core__DrawList(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core_GuiStyle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core__DrawData(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core__StaticGlyphRanges(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core__Font(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core__FontAtlas(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core__IO(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct__font(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct_1_styled(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct_2_istyled(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_1_;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_512;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k__22;
static PyObject *__pyx_k__23;
static PyObject *__pyx_k__24;
static ImGuiSetCond __pyx_k__32;
static ImGuiSetCond __pyx_k__33;
static ImGuiSetCond __pyx_k__34;
static ImGuiSetCond __pyx_k__35;
static bool __pyx_k__36;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__60;
static PyObject *__pyx_slice__61;
static PyObject *__pyx_slice__62;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__153;
static PyObject *__pyx_tuple__155;
static PyObject *__pyx_tuple__157;
static PyObject *__pyx_tuple__159;
static PyObject *__pyx_tuple__161;
static PyObject *__pyx_tuple__163;
static PyObject *__pyx_tuple__165;
static PyObject *__pyx_tuple__167;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__177;
static PyObject *__pyx_tuple__179;
static PyObject *__pyx_tuple__181;
static PyObject *__pyx_tuple__183;
static PyObject *__pyx_tuple__185;
static PyObject *__pyx_tuple__187;
static PyObject *__pyx_tuple__189;
static PyObject *__pyx_tuple__191;
static PyObject *__pyx_tuple__193;
static PyObject *__pyx_tuple__195;
static PyObject *__pyx_tuple__197;
static PyObject *__pyx_tuple__199;
static PyObject *__pyx_tuple__201;
static PyObject *__pyx_tuple__203;
static PyObject *__pyx_tuple__205;
static PyObject *__pyx_tuple__207;
static PyObject *__pyx_tuple__209;
static PyObject *__pyx_tuple__211;
static PyObject *__pyx_tuple__213;
static PyObject *__pyx_tuple__215;
static PyObject *__pyx_tuple__217;
static PyObject *__pyx_tuple__219;
static PyObject *__pyx_tuple__221;
static PyObject *__pyx_tuple__223;
static PyObject *__pyx_tuple__225;
static PyObject *__pyx_tuple__227;
static PyObject *__pyx_tuple__229;
static PyObject *__pyx_tuple__231;
static PyObject *__pyx_tuple__233;
static PyObject *__pyx_tuple__238;
static PyObject *__pyx_tuple__252;
static PyObject *__pyx_tuple__254;
static PyObject *__pyx_tuple__258;
static PyObject *__pyx_tuple__260;
static PyObject *__pyx_tuple__262;
static PyObject *__pyx_tuple__264;
static PyObject *__pyx_tuple__267;
static PyObject *__pyx_tuple__269;
static PyObject *__pyx_tuple__273;
static PyObject *__pyx_tuple__277;
static PyObject *__pyx_tuple__279;
static PyObject *__pyx_tuple__281;
static PyObject *__pyx_tuple__283;
static PyObject *__pyx_tuple__287;
static PyObject *__pyx_tuple__289;
static PyObject *__pyx_tuple__291;
static PyObject *__pyx_tuple__296;
static PyObject *__pyx_tuple__298;
static PyObject *__pyx_tuple__300;
static PyObject *__pyx_tuple__307;
static PyObject *__pyx_tuple__308;
static PyObject *__pyx_tuple__309;
static PyObject *__pyx_tuple__310;
static PyObject *__pyx_tuple__311;
static PyObject *__pyx_tuple__312;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__94;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__96;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__98;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__106;
static PyObject *__pyx_codeobj__108;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__118;
static PyObject *__pyx_codeobj__120;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__122;
static PyObject *__pyx_codeobj__123;
static PyObject *__pyx_codeobj__124;
static PyObject *__pyx_codeobj__125;
static PyObject *__pyx_codeobj__126;
static PyObject *__pyx_codeobj__128;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__131;
static PyObject *__pyx_codeobj__133;
static PyObject *__pyx_codeobj__135;
static PyObject *__pyx_codeobj__137;
static PyObject *__pyx_codeobj__139;
static PyObject *__pyx_codeobj__141;
static PyObject *__pyx_codeobj__142;
static PyObject *__pyx_codeobj__143;
static PyObject *__pyx_codeobj__145;
static PyObject *__pyx_codeobj__147;
static PyObject *__pyx_codeobj__149;
static PyObject *__pyx_codeobj__151;
static PyObject *__pyx_codeobj__152;
static PyObject *__pyx_codeobj__154;
static PyObject *__pyx_codeobj__156;
static PyObject *__pyx_codeobj__158;
static PyObject *__pyx_codeobj__160;
static PyObject *__pyx_codeobj__162;
static PyObject *__pyx_codeobj__164;
static PyObject *__pyx_codeobj__166;
static PyObject *__pyx_codeobj__168;
static PyObject *__pyx_codeobj__170;
static PyObject *__pyx_codeobj__172;
static PyObject *__pyx_codeobj__174;
static PyObject *__pyx_codeobj__176;
static PyObject *__pyx_codeobj__178;
static PyObject *__pyx_codeobj__180;
static PyObject *__pyx_codeobj__182;
static PyObject *__pyx_codeobj__184;
static PyObject *__pyx_codeobj__186;
static PyObject *__pyx_codeobj__188;
static PyObject *__pyx_codeobj__190;
static PyObject *__pyx_codeobj__192;
static PyObject *__pyx_codeobj__194;
static PyObject *__pyx_codeobj__196;
static PyObject *__pyx_codeobj__198;
static PyObject *__pyx_codeobj__200;
static PyObject *__pyx_codeobj__202;
static PyObject *__pyx_codeobj__204;
static PyObject *__pyx_codeobj__206;
static PyObject *__pyx_codeobj__208;
static PyObject *__pyx_codeobj__210;
static PyObject *__pyx_codeobj__212;
static PyObject *__pyx_codeobj__214;
static PyObject *__pyx_codeobj__216;
static PyObject *__pyx_codeobj__218;
static PyObject *__pyx_codeobj__220;
static PyObject *__pyx_codeobj__222;
static PyObject *__pyx_codeobj__224;
static PyObject *__pyx_codeobj__226;
static PyObject *__pyx_codeobj__228;
static PyObject *__pyx_codeobj__230;
static PyObject *__pyx_codeobj__232;
static PyObject *__pyx_codeobj__234;
static PyObject *__pyx_codeobj__235;
static PyObject *__pyx_codeobj__236;
static PyObject *__pyx_codeobj__237;
static PyObject *__pyx_codeobj__239;
static PyObject *__pyx_codeobj__240;
static PyObject *__pyx_codeobj__241;
static PyObject *__pyx_codeobj__242;
static PyObject *__pyx_codeobj__243;
static PyObject *__pyx_codeobj__244;
static PyObject *__pyx_codeobj__245;
static PyObject *__pyx_codeobj__246;
static PyObject *__pyx_codeobj__247;
static PyObject *__pyx_codeobj__248;
static PyObject *__pyx_codeobj__249;
static PyObject *__pyx_codeobj__250;
static PyObject *__pyx_codeobj__251;
static PyObject *__pyx_codeobj__253;
static PyObject *__pyx_codeobj__255;
static PyObject *__pyx_codeobj__256;
static PyObject *__pyx_codeobj__257;
static PyObject *__pyx_codeobj__259;
static PyObject *__pyx_codeobj__261;
static PyObject *__pyx_codeobj__263;
static PyObject *__pyx_codeobj__265;
static PyObject *__pyx_codeobj__266;
static PyObject *__pyx_codeobj__268;
static PyObject *__pyx_codeobj__270;
static PyObject *__pyx_codeobj__271;
static PyObject *__pyx_codeobj__272;
static PyObject *__pyx_codeobj__274;
static PyObject *__pyx_codeobj__275;
static PyObject *__pyx_codeobj__276;
static PyObject *__pyx_codeobj__278;
static PyObject *__pyx_codeobj__280;
static PyObject *__pyx_codeobj__282;
static PyObject *__pyx_codeobj__284;
static PyObject *__pyx_codeobj__285;
static PyObject *__pyx_codeobj__286;
static PyObject *__pyx_codeobj__288;
static PyObject *__pyx_codeobj__290;
static PyObject *__pyx_codeobj__292;
static PyObject *__pyx_codeobj__293;
static PyObject *__pyx_codeobj__294;
static PyObject *__pyx_codeobj__295;
static PyObject *__pyx_codeobj__297;
static PyObject *__pyx_codeobj__299;
static PyObject *__pyx_codeobj__301;
static PyObject *__pyx_codeobj__302;
static PyObject *__pyx_codeobj__303;
static PyObject *__pyx_codeobj__304;
static PyObject *__pyx_codeobj__305;
static PyObject *__pyx_codeobj__306;
static PyObject *__pyx_codeobj__313;
PyObject *ImGuiError = 0;

/* "imgui/core.pyx":195
 * 
 * 
 * cdef bytes _bytes(str text):             # <<<<<<<<<<<<<<
 *     return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))
 * 
 */

static PyObject *__pyx_f_5imgui_4core__bytes(PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_bytes", 0);

  /* "imgui/core.pyx":196
 * 
 * cdef bytes _bytes(str text):
 *     return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (((PY_MAJOR_VERSION < 3) != 0)) {
    __Pyx_INCREF(__pyx_v_text);
    __pyx_t_1 = __pyx_v_text;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":195
 * 
 * 
 * cdef bytes _bytes(str text):             # <<<<<<<<<<<<<<
 *     return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":199
 * 
 * 
 * cdef str _from_bytes(bytes text):             # <<<<<<<<<<<<<<
 *     return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8'))
 * 
 */

static PyObject *__pyx_f_5imgui_4core__from_bytes(PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_from_bytes", 0);

  /* "imgui/core.pyx":200
 * 
 * cdef str _from_bytes(bytes text):
 *     return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8'))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (((PY_MAJOR_VERSION < 3) != 0)) {
    __Pyx_INCREF(__pyx_v_text);
    __pyx_t_1 = __pyx_v_text;
  } else {
    if (unlikely(__pyx_v_text == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "decode");
      __PYX_ERR(0, 200, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_decode_bytes(__pyx_v_text, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":199
 * 
 * 
 * cdef str _from_bytes(bytes text):             # <<<<<<<<<<<<<<
 *     return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8'))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._from_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":203
 * 
 * 
 * cdef _cast_ImVec2_tuple(cimgui.ImVec2 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec2(vec.x, vec.y)
 * 
 */

static PyObject *__pyx_f_5imgui_4core__cast_ImVec2_tuple(ImVec2 __pyx_v_vec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("_cast_ImVec2_tuple", 0);

  /* "imgui/core.pyx":204
 * 
 * cdef _cast_ImVec2_tuple(cimgui.ImVec2 vec):  # noqa
 *     return Vec2(vec.x, vec.y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Vec2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vec.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":203
 * 
 * 
 * cdef _cast_ImVec2_tuple(cimgui.ImVec2 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec2(vec.x, vec.y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("imgui.core._cast_ImVec2_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":207
 * 
 * 
 * cdef cimgui.ImVec2 _cast_tuple_ImVec2(pair) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

static ImVec2 __pyx_f_5imgui_4core__cast_tuple_ImVec2(PyObject *__pyx_v_pair) {
  ImVec2 __pyx_v_vec;
  ImVec2 __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  float __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("_cast_tuple_ImVec2", 0);

  /* "imgui/core.pyx":210
 *     cdef cimgui.ImVec2 vec
 * 
 *     if len(pair) != 2:             # <<<<<<<<<<<<<<
 *         raise ValueError("pair param must be length of 2")
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_pair); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 210, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (__pyx_t_2) {

    /* "imgui/core.pyx":211
 * 
 *     if len(pair) != 2:
 *         raise ValueError("pair param must be length of 2")             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y = pair
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 211, __pyx_L1_error)

    /* "imgui/core.pyx":210
 *     cdef cimgui.ImVec2 vec
 * 
 *     if len(pair) != 2:             # <<<<<<<<<<<<<<
 *         raise ValueError("pair param must be length of 2")
 * 
 */
  }

  /* "imgui/core.pyx":213
 *         raise ValueError("pair param must be length of 2")
 * 
 *     vec.x, vec.y = pair             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_pair))) || (PyList_CheckExact(__pyx_v_pair))) {
    PyObject* sequence = __pyx_v_pair;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 213, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_v_pair); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 213, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 213, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_vec.x = __pyx_t_7;
  __pyx_v_vec.y = __pyx_t_8;

  /* "imgui/core.pyx":215
 *     vec.x, vec.y = pair
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "imgui/core.pyx":207
 * 
 * 
 * cdef cimgui.ImVec2 _cast_tuple_ImVec2(pair) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core._cast_tuple_ImVec2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":218
 * 
 * 
 * cdef cimgui.ImVec2 _cast_args_ImVec2(float x, float y) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

static ImVec2 __pyx_f_5imgui_4core__cast_args_ImVec2(float __pyx_v_x, float __pyx_v_y) {
  ImVec2 __pyx_v_vec;
  ImVec2 __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  __Pyx_RefNannySetupContext("_cast_args_ImVec2", 0);

  /* "imgui/core.pyx":221
 *     cdef cimgui.ImVec2 vec
 * 
 *     vec.x, vec.y = x, y             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  __pyx_t_1 = __pyx_v_x;
  __pyx_t_2 = __pyx_v_y;
  __pyx_v_vec.x = __pyx_t_1;
  __pyx_v_vec.y = __pyx_t_2;

  /* "imgui/core.pyx":223
 *     vec.x, vec.y = x, y
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "imgui/core.pyx":218
 * 
 * 
 * cdef cimgui.ImVec2 _cast_args_ImVec2(float x, float y) except *:  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec2 vec
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":226
 * 
 * 
 * cdef cimgui.ImVec4 _cast_tuple_ImVec4(quadruple):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

static ImVec4 __pyx_f_5imgui_4core__cast_tuple_ImVec4(PyObject *__pyx_v_quadruple) {
  ImVec4 __pyx_v_vec;
  ImVec4 __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  __Pyx_RefNannySetupContext("_cast_tuple_ImVec4", 0);

  /* "imgui/core.pyx":229
 *     cdef cimgui.ImVec4 vec
 * 
 *     if len(quadruple) != 4:             # <<<<<<<<<<<<<<
 *         raise ValueError("quadruple param must be length of 4")
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_quadruple); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (__pyx_t_2) {

    /* "imgui/core.pyx":230
 * 
 *     if len(quadruple) != 4:
 *         raise ValueError("quadruple param must be length of 4")             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y, vec.z, vec.w = quadruple
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 230, __pyx_L1_error)

    /* "imgui/core.pyx":229
 *     cdef cimgui.ImVec4 vec
 * 
 *     if len(quadruple) != 4:             # <<<<<<<<<<<<<<
 *         raise ValueError("quadruple param must be length of 4")
 * 
 */
  }

  /* "imgui/core.pyx":232
 *         raise ValueError("quadruple param must be length of 4")
 * 
 *     vec.x, vec.y, vec.z, vec.w = quadruple             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_quadruple))) || (PyList_CheckExact(__pyx_v_quadruple))) {
    PyObject* sequence = __pyx_v_quadruple;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 232, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 232, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
    __pyx_t_7 = PyObject_GetIter(__pyx_v_quadruple); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_8(__pyx_t_7); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 4) < 0) __PYX_ERR(0, 232, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 232, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_vec.x = __pyx_t_9;
  __pyx_v_vec.y = __pyx_t_10;
  __pyx_v_vec.z = __pyx_t_11;
  __pyx_v_vec.w = __pyx_t_12;

  /* "imgui/core.pyx":234
 *     vec.x, vec.y, vec.z, vec.w = quadruple
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "imgui/core.pyx":226
 * 
 * 
 * cdef cimgui.ImVec4 _cast_tuple_ImVec4(quadruple):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("imgui.core._cast_tuple_ImVec4", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":237
 * 
 * 
 * cdef cimgui.ImVec4 _cast_args_ImVec4(float x, float y, float z, float w):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

static ImVec4 __pyx_f_5imgui_4core__cast_args_ImVec4(float __pyx_v_x, float __pyx_v_y, float __pyx_v_z, float __pyx_v_w) {
  ImVec4 __pyx_v_vec;
  ImVec4 __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  __Pyx_RefNannySetupContext("_cast_args_ImVec4", 0);

  /* "imgui/core.pyx":240
 *     cdef cimgui.ImVec4 vec
 * 
 *     vec.x, vec.y, vec.z, vec.w = x, y, z, w             # <<<<<<<<<<<<<<
 * 
 *     return vec
 */
  __pyx_t_1 = __pyx_v_x;
  __pyx_t_2 = __pyx_v_y;
  __pyx_t_3 = __pyx_v_z;
  __pyx_t_4 = __pyx_v_w;
  __pyx_v_vec.x = __pyx_t_1;
  __pyx_v_vec.y = __pyx_t_2;
  __pyx_v_vec.z = __pyx_t_3;
  __pyx_v_vec.w = __pyx_t_4;

  /* "imgui/core.pyx":242
 *     vec.x, vec.y, vec.z, vec.w = x, y, z, w
 * 
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "imgui/core.pyx":237
 * 
 * 
 * cdef cimgui.ImVec4 _cast_args_ImVec4(float x, float y, float z, float w):  # noqa             # <<<<<<<<<<<<<<
 *     cdef cimgui.ImVec4 vec
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":245
 * 
 * 
 * cdef _cast_ImVec4_tuple(cimgui.ImVec4 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec4(vec.x, vec.y, vec.w, vec.z)
 * 
 */

static PyObject *__pyx_f_5imgui_4core__cast_ImVec4_tuple(ImVec4 __pyx_v_vec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("_cast_ImVec4_tuple", 0);

  /* "imgui/core.pyx":246
 * 
 * cdef _cast_ImVec4_tuple(cimgui.ImVec4 vec):  # noqa
 *     return Vec4(vec.x, vec.y, vec.w, vec.z)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Vec4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vec.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_vec.w); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_vec.z); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, __pyx_t_6);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":245
 * 
 * 
 * cdef _cast_ImVec4_tuple(cimgui.ImVec4 vec):  # noqa             # <<<<<<<<<<<<<<
 *     return Vec4(vec.x, vec.y, vec.w, vec.z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core._cast_ImVec4_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":255
 *     #       see: http://cython.readthedocs.io/en/latest/src/userguide/extension_types.html#fast-instantiation
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawCmd* ptr):             # <<<<<<<<<<<<<<
 *         instance = _DrawCmd()
 *         instance._ptr = ptr
 */

static PyObject *__pyx_f_5imgui_4core_8_DrawCmd_from_ptr(ImDrawCmd *__pyx_v_ptr) {
  struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "imgui/core.pyx":256
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawCmd* ptr):
 *         instance = _DrawCmd()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5imgui_4core__DrawCmd), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_instance = ((struct __pyx_obj_5imgui_4core__DrawCmd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":257
 *     cdef from_ptr(cimgui.ImDrawCmd* ptr):
 *         instance = _DrawCmd()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "imgui/core.pyx":258
 *         instance = _DrawCmd()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "imgui/core.pyx":255
 *     #       see: http://cython.readthedocs.io/en/latest/src/userguide/extension_types.html#fast-instantiation
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawCmd* ptr):             # <<<<<<<<<<<<<<
 *         instance = _DrawCmd()
 *         instance._ptr = ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawCmd.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":261
 * 
 *     @property
 *     def texture_id(self):             # <<<<<<<<<<<<<<
 *         return <object>self._ptr.TextureId
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_10texture_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_10texture_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8_DrawCmd_10texture_id___get__(((struct __pyx_obj_5imgui_4core__DrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_10texture_id___get__(struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":262
 *     @property
 *     def texture_id(self):
 *         return <object>self._ptr.TextureId             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_ptr->TextureId));
  __pyx_r = ((PyObject *)__pyx_v_self->_ptr->TextureId);
  goto __pyx_L0;

  /* "imgui/core.pyx":261
 * 
 *     @property
 *     def texture_id(self):             # <<<<<<<<<<<<<<
 *         return <object>self._ptr.TextureId
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":265
 * 
 *     @property
 *     def clip_rect(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec4_tuple(self._ptr.ClipRect)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_9clip_rect_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_9clip_rect_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8_DrawCmd_9clip_rect___get__(((struct __pyx_obj_5imgui_4core__DrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_9clip_rect___get__(struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":266
 *     @property
 *     def clip_rect(self):
 *         return _cast_ImVec4_tuple(self._ptr.ClipRect)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec4_tuple(__pyx_v_self->_ptr->ClipRect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":265
 * 
 *     @property
 *     def clip_rect(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec4_tuple(self._ptr.ClipRect)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawCmd.clip_rect.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":269
 * 
 *     @property
 *     def elem_count(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ElemCount
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_10elem_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_10elem_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8_DrawCmd_10elem_count___get__(((struct __pyx_obj_5imgui_4core__DrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_10elem_count___get__(struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":270
 *     @property
 *     def elem_count(self):
 *         return self._ptr.ElemCount             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_ptr->ElemCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":269
 * 
 *     @property
 *     def elem_count(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.ElemCount
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawCmd.elem_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_8_DrawCmd___reduce_cython__[] = "_DrawCmd.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8_DrawCmd___reduce_cython__(((struct __pyx_obj_5imgui_4core__DrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawCmd.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_8_DrawCmd_2__setstate_cython__[] = "_DrawCmd.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_8_DrawCmd_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8_DrawCmd_2__setstate_cython__(((struct __pyx_obj_5imgui_4core__DrawCmd *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8_DrawCmd_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawCmd.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":277
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawList* ptr):             # <<<<<<<<<<<<<<
 *         instance = _DrawList()
 *         instance._ptr = ptr
 */

static PyObject *__pyx_f_5imgui_4core_9_DrawList_from_ptr(ImDrawList *__pyx_v_ptr) {
  struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "imgui/core.pyx":278
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawList* ptr):
 *         instance = _DrawList()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5imgui_4core__DrawList), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_instance = ((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":279
 *     cdef from_ptr(cimgui.ImDrawList* ptr):
 *         instance = _DrawList()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "imgui/core.pyx":280
 *         instance = _DrawList()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "imgui/core.pyx":277
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawList* ptr):             # <<<<<<<<<<<<<<
 *         instance = _DrawList()
 *         instance._ptr = ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":283
 * 
 *     @property
 *     def cmd_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.CmdBuffer.Size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15cmd_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15cmd_buffer_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_15cmd_buffer_size___get__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15cmd_buffer_size___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":284
 *     @property
 *     def cmd_buffer_size(self):
 *         return self._ptr.CmdBuffer.Size             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->CmdBuffer.Size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":283
 * 
 *     @property
 *     def cmd_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.CmdBuffer.Size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.cmd_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":287
 * 
 *     @property
 *     def cmd_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.CmdBuffer.Data
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15cmd_buffer_data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15cmd_buffer_data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_15cmd_buffer_data___get__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15cmd_buffer_data___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":288
 *     @property
 *     def cmd_buffer_data(self):
 *         return <uintptr_t>self._ptr.CmdBuffer.Data             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)__pyx_v_self->_ptr->CmdBuffer.Data)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":287
 * 
 *     @property
 *     def cmd_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.CmdBuffer.Data
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.cmd_buffer_data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":291
 * 
 *     @property
 *     def vtx_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.VtxBuffer.Size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15vtx_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15vtx_buffer_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_15vtx_buffer_size___get__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15vtx_buffer_size___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":292
 *     @property
 *     def vtx_buffer_size(self):
 *         return self._ptr.VtxBuffer.Size             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->VtxBuffer.Size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":291
 * 
 *     @property
 *     def vtx_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.VtxBuffer.Size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.vtx_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":295
 * 
 *     @property
 *     def vtx_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.VtxBuffer.Data
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15vtx_buffer_data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15vtx_buffer_data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_15vtx_buffer_data___get__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15vtx_buffer_data___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":296
 *     @property
 *     def vtx_buffer_data(self):
 *         return <uintptr_t>self._ptr.VtxBuffer.Data             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)__pyx_v_self->_ptr->VtxBuffer.Data)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":295
 * 
 *     @property
 *     def vtx_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.VtxBuffer.Data
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.vtx_buffer_data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":299
 * 
 *     @property
 *     def idx_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IdxBuffer.Size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15idx_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15idx_buffer_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_15idx_buffer_size___get__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15idx_buffer_size___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":300
 *     @property
 *     def idx_buffer_size(self):
 *         return self._ptr.IdxBuffer.Size             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->IdxBuffer.Size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":299
 * 
 *     @property
 *     def idx_buffer_size(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IdxBuffer.Size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.idx_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":303
 * 
 *     @property
 *     def idx_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.IdxBuffer.Data
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15idx_buffer_data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_15idx_buffer_data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_15idx_buffer_data___get__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_15idx_buffer_data___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":304
 *     @property
 *     def idx_buffer_data(self):
 *         return <uintptr_t>self._ptr.IdxBuffer.Data             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)__pyx_v_self->_ptr->IdxBuffer.Data)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":303
 * 
 *     @property
 *     def idx_buffer_data(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self._ptr.IdxBuffer.Data
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.idx_buffer_data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":307
 * 
 *     @property
 *     def commands(self):             # <<<<<<<<<<<<<<
 *         return [
 *             # todo: consider operator overloading in pxd file
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_8commands_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_8commands_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_8commands___get__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_8commands___get__(struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":308
 *     @property
 *     def commands(self):
 *         return [             # <<<<<<<<<<<<<<
 *             # todo: consider operator overloading in pxd file
 *             _DrawCmd.from_ptr(&self._ptr.CmdBuffer.Data[idx])
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":313
 *             # perf: short-wiring instead of using property
 *             # note: add py3k compat
 *             for idx in xrange(self._ptr.CmdBuffer.Size)             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  __pyx_t_2 = __pyx_v_self->_ptr->CmdBuffer.Size;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_idx = __pyx_t_3;

    /* "imgui/core.pyx":310
 *         return [
 *             # todo: consider operator overloading in pxd file
 *             _DrawCmd.from_ptr(&self._ptr.CmdBuffer.Data[idx])             # <<<<<<<<<<<<<<
 *             # perf: short-wiring instead of using property
 *             # note: add py3k compat
 */
    __pyx_t_4 = __pyx_f_5imgui_4core_8_DrawCmd_from_ptr((&(__pyx_v_self->_ptr->CmdBuffer.Data[__pyx_v_idx]))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":307
 * 
 *     @property
 *     def commands(self):             # <<<<<<<<<<<<<<
 *         return [
 *             # todo: consider operator overloading in pxd file
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("imgui.core._DrawList.commands.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawList___reduce_cython__[] = "_DrawList.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList___reduce_cython__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawList_2__setstate_cython__[] = "_DrawList.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawList_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawList_2__setstate_cython__(((struct __pyx_obj_5imgui_4core__DrawList *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawList_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawList *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawList.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":325
 * 
 *     @property
 *     def alpha(self):             # <<<<<<<<<<<<<<
 *         """Global alpha blending parameter for windows
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_5alpha_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_5alpha_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_5alpha___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_5alpha___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":331
 *             float
 *         """
 *         return self.ref.Alpha             # <<<<<<<<<<<<<<
 * 
 *     @alpha.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ref.Alpha); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":325
 * 
 *     @property
 *     def alpha(self):             # <<<<<<<<<<<<<<
 *         """Global alpha blending parameter for windows
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.alpha.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":334
 * 
 *     @alpha.setter
 *     def alpha(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.Alpha = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_5alpha_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_5alpha_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 334, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.alpha.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_5alpha_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_5alpha_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":335
 *     @alpha.setter
 *     def alpha(self, float value):
 *         self.ref.Alpha = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->ref.Alpha = __pyx_v_value;

  /* "imgui/core.pyx":334
 * 
 *     @alpha.setter
 *     def alpha(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.Alpha = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":338
 * 
 *     @property
 *     def window_padding(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.WindowPadding)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14window_padding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14window_padding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14window_padding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14window_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":339
 *     @property
 *     def window_padding(self):
 *         return _cast_ImVec2_tuple(self.ref.WindowPadding)             # <<<<<<<<<<<<<<
 * 
 *     @window_padding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->ref.WindowPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":338
 * 
 *     @property
 *     def window_padding(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.WindowPadding)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_padding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":342
 * 
 *     @window_padding.setter
 *     def window_padding(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.WindowPadding = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_14window_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_14window_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14window_padding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_14window_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":343
 *     @window_padding.setter
 *     def window_padding(self, value):
 *         self.ref.WindowPadding = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L1_error)
  __pyx_v_self->ref.WindowPadding = __pyx_t_1;

  /* "imgui/core.pyx":342
 * 
 *     @window_padding.setter
 *     def window_padding(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.WindowPadding = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_padding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":346
 * 
 *     @property
 *     def window_min_size(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.WindowMinSize)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_15window_min_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_15window_min_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_15window_min_size___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_15window_min_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":347
 *     @property
 *     def window_min_size(self):
 *         return _cast_ImVec2_tuple(self.ref.WindowMinSize)             # <<<<<<<<<<<<<<
 * 
 *     @window_min_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->ref.WindowMinSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":346
 * 
 *     @property
 *     def window_min_size(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.WindowMinSize)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_min_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":350
 * 
 *     @window_min_size.setter
 *     def window_min_size(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.WindowMinSize = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_15window_min_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_15window_min_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_15window_min_size_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_15window_min_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":351
 *     @window_min_size.setter
 *     def window_min_size(self, value):
 *         self.ref.WindowMinSize = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 351, __pyx_L1_error)
  __pyx_v_self->ref.WindowMinSize = __pyx_t_1;

  /* "imgui/core.pyx":350
 * 
 *     @window_min_size.setter
 *     def window_min_size(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.WindowMinSize = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_min_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":354
 * 
 *     @property
 *     def window_rounding(self):             # <<<<<<<<<<<<<<
 *         return self.ref.WindowRounding
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_15window_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_15window_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_15window_rounding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_15window_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":355
 *     @property
 *     def window_rounding(self):
 *         return self.ref.WindowRounding             # <<<<<<<<<<<<<<
 * 
 *     @window_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ref.WindowRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":354
 * 
 *     @property
 *     def window_rounding(self):             # <<<<<<<<<<<<<<
 *         return self.ref.WindowRounding
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":358
 * 
 *     @window_rounding.setter
 *     def window_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.WindowRounding = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_15window_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_15window_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 358, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.window_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_15window_rounding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_15window_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":359
 *     @window_rounding.setter
 *     def window_rounding(self, float value):
 *         self.ref.WindowRounding = value             # <<<<<<<<<<<<<<
 * 
 *     IF TARGET_IMGUI_VERSION > (1, 49):
 */
  __pyx_v_self->ref.WindowRounding = __pyx_v_value;

  /* "imgui/core.pyx":358
 * 
 *     @window_rounding.setter
 *     def window_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.WindowRounding = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":373
 * 
 *     @property
 *     def child_window_rounding(self):             # <<<<<<<<<<<<<<
 *         return self.ref.ChildWindowRounding
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_21child_window_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_21child_window_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_21child_window_rounding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_21child_window_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":374
 *     @property
 *     def child_window_rounding(self):
 *         return self.ref.ChildWindowRounding             # <<<<<<<<<<<<<<
 * 
 *     @child_window_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ref.ChildWindowRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":373
 * 
 *     @property
 *     def child_window_rounding(self):             # <<<<<<<<<<<<<<
 *         return self.ref.ChildWindowRounding
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.child_window_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":377
 * 
 *     @child_window_rounding.setter
 *     def child_window_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.ChildWindowRounding = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_21child_window_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_21child_window_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 377, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.child_window_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_21child_window_rounding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_21child_window_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":378
 *     @child_window_rounding.setter
 *     def child_window_rounding(self, float value):
 *         self.ref.ChildWindowRounding = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->ref.ChildWindowRounding = __pyx_v_value;

  /* "imgui/core.pyx":377
 * 
 *     @child_window_rounding.setter
 *     def child_window_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.ChildWindowRounding = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":381
 * 
 *     @property
 *     def frame_padding(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.FramePadding)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_13frame_padding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_13frame_padding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_13frame_padding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_13frame_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":382
 *     @property
 *     def frame_padding(self):
 *         return _cast_ImVec2_tuple(self.ref.FramePadding)             # <<<<<<<<<<<<<<
 * 
 *     @frame_padding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->ref.FramePadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":381
 * 
 *     @property
 *     def frame_padding(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.FramePadding)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.frame_padding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":385
 * 
 *     @frame_padding.setter
 *     def frame_padding(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.FramePadding = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_13frame_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_13frame_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_13frame_padding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_13frame_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":386
 *     @frame_padding.setter
 *     def frame_padding(self, value):
 *         self.ref.FramePadding = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 386, __pyx_L1_error)
  __pyx_v_self->ref.FramePadding = __pyx_t_1;

  /* "imgui/core.pyx":385
 * 
 *     @frame_padding.setter
 *     def frame_padding(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.FramePadding = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.frame_padding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":389
 * 
 *     @property
 *     def frame_rounding(self):             # <<<<<<<<<<<<<<
 *         return self.ref.FrameRounding
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14frame_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14frame_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14frame_rounding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14frame_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":390
 *     @property
 *     def frame_rounding(self):
 *         return self.ref.FrameRounding             # <<<<<<<<<<<<<<
 * 
 *     @frame_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ref.FrameRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":389
 * 
 *     @property
 *     def frame_rounding(self):             # <<<<<<<<<<<<<<
 *         return self.ref.FrameRounding
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.frame_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":393
 * 
 *     @frame_rounding.setter
 *     def frame_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.FrameRounding = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_14frame_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_14frame_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.frame_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14frame_rounding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_14frame_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":394
 *     @frame_rounding.setter
 *     def frame_rounding(self, float value):
 *         self.ref.FrameRounding = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->ref.FrameRounding = __pyx_v_value;

  /* "imgui/core.pyx":393
 * 
 *     @frame_rounding.setter
 *     def frame_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.FrameRounding = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":397
 * 
 *     @property
 *     def item_spacing(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.ItemSpacing)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_12item_spacing_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_12item_spacing_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_12item_spacing___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_12item_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":398
 *     @property
 *     def item_spacing(self):
 *         return _cast_ImVec2_tuple(self.ref.ItemSpacing)             # <<<<<<<<<<<<<<
 * 
 *     @item_spacing.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->ref.ItemSpacing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":397
 * 
 *     @property
 *     def item_spacing(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.ItemSpacing)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.item_spacing.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":401
 * 
 *     @item_spacing.setter
 *     def item_spacing(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.ItemSpacing = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_12item_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_12item_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_12item_spacing_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_12item_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":402
 *     @item_spacing.setter
 *     def item_spacing(self, value):
 *         self.ref.ItemSpacing = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
  __pyx_v_self->ref.ItemSpacing = __pyx_t_1;

  /* "imgui/core.pyx":401
 * 
 *     @item_spacing.setter
 *     def item_spacing(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.ItemSpacing = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.item_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":405
 * 
 *     @property
 *     def item_inner_spacing(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.ItemInnerSpacing)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18item_inner_spacing_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18item_inner_spacing_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18item_inner_spacing___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18item_inner_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":406
 *     @property
 *     def item_inner_spacing(self):
 *         return _cast_ImVec2_tuple(self.ref.ItemInnerSpacing)             # <<<<<<<<<<<<<<
 * 
 *     @item_inner_spacing.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->ref.ItemInnerSpacing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":405
 * 
 *     @property
 *     def item_inner_spacing(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.ItemInnerSpacing)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.item_inner_spacing.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":409
 * 
 *     @item_inner_spacing.setter
 *     def item_inner_spacing(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.ItemInnerSpacing = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_18item_inner_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_18item_inner_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18item_inner_spacing_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_18item_inner_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":410
 *     @item_inner_spacing.setter
 *     def item_inner_spacing(self, value):
 *         self.ref.ItemInnerSpacing = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L1_error)
  __pyx_v_self->ref.ItemInnerSpacing = __pyx_t_1;

  /* "imgui/core.pyx":409
 * 
 *     @item_inner_spacing.setter
 *     def item_inner_spacing(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.ItemInnerSpacing = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.item_inner_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":413
 * 
 *     @property
 *     def touch_extra_padding(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.TouchExtraPadding)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_19touch_extra_padding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_19touch_extra_padding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_19touch_extra_padding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_19touch_extra_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":414
 *     @property
 *     def touch_extra_padding(self):
 *         return _cast_ImVec2_tuple(self.ref.TouchExtraPadding)             # <<<<<<<<<<<<<<
 * 
 *     @touch_extra_padding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->ref.TouchExtraPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":413
 * 
 *     @property
 *     def touch_extra_padding(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.TouchExtraPadding)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.touch_extra_padding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":417
 * 
 *     @touch_extra_padding.setter
 *     def touch_extra_padding(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.TouchExtraPadding = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_19touch_extra_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_19touch_extra_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_19touch_extra_padding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_19touch_extra_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":418
 *     @touch_extra_padding.setter
 *     def touch_extra_padding(self, value):
 *         self.ref.TouchExtraPadding = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 418, __pyx_L1_error)
  __pyx_v_self->ref.TouchExtraPadding = __pyx_t_1;

  /* "imgui/core.pyx":417
 * 
 *     @touch_extra_padding.setter
 *     def touch_extra_padding(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.TouchExtraPadding = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.touch_extra_padding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":421
 * 
 *     @property
 *     def indent_spacing(self):             # <<<<<<<<<<<<<<
 *         return self.ref.IndentSpacing
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14indent_spacing_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14indent_spacing_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14indent_spacing___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14indent_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":422
 *     @property
 *     def indent_spacing(self):
 *         return self.ref.IndentSpacing             # <<<<<<<<<<<<<<
 * 
 *     @indent_spacing.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ref.IndentSpacing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":421
 * 
 *     @property
 *     def indent_spacing(self):             # <<<<<<<<<<<<<<
 *         return self.ref.IndentSpacing
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.indent_spacing.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":425
 * 
 *     @indent_spacing.setter
 *     def indent_spacing(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.IndentSpacing = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_14indent_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_14indent_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.indent_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14indent_spacing_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_14indent_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":426
 *     @indent_spacing.setter
 *     def indent_spacing(self, float value):
 *         self.ref.IndentSpacing = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->ref.IndentSpacing = __pyx_v_value;

  /* "imgui/core.pyx":425
 * 
 *     @indent_spacing.setter
 *     def indent_spacing(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.IndentSpacing = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":429
 * 
 *     @property
 *     def columns_min_spacing(self):             # <<<<<<<<<<<<<<
 *         return self.ref.ColumnsMinSpacing
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_19columns_min_spacing_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_19columns_min_spacing_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_19columns_min_spacing___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_19columns_min_spacing___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":430
 *     @property
 *     def columns_min_spacing(self):
 *         return self.ref.ColumnsMinSpacing             # <<<<<<<<<<<<<<
 * 
 *     @columns_min_spacing.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ref.ColumnsMinSpacing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":429
 * 
 *     @property
 *     def columns_min_spacing(self):             # <<<<<<<<<<<<<<
 *         return self.ref.ColumnsMinSpacing
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.columns_min_spacing.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":433
 * 
 *     @columns_min_spacing.setter
 *     def columns_min_spacing(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.ColumnsMinSpacing = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_19columns_min_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_19columns_min_spacing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 433, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.columns_min_spacing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_19columns_min_spacing_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_19columns_min_spacing_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":434
 *     @columns_min_spacing.setter
 *     def columns_min_spacing(self, float value):
 *         self.ref.ColumnsMinSpacing = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->ref.ColumnsMinSpacing = __pyx_v_value;

  /* "imgui/core.pyx":433
 * 
 *     @columns_min_spacing.setter
 *     def columns_min_spacing(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.ColumnsMinSpacing = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":437
 * 
 *     @property
 *     def scrollbar_size(self):             # <<<<<<<<<<<<<<
 *         return self.ref.ScrollbarSize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14scrollbar_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_14scrollbar_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14scrollbar_size___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_14scrollbar_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":438
 *     @property
 *     def scrollbar_size(self):
 *         return self.ref.ScrollbarSize             # <<<<<<<<<<<<<<
 * 
 *     @scrollbar_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ref.ScrollbarSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":437
 * 
 *     @property
 *     def scrollbar_size(self):             # <<<<<<<<<<<<<<
 *         return self.ref.ScrollbarSize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.scrollbar_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":441
 * 
 *     @scrollbar_size.setter
 *     def scrollbar_size(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.ScrollbarSize = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_14scrollbar_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_14scrollbar_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 441, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.scrollbar_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_14scrollbar_size_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_14scrollbar_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":442
 *     @scrollbar_size.setter
 *     def scrollbar_size(self, float value):
 *         self.ref.ScrollbarSize = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->ref.ScrollbarSize = __pyx_v_value;

  /* "imgui/core.pyx":441
 * 
 *     @scrollbar_size.setter
 *     def scrollbar_size(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.ScrollbarSize = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":445
 * 
 *     @property
 *     def scrollbar_rounding(self):             # <<<<<<<<<<<<<<
 *         return self.ref.ScrollbarRounding
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18scrollbar_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18scrollbar_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18scrollbar_rounding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18scrollbar_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":446
 *     @property
 *     def scrollbar_rounding(self):
 *         return self.ref.ScrollbarRounding             # <<<<<<<<<<<<<<
 * 
 *     @scrollbar_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ref.ScrollbarRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":445
 * 
 *     @property
 *     def scrollbar_rounding(self):             # <<<<<<<<<<<<<<
 *         return self.ref.ScrollbarRounding
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.scrollbar_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":449
 * 
 *     @scrollbar_rounding.setter
 *     def scrollbar_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.ScrollbarRounding = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_18scrollbar_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_18scrollbar_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.scrollbar_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18scrollbar_rounding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_18scrollbar_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":450
 *     @scrollbar_rounding.setter
 *     def scrollbar_rounding(self, float value):
 *         self.ref.ScrollbarRounding = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->ref.ScrollbarRounding = __pyx_v_value;

  /* "imgui/core.pyx":449
 * 
 *     @scrollbar_rounding.setter
 *     def scrollbar_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.ScrollbarRounding = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":453
 * 
 *     @property
 *     def grab_min_size(self):             # <<<<<<<<<<<<<<
 *         return self.ref.GrabMinSize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_13grab_min_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_13grab_min_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_13grab_min_size___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_13grab_min_size___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":454
 *     @property
 *     def grab_min_size(self):
 *         return self.ref.GrabMinSize             # <<<<<<<<<<<<<<
 * 
 *     @grab_min_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ref.GrabMinSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":453
 * 
 *     @property
 *     def grab_min_size(self):             # <<<<<<<<<<<<<<
 *         return self.ref.GrabMinSize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.grab_min_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":457
 * 
 *     @grab_min_size.setter
 *     def grab_min_size(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.GrabMinSize = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_13grab_min_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_13grab_min_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 457, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.grab_min_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_13grab_min_size_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_13grab_min_size_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":458
 *     @grab_min_size.setter
 *     def grab_min_size(self, float value):
 *         self.ref.GrabMinSize = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->ref.GrabMinSize = __pyx_v_value;

  /* "imgui/core.pyx":457
 * 
 *     @grab_min_size.setter
 *     def grab_min_size(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.GrabMinSize = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":461
 * 
 *     @property
 *     def grab_rounding(self):             # <<<<<<<<<<<<<<
 *         return self.ref.GrabRounding
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_13grab_rounding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_13grab_rounding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_13grab_rounding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_13grab_rounding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":462
 *     @property
 *     def grab_rounding(self):
 *         return self.ref.GrabRounding             # <<<<<<<<<<<<<<
 * 
 *     @grab_rounding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ref.GrabRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":461
 * 
 *     @property
 *     def grab_rounding(self):             # <<<<<<<<<<<<<<
 *         return self.ref.GrabRounding
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.grab_rounding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":465
 * 
 *     @grab_rounding.setter
 *     def grab_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.GrabRounding = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_13grab_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_13grab_rounding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 465, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.grab_rounding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_13grab_rounding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_13grab_rounding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":466
 *     @grab_rounding.setter
 *     def grab_rounding(self, float value):
 *         self.ref.GrabRounding = value             # <<<<<<<<<<<<<<
 * 
 *     IF TARGET_IMGUI_VERSION > (1, 49):
 */
  __pyx_v_self->ref.GrabRounding = __pyx_v_value;

  /* "imgui/core.pyx":465
 * 
 *     @grab_rounding.setter
 *     def grab_rounding(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.GrabRounding = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":480
 * 
 *     @property
 *     def display_window_padding(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.DisplayWindowPadding)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_22display_window_padding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_22display_window_padding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_22display_window_padding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_22display_window_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":481
 *     @property
 *     def display_window_padding(self):
 *         return _cast_ImVec2_tuple(self.ref.DisplayWindowPadding)             # <<<<<<<<<<<<<<
 * 
 *     @display_window_padding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->ref.DisplayWindowPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":480
 * 
 *     @property
 *     def display_window_padding(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.DisplayWindowPadding)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.display_window_padding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":484
 * 
 *     @display_window_padding.setter
 *     def display_window_padding(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.DisplayWindowPadding = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_22display_window_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_22display_window_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_22display_window_padding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_22display_window_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":485
 *     @display_window_padding.setter
 *     def display_window_padding(self, value):
 *         self.ref.DisplayWindowPadding = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 485, __pyx_L1_error)
  __pyx_v_self->ref.DisplayWindowPadding = __pyx_t_1;

  /* "imgui/core.pyx":484
 * 
 *     @display_window_padding.setter
 *     def display_window_padding(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.DisplayWindowPadding = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.display_window_padding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":488
 * 
 *     @property
 *     def display_safe_area_padding(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.DisplaySafeAreaPadding)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_25display_safe_area_padding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_25display_safe_area_padding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_25display_safe_area_padding___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_25display_safe_area_padding___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":489
 *     @property
 *     def display_safe_area_padding(self):
 *         return _cast_ImVec2_tuple(self.ref.DisplaySafeAreaPadding)             # <<<<<<<<<<<<<<
 * 
 *     @display_safe_area_padding.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->ref.DisplaySafeAreaPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":488
 * 
 *     @property
 *     def display_safe_area_padding(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self.ref.DisplaySafeAreaPadding)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.display_safe_area_padding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":492
 * 
 *     @display_safe_area_padding.setter
 *     def display_safe_area_padding(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.DisplaySafeAreaPadding = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_25display_safe_area_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_25display_safe_area_padding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_25display_safe_area_padding_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_25display_safe_area_padding_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":493
 *     @display_safe_area_padding.setter
 *     def display_safe_area_padding(self, value):
 *         self.ref.DisplaySafeAreaPadding = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 493, __pyx_L1_error)
  __pyx_v_self->ref.DisplaySafeAreaPadding = __pyx_t_1;

  /* "imgui/core.pyx":492
 * 
 *     @display_safe_area_padding.setter
 *     def display_safe_area_padding(self, value):             # <<<<<<<<<<<<<<
 *         self.ref.DisplaySafeAreaPadding = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.display_safe_area_padding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":496
 * 
 *     @property
 *     def anti_aliased_lines(self):             # <<<<<<<<<<<<<<
 *         return self.ref.AntiAliasedLines
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18anti_aliased_lines_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_18anti_aliased_lines_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18anti_aliased_lines___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_18anti_aliased_lines___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":497
 *     @property
 *     def anti_aliased_lines(self):
 *         return self.ref.AntiAliasedLines             # <<<<<<<<<<<<<<
 * 
 *     @anti_aliased_lines.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->ref.AntiAliasedLines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":496
 * 
 *     @property
 *     def anti_aliased_lines(self):             # <<<<<<<<<<<<<<
 *         return self.ref.AntiAliasedLines
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.anti_aliased_lines.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":500
 * 
 *     @anti_aliased_lines.setter
 *     def anti_aliased_lines(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self.ref.AntiAliasedLines = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_18anti_aliased_lines_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_18anti_aliased_lines_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 500, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.anti_aliased_lines.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_18anti_aliased_lines_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_18anti_aliased_lines_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":501
 *     @anti_aliased_lines.setter
 *     def anti_aliased_lines(self, cimgui.bool value):
 *         self.ref.AntiAliasedLines = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->ref.AntiAliasedLines = __pyx_v_value;

  /* "imgui/core.pyx":500
 * 
 *     @anti_aliased_lines.setter
 *     def anti_aliased_lines(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self.ref.AntiAliasedLines = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":504
 * 
 *     @property
 *     def anti_aliased_shapes(self):             # <<<<<<<<<<<<<<
 *         return self.ref.AntiAliasedShapes
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_19anti_aliased_shapes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_19anti_aliased_shapes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_19anti_aliased_shapes___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_19anti_aliased_shapes___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":505
 *     @property
 *     def anti_aliased_shapes(self):
 *         return self.ref.AntiAliasedShapes             # <<<<<<<<<<<<<<
 * 
 *     @anti_aliased_shapes.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->ref.AntiAliasedShapes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":504
 * 
 *     @property
 *     def anti_aliased_shapes(self):             # <<<<<<<<<<<<<<
 *         return self.ref.AntiAliasedShapes
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.anti_aliased_shapes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":508
 * 
 *     @anti_aliased_shapes.setter
 *     def anti_aliased_shapes(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self.ref.AntiAliasedShapes = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_19anti_aliased_shapes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_19anti_aliased_shapes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.anti_aliased_shapes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_19anti_aliased_shapes_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_19anti_aliased_shapes_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":509
 *     @anti_aliased_shapes.setter
 *     def anti_aliased_shapes(self, cimgui.bool value):
 *         self.ref.AntiAliasedShapes = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->ref.AntiAliasedShapes = __pyx_v_value;

  /* "imgui/core.pyx":508
 * 
 *     @anti_aliased_shapes.setter
 *     def anti_aliased_shapes(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self.ref.AntiAliasedShapes = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":512
 * 
 *     @property
 *     def curve_tessellation_tolerance(self):             # <<<<<<<<<<<<<<
 *         return self.ref.CurveTessellationTol
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance___get__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance___get__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":513
 *     @property
 *     def curve_tessellation_tolerance(self):
 *         return self.ref.CurveTessellationTol             # <<<<<<<<<<<<<<
 * 
 *     @curve_tessellation_tolerance.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ref.CurveTessellationTol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":512
 * 
 *     @property
 *     def curve_tessellation_tolerance(self):             # <<<<<<<<<<<<<<
 *         return self.ref.CurveTessellationTol
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.curve_tessellation_tolerance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":516
 * 
 *     @curve_tessellation_tolerance.setter
 *     def curve_tessellation_tolerance(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.CurveTessellationTol = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 516, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.GuiStyle.curve_tessellation_tolerance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_2__set__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_2__set__(struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":517
 *     @curve_tessellation_tolerance.setter
 *     def curve_tessellation_tolerance(self, float value):
 *         self.ref.CurveTessellationTol = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->ref.CurveTessellationTol = __pyx_v_value;

  /* "imgui/core.pyx":516
 * 
 *     @curve_tessellation_tolerance.setter
 *     def curve_tessellation_tolerance(self, float value):             # <<<<<<<<<<<<<<
 *         self.ref.CurveTessellationTol = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ref cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_8GuiStyle___reduce_cython__[] = "GuiStyle.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle___reduce_cython__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ref cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ref cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ref cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ref cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ref cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_8GuiStyle_2__setstate_cython__[] = "GuiStyle.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_8GuiStyle_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8GuiStyle_2__setstate_cython__(((struct __pyx_obj_5imgui_4core_GuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8GuiStyle_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ref cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ref cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ref cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ref cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.GuiStyle.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":523
 *     cdef cimgui.ImDrawData* _ptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_9_DrawData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5imgui_4core_9_DrawData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData___init__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_9_DrawData___init__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":526
 *         pass
 * 
 *     def _require_pointer(self):             # <<<<<<<<<<<<<<
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_3_require_pointer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawData_2_require_pointer[] = "_DrawData._require_pointer(self)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_3_require_pointer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_require_pointer (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_2_require_pointer(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_2_require_pointer(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_require_pointer", 0);

  /* "imgui/core.pyx":527
 * 
 *     def _require_pointer(self):
 *         if self._ptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__
 */
  __pyx_t_1 = ((__pyx_v_self->_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "imgui/core.pyx":529
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_s_improperly_initialized, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "imgui/core.pyx":528
 *     def _require_pointer(self):
 *         if self._ptr == NULL:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 "%s improperly initialized" % self.__class__.__name__
 *             )
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 528, __pyx_L1_error)

    /* "imgui/core.pyx":527
 * 
 *     def _require_pointer(self):
 *         if self._ptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__
 */
  }

  /* "imgui/core.pyx":526
 *         pass
 * 
 *     def _require_pointer(self):             # <<<<<<<<<<<<<<
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._DrawData._require_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":533
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawData* ptr):             # <<<<<<<<<<<<<<
 *         instance = _DrawData()
 *         instance._ptr = ptr
 */

static PyObject *__pyx_f_5imgui_4core_9_DrawData_from_ptr(ImDrawData *__pyx_v_ptr) {
  struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "imgui/core.pyx":534
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawData* ptr):
 *         instance = _DrawData()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5imgui_4core__DrawData), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_instance = ((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":535
 *     cdef from_ptr(cimgui.ImDrawData* ptr):
 *         instance = _DrawData()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "imgui/core.pyx":536
 *         instance = _DrawData()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     def deindex_all_buffers(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "imgui/core.pyx":533
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImDrawData* ptr):             # <<<<<<<<<<<<<<
 *         instance = _DrawData()
 *         instance._ptr = ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawData.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":538
 *         return instance
 * 
 *     def deindex_all_buffers(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         self._ptr.DeIndexAllBuffers()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_5deindex_all_buffers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawData_4deindex_all_buffers[] = "_DrawData.deindex_all_buffers(self)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_5deindex_all_buffers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deindex_all_buffers (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_4deindex_all_buffers(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_4deindex_all_buffers(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("deindex_all_buffers", 0);

  /* "imgui/core.pyx":539
 * 
 *     def deindex_all_buffers(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         self._ptr.DeIndexAllBuffers()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":540
 *     def deindex_all_buffers(self):
 *         self._require_pointer()
 *         self._ptr.DeIndexAllBuffers()             # <<<<<<<<<<<<<<
 * 
 *     def scale_clip_rects(self, width, height):
 */
  try {
    __pyx_v_self->_ptr->DeIndexAllBuffers();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 540, __pyx_L1_error)
  }

  /* "imgui/core.pyx":538
 *         return instance
 * 
 *     def deindex_all_buffers(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         self._ptr.DeIndexAllBuffers()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._DrawData.deindex_all_buffers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":542
 *         self._ptr.DeIndexAllBuffers()
 * 
 *     def scale_clip_rects(self, width, height):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         self._ptr.ScaleClipRects(_cast_args_ImVec2(width, height))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_7scale_clip_rects(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawData_6scale_clip_rects[] = "_DrawData.scale_clip_rects(self, width, height)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_7scale_clip_rects(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scale_clip_rects (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scale_clip_rects", 1, 2, 2, 1); __PYX_ERR(0, 542, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scale_clip_rects") < 0)) __PYX_ERR(0, 542, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_width = values[0];
    __pyx_v_height = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scale_clip_rects", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 542, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._DrawData.scale_clip_rects", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_6scale_clip_rects(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self), __pyx_v_width, __pyx_v_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_6scale_clip_rects(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  float __pyx_t_4;
  float __pyx_t_5;
  ImVec2 __pyx_t_6;
  __Pyx_RefNannySetupContext("scale_clip_rects", 0);

  /* "imgui/core.pyx":543
 * 
 *     def scale_clip_rects(self, width, height):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         self._ptr.ScaleClipRects(_cast_args_ImVec2(width, height))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 543, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":544
 *     def scale_clip_rects(self, width, height):
 *         self._require_pointer()
 *         self._ptr.ScaleClipRects(_cast_args_ImVec2(width, height))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L1_error)
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L1_error)
  __pyx_t_6 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_t_4, __pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L1_error)
  try {
    __pyx_v_self->_ptr->ScaleClipRects(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 544, __pyx_L1_error)
  }

  /* "imgui/core.pyx":542
 *         self._ptr.DeIndexAllBuffers()
 * 
 *     def scale_clip_rects(self, width, height):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         self._ptr.ScaleClipRects(_cast_args_ImVec2(width, height))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._DrawData.scale_clip_rects", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":547
 * 
 *     @property
 *     def valid(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.Valid
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_5valid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_5valid_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_5valid___get__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_5valid___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":548
 *     @property
 *     def valid(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         return self._ptr.Valid
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":549
 *     def valid(self):
 *         self._require_pointer()
 *         return self._ptr.Valid             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->Valid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":547
 * 
 *     @property
 *     def valid(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.Valid
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._DrawData.valid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":552
 * 
 *     @property
 *     def cmd_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.CmdListsCount
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_9cmd_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_9cmd_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_9cmd_count___get__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_9cmd_count___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":553
 *     @property
 *     def cmd_count(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         return self._ptr.CmdListsCount
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":554
 *     def cmd_count(self):
 *         self._require_pointer()
 *         return self._ptr.CmdListsCount             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->CmdListsCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":552
 * 
 *     @property
 *     def cmd_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.CmdListsCount
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._DrawData.cmd_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":557
 * 
 *     @property
 *     def total_vtx_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.TotalVtxCount
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_15total_vtx_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_15total_vtx_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_15total_vtx_count___get__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_15total_vtx_count___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":558
 *     @property
 *     def total_vtx_count(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         return self._ptr.TotalVtxCount
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":559
 *     def total_vtx_count(self):
 *         self._require_pointer()
 *         return self._ptr.TotalVtxCount             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->TotalVtxCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":557
 * 
 *     @property
 *     def total_vtx_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.TotalVtxCount
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._DrawData.total_vtx_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":562
 * 
 *     @property
 *     def total_idx_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.TotalIdxCount
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_15total_idx_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_15total_idx_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_15total_idx_count___get__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_15total_idx_count___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":563
 *     @property
 *     def total_idx_count(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         return self._ptr.TotalIdxCount
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":564
 *     def total_idx_count(self):
 *         self._require_pointer()
 *         return self._ptr.TotalIdxCount             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->TotalIdxCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":562
 * 
 *     @property
 *     def total_idx_count(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 *         return self._ptr.TotalIdxCount
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._DrawData.total_idx_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":567
 * 
 *     @property
 *     def commands_lists(self):             # <<<<<<<<<<<<<<
 *         return [
 *             _DrawList.from_ptr(self._ptr.CmdLists[idx])
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_14commands_lists_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_14commands_lists_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_14commands_lists___get__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_14commands_lists___get__(struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":568
 *     @property
 *     def commands_lists(self):
 *         return [             # <<<<<<<<<<<<<<
 *             _DrawList.from_ptr(self._ptr.CmdLists[idx])
 *             # perf: short-wiring instead of using property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":571
 *             _DrawList.from_ptr(self._ptr.CmdLists[idx])
 *             # perf: short-wiring instead of using property
 *             for idx in xrange(self._ptr.CmdListsCount)             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  __pyx_t_2 = __pyx_v_self->_ptr->CmdListsCount;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_idx = __pyx_t_3;

    /* "imgui/core.pyx":569
 *     def commands_lists(self):
 *         return [
 *             _DrawList.from_ptr(self._ptr.CmdLists[idx])             # <<<<<<<<<<<<<<
 *             # perf: short-wiring instead of using property
 *             for idx in xrange(self._ptr.CmdListsCount)
 */
    __pyx_t_4 = __pyx_f_5imgui_4core_9_DrawList_from_ptr((__pyx_v_self->_ptr->CmdLists[__pyx_v_idx])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":567
 * 
 *     @property
 *     def commands_lists(self):             # <<<<<<<<<<<<<<
 *         return [
 *             _DrawList.from_ptr(self._ptr.CmdLists[idx])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("imgui.core._DrawData.commands_lists.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawData_8__reduce_cython__[] = "_DrawData.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_8__reduce_cython__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawData.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_9_DrawData_10__setstate_cython__[] = "_DrawData.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_9_DrawData_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_9_DrawData_10__setstate_cython__(((struct __pyx_obj_5imgui_4core__DrawData *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_9_DrawData_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__DrawData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._DrawData.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":579
 * 
 *     @staticmethod
 *     cdef from_ptr(const cimgui.ImWchar* ptr):             # <<<<<<<<<<<<<<
 *         instance = _StaticGlyphRanges()
 *         instance.ranges_ptr = ptr
 */

static PyObject *__pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(ImWchar const *__pyx_v_ptr) {
  struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "imgui/core.pyx":580
 *     @staticmethod
 *     cdef from_ptr(const cimgui.ImWchar* ptr):
 *         instance = _StaticGlyphRanges()             # <<<<<<<<<<<<<<
 *         instance.ranges_ptr = ptr
 *         return instance
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5imgui_4core__StaticGlyphRanges), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_instance = ((struct __pyx_obj_5imgui_4core__StaticGlyphRanges *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":581
 *     cdef from_ptr(const cimgui.ImWchar* ptr):
 *         instance = _StaticGlyphRanges()
 *         instance.ranges_ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->ranges_ptr = __pyx_v_ptr;

  /* "imgui/core.pyx":582
 *         instance = _StaticGlyphRanges()
 *         instance.ranges_ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "imgui/core.pyx":579
 * 
 *     @staticmethod
 *     cdef from_ptr(const cimgui.ImWchar* ptr):             # <<<<<<<<<<<<<<
 *         instance = _StaticGlyphRanges()
 *         instance.ranges_ptr = ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._StaticGlyphRanges.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_18_StaticGlyphRanges_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_18_StaticGlyphRanges___reduce_cython__[] = "_StaticGlyphRanges.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_18_StaticGlyphRanges_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_18_StaticGlyphRanges___reduce_cython__(((struct __pyx_obj_5imgui_4core__StaticGlyphRanges *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_18_StaticGlyphRanges___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._StaticGlyphRanges.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_18_StaticGlyphRanges_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_18_StaticGlyphRanges_2__setstate_cython__[] = "_StaticGlyphRanges.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_18_StaticGlyphRanges_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_18_StaticGlyphRanges_2__setstate_cython__(((struct __pyx_obj_5imgui_4core__StaticGlyphRanges *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_18_StaticGlyphRanges_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._StaticGlyphRanges.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":589
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFont* ptr):             # <<<<<<<<<<<<<<
 *         instance = _Font()
 *         instance._ptr = ptr
 */

static PyObject *__pyx_f_5imgui_4core_5_Font_from_ptr(ImFont *__pyx_v_ptr) {
  struct __pyx_obj_5imgui_4core__Font *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "imgui/core.pyx":590
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFont* ptr):
 *         instance = _Font()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5imgui_4core__Font), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_instance = ((struct __pyx_obj_5imgui_4core__Font *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":591
 *     cdef from_ptr(cimgui.ImFont* ptr):
 *         instance = _Font()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "imgui/core.pyx":592
 *         instance = _Font()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "imgui/core.pyx":589
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFont* ptr):             # <<<<<<<<<<<<<<
 *         instance = _Font()
 *         instance._ptr = ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._Font.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_5_Font_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_5_Font___reduce_cython__[] = "_Font.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_5_Font_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_5_Font___reduce_cython__(((struct __pyx_obj_5imgui_4core__Font *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_5_Font___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__Font *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._Font.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_5_Font_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_5_Font_2__setstate_cython__[] = "_Font.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_5_Font_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_5_Font_2__setstate_cython__(((struct __pyx_obj_5imgui_4core__Font *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_5_Font_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__Font *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._Font.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":598
 *     cdef cimgui.ImFontAtlas* _ptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_10_FontAtlas_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5imgui_4core_10_FontAtlas_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas___init__(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_10_FontAtlas___init__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":602
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFontAtlas* ptr):             # <<<<<<<<<<<<<<
 *         instance = _FontAtlas()
 *         instance._ptr = ptr
 */

static PyObject *__pyx_f_5imgui_4core_10_FontAtlas_from_ptr(ImFontAtlas *__pyx_v_ptr) {
  struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_instance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "imgui/core.pyx":603
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFontAtlas* ptr):
 *         instance = _FontAtlas()             # <<<<<<<<<<<<<<
 *         instance._ptr = ptr
 *         return instance
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5imgui_4core__FontAtlas), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_instance = ((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":604
 *     cdef from_ptr(cimgui.ImFontAtlas* ptr):
 *         instance = _FontAtlas()
 *         instance._ptr = ptr             # <<<<<<<<<<<<<<
 *         return instance
 * 
 */
  __pyx_v_instance->_ptr = __pyx_v_ptr;

  /* "imgui/core.pyx":605
 *         instance = _FontAtlas()
 *         instance._ptr = ptr
 *         return instance             # <<<<<<<<<<<<<<
 * 
 *     def _require_pointer(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "imgui/core.pyx":602
 * 
 *     @staticmethod
 *     cdef from_ptr(cimgui.ImFontAtlas* ptr):             # <<<<<<<<<<<<<<
 *         instance = _FontAtlas()
 *         instance._ptr = ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._FontAtlas.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":607
 *         return instance
 * 
 *     def _require_pointer(self):             # <<<<<<<<<<<<<<
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_3_require_pointer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_2_require_pointer[] = "_FontAtlas._require_pointer(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_3_require_pointer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_require_pointer (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_2_require_pointer(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_2_require_pointer(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_require_pointer", 0);

  /* "imgui/core.pyx":608
 * 
 *     def _require_pointer(self):
 *         if self._ptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__
 */
  __pyx_t_1 = ((__pyx_v_self->_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "imgui/core.pyx":610
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_s_improperly_initialized, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "imgui/core.pyx":609
 *     def _require_pointer(self):
 *         if self._ptr == NULL:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 "%s improperly initialized" % self.__class__.__name__
 *             )
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 609, __pyx_L1_error)

    /* "imgui/core.pyx":608
 * 
 *     def _require_pointer(self):
 *         if self._ptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 "%s improperly initialized" % self.__class__.__name__
 */
  }

  /* "imgui/core.pyx":613
 *             )
 * 
 *         return self._ptr != NULL             # <<<<<<<<<<<<<<
 * 
 *     def add_font_default(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->_ptr != NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":607
 *         return instance
 * 
 *     def _require_pointer(self):             # <<<<<<<<<<<<<<
 *         if self._ptr == NULL:
 *             raise RuntimeError(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._FontAtlas._require_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":615
 *         return self._ptr != NULL
 * 
 *     def add_font_default(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_5add_font_default(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_4add_font_default[] = "_FontAtlas.add_font_default(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_5add_font_default(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_font_default (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_4add_font_default(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_4add_font_default(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  ImFont *__pyx_t_4;
  __Pyx_RefNannySetupContext("add_font_default", 0);

  /* "imgui/core.pyx":616
 * 
 *     def add_font_default(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 * 
 *         return _Font.from_ptr(self._ptr.AddFontDefault(NULL))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":618
 *         self._require_pointer()
 * 
 *         return _Font.from_ptr(self._ptr.AddFontDefault(NULL))             # <<<<<<<<<<<<<<
 * 
 *     def add_font_from_file_ttf(
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_4 = __pyx_v_self->_ptr->AddFontDefault(NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 618, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_f_5imgui_4core_5_Font_from_ptr(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":615
 *         return self._ptr != NULL
 * 
 *     def add_font_default(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._FontAtlas.add_font_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":620
 *         return _Font.from_ptr(self._ptr.AddFontDefault(NULL))
 * 
 *     def add_font_from_file_ttf(             # <<<<<<<<<<<<<<
 *         self, str filename, float size_pixels,
 *         _StaticGlyphRanges glyph_ranges=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_7add_font_from_file_ttf(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_6add_font_from_file_ttf[] = "_FontAtlas.add_font_from_file_ttf(self, str filename, float size_pixels, _StaticGlyphRanges glyph_ranges=None)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_7add_font_from_file_ttf(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  float __pyx_v_size_pixels;
  struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_glyph_ranges = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_font_from_file_ttf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_size_pixels,&__pyx_n_s_glyph_ranges,0};
    PyObject* values[3] = {0,0,0};

    /* "imgui/core.pyx":622
 *     def add_font_from_file_ttf(
 *         self, str filename, float size_pixels,
 *         _StaticGlyphRanges glyph_ranges=None,             # <<<<<<<<<<<<<<
 *     ):
 *         self._require_pointer()
 */
    values[2] = (PyObject *)((struct __pyx_obj_5imgui_4core__StaticGlyphRanges *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size_pixels)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_font_from_file_ttf", 0, 2, 3, 1); __PYX_ERR(0, 620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_glyph_ranges);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_font_from_file_ttf") < 0)) __PYX_ERR(0, 620, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = ((PyObject*)values[0]);
    __pyx_v_size_pixels = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_size_pixels == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 621, __pyx_L3_error)
    __pyx_v_glyph_ranges = ((struct __pyx_obj_5imgui_4core__StaticGlyphRanges *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_font_from_file_ttf", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 620, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._FontAtlas.add_font_from_file_ttf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) __PYX_ERR(0, 621, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_glyph_ranges), __pyx_ptype_5imgui_4core__StaticGlyphRanges, 1, "glyph_ranges", 0))) __PYX_ERR(0, 622, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_6add_font_from_file_ttf(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self), __pyx_v_filename, __pyx_v_size_pixels, __pyx_v_glyph_ranges);

  /* "imgui/core.pyx":620
 *         return _Font.from_ptr(self._ptr.AddFontDefault(NULL))
 * 
 *     def add_font_from_file_ttf(             # <<<<<<<<<<<<<<
 *         self, str filename, float size_pixels,
 *         _StaticGlyphRanges glyph_ranges=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_6add_font_from_file_ttf(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self, PyObject *__pyx_v_filename, float __pyx_v_size_pixels, struct __pyx_obj_5imgui_4core__StaticGlyphRanges *__pyx_v_glyph_ranges) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  ImWchar const *__pyx_t_5;
  int __pyx_t_6;
  ImFont *__pyx_t_7;
  __Pyx_RefNannySetupContext("add_font_from_file_ttf", 0);

  /* "imgui/core.pyx":624
 *         _StaticGlyphRanges glyph_ranges=None,
 *     ):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 *         # note: cannot use cimgui.ImWchar here due to Cython bug
 *         # note: whole unicode
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 624, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":629
 *         cdef char* in_glyph_ranges
 * 
 *         return _Font.from_ptr(self._ptr.AddFontFromFileTTF(             # <<<<<<<<<<<<<<
 *             _bytes(filename), size_pixels,  NULL,
 *             glyph_ranges.ranges_ptr if glyph_ranges is not None else NULL
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":630
 * 
 *         return _Font.from_ptr(self._ptr.AddFontFromFileTTF(
 *             _bytes(filename), size_pixels,  NULL,             # <<<<<<<<<<<<<<
 *             glyph_ranges.ranges_ptr if glyph_ranges is not None else NULL
 *         ))
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 630, __pyx_L1_error)

  /* "imgui/core.pyx":631
 *         return _Font.from_ptr(self._ptr.AddFontFromFileTTF(
 *             _bytes(filename), size_pixels,  NULL,
 *             glyph_ranges.ranges_ptr if glyph_ranges is not None else NULL             # <<<<<<<<<<<<<<
 *         ))
 * 
 */
  __pyx_t_6 = (((PyObject *)__pyx_v_glyph_ranges) != Py_None);
  if ((__pyx_t_6 != 0)) {
    __pyx_t_5 = __pyx_v_glyph_ranges->ranges_ptr;
  } else {
    __pyx_t_5 = NULL;
  }

  /* "imgui/core.pyx":629
 *         cdef char* in_glyph_ranges
 * 
 *         return _Font.from_ptr(self._ptr.AddFontFromFileTTF(             # <<<<<<<<<<<<<<
 *             _bytes(filename), size_pixels,  NULL,
 *             glyph_ranges.ranges_ptr if glyph_ranges is not None else NULL
 */
  try {
    __pyx_t_7 = __pyx_v_self->_ptr->AddFontFromFileTTF(__pyx_t_4, __pyx_v_size_pixels, NULL, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 629, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_f_5imgui_4core_5_Font_from_ptr(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":620
 *         return _Font.from_ptr(self._ptr.AddFontDefault(NULL))
 * 
 *     def add_font_from_file_ttf(             # <<<<<<<<<<<<<<
 *         self, str filename, float size_pixels,
 *         _StaticGlyphRanges glyph_ranges=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._FontAtlas.add_font_from_file_ttf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":634
 *         ))
 * 
 *     def clear_tex_data(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearTexData()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_9clear_tex_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_8clear_tex_data[] = "_FontAtlas.clear_tex_data(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_9clear_tex_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_tex_data (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_8clear_tex_data(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_8clear_tex_data(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_tex_data", 0);

  /* "imgui/core.pyx":635
 * 
 *     def clear_tex_data(self):
 *         self._ptr.ClearTexData()             # <<<<<<<<<<<<<<
 * 
 *     def clear_input_data(self):
 */
  try {
    __pyx_v_self->_ptr->ClearTexData();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 635, __pyx_L1_error)
  }

  /* "imgui/core.pyx":634
 *         ))
 * 
 *     def clear_tex_data(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearTexData()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._FontAtlas.clear_tex_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":637
 *         self._ptr.ClearTexData()
 * 
 *     def clear_input_data(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearInputData()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_11clear_input_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_10clear_input_data[] = "_FontAtlas.clear_input_data(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_11clear_input_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_input_data (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_10clear_input_data(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_10clear_input_data(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_input_data", 0);

  /* "imgui/core.pyx":638
 * 
 *     def clear_input_data(self):
 *         self._ptr.ClearInputData()             # <<<<<<<<<<<<<<
 * 
 *     def clear_fonts(self):
 */
  try {
    __pyx_v_self->_ptr->ClearInputData();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 638, __pyx_L1_error)
  }

  /* "imgui/core.pyx":637
 *         self._ptr.ClearTexData()
 * 
 *     def clear_input_data(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearInputData()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._FontAtlas.clear_input_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":640
 *         self._ptr.ClearInputData()
 * 
 *     def clear_fonts(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearFonts()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_13clear_fonts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_12clear_fonts[] = "_FontAtlas.clear_fonts(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_13clear_fonts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_fonts (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_12clear_fonts(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_12clear_fonts(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_fonts", 0);

  /* "imgui/core.pyx":641
 * 
 *     def clear_fonts(self):
 *         self._ptr.ClearFonts()             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  try {
    __pyx_v_self->_ptr->ClearFonts();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 641, __pyx_L1_error)
  }

  /* "imgui/core.pyx":640
 *         self._ptr.ClearInputData()
 * 
 *     def clear_fonts(self):             # <<<<<<<<<<<<<<
 *         self._ptr.ClearFonts()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._FontAtlas.clear_fonts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":643
 *         self._ptr.ClearFonts()
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self._ptr.Clear()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_15clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_14clear[] = "_FontAtlas.clear(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_15clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_14clear(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_14clear(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "imgui/core.pyx":644
 * 
 *     def clear(self):
 *         self._ptr.Clear()             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_default(self):
 */
  try {
    __pyx_v_self->_ptr->Clear();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 644, __pyx_L1_error)
  }

  /* "imgui/core.pyx":643
 *         self._ptr.ClearFonts()
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self._ptr.Clear()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._FontAtlas.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":646
 *         self._ptr.Clear()
 * 
 *     def get_glyph_ranges_default(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesDefault())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_17get_glyph_ranges_default(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_16get_glyph_ranges_default[] = "_FontAtlas.get_glyph_ranges_default(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_17get_glyph_ranges_default(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_default (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_16get_glyph_ranges_default(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_16get_glyph_ranges_default(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_glyph_ranges_default", 0);

  /* "imgui/core.pyx":647
 * 
 *     def get_glyph_ranges_default(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesDefault())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_korean(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesDefault();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 647, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":646
 *         self._ptr.Clear()
 * 
 *     def get_glyph_ranges_default(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesDefault())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_glyph_ranges_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":649
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesDefault())
 * 
 *     def get_glyph_ranges_korean(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesKorean())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_19get_glyph_ranges_korean(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_18get_glyph_ranges_korean[] = "_FontAtlas.get_glyph_ranges_korean(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_19get_glyph_ranges_korean(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_korean (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_18get_glyph_ranges_korean(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_18get_glyph_ranges_korean(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_glyph_ranges_korean", 0);

  /* "imgui/core.pyx":650
 * 
 *     def get_glyph_ranges_korean(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesKorean())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_japanese(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesKorean();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 650, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":649
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesDefault())
 * 
 *     def get_glyph_ranges_korean(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesKorean())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_glyph_ranges_korean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":652
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesKorean())
 * 
 *     def get_glyph_ranges_japanese(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesJapanese())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_21get_glyph_ranges_japanese(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_20get_glyph_ranges_japanese[] = "_FontAtlas.get_glyph_ranges_japanese(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_21get_glyph_ranges_japanese(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_japanese (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_20get_glyph_ranges_japanese(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_20get_glyph_ranges_japanese(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_glyph_ranges_japanese", 0);

  /* "imgui/core.pyx":653
 * 
 *     def get_glyph_ranges_japanese(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesJapanese())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_chinese(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesJapanese();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 653, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":652
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesKorean())
 * 
 *     def get_glyph_ranges_japanese(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesJapanese())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_glyph_ranges_japanese", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":655
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesJapanese())
 * 
 *     def get_glyph_ranges_chinese(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChinese())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_23get_glyph_ranges_chinese(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_22get_glyph_ranges_chinese[] = "_FontAtlas.get_glyph_ranges_chinese(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_23get_glyph_ranges_chinese(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_chinese (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_22get_glyph_ranges_chinese(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_22get_glyph_ranges_chinese(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_glyph_ranges_chinese", 0);

  /* "imgui/core.pyx":656
 * 
 *     def get_glyph_ranges_chinese(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChinese())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_cyrillic(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesChinese();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 656, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":655
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesJapanese())
 * 
 *     def get_glyph_ranges_chinese(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChinese())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_glyph_ranges_chinese", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":658
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChinese())
 * 
 *     def get_glyph_ranges_cyrillic(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesCyrillic())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_25get_glyph_ranges_cyrillic(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_24get_glyph_ranges_cyrillic[] = "_FontAtlas.get_glyph_ranges_cyrillic(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_25get_glyph_ranges_cyrillic(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_cyrillic (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_24get_glyph_ranges_cyrillic(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_24get_glyph_ranges_cyrillic(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImWchar const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_glyph_ranges_cyrillic", 0);

  /* "imgui/core.pyx":659
 * 
 *     def get_glyph_ranges_cyrillic(self):
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesCyrillic())             # <<<<<<<<<<<<<<
 * 
 *     def get_glyph_ranges_latin(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->GetGlyphRangesCyrillic();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 659, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":658
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesChinese())
 * 
 *     def get_glyph_ranges_cyrillic(self):             # <<<<<<<<<<<<<<
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesCyrillic())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_glyph_ranges_cyrillic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":661
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesCyrillic())
 * 
 *     def get_glyph_ranges_latin(self):             # <<<<<<<<<<<<<<
 *         # note: this is a custom glyph range with full latin character set
 *         return _StaticGlyphRanges.from_ptr(_LATIN_ALL)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_27get_glyph_ranges_latin(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_26get_glyph_ranges_latin[] = "_FontAtlas.get_glyph_ranges_latin(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_27get_glyph_ranges_latin(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_glyph_ranges_latin (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_26get_glyph_ranges_latin(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_26get_glyph_ranges_latin(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_glyph_ranges_latin", 0);

  /* "imgui/core.pyx":663
 *     def get_glyph_ranges_latin(self):
 *         # note: this is a custom glyph range with full latin character set
 *         return _StaticGlyphRanges.from_ptr(_LATIN_ALL)             # <<<<<<<<<<<<<<
 * 
 *     def get_tex_data_as_alpha8(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr(__pyx_v_5imgui_4core__LATIN_ALL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":661
 *         return _StaticGlyphRanges.from_ptr(self._ptr.GetGlyphRangesCyrillic())
 * 
 *     def get_glyph_ranges_latin(self):             # <<<<<<<<<<<<<<
 *         # note: this is a custom glyph range with full latin character set
 *         return _StaticGlyphRanges.from_ptr(_LATIN_ALL)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_glyph_ranges_latin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":665
 *         return _StaticGlyphRanges.from_ptr(_LATIN_ALL)
 * 
 *     def get_tex_data_as_alpha8(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_29get_tex_data_as_alpha8(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_28get_tex_data_as_alpha8[] = "_FontAtlas.get_tex_data_as_alpha8(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_29get_tex_data_as_alpha8(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tex_data_as_alpha8 (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_28get_tex_data_as_alpha8(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_28get_tex_data_as_alpha8(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  int __pyx_v_width;
  int __pyx_v_height;
  unsigned char *__pyx_v_pixels;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("get_tex_data_as_alpha8", 0);

  /* "imgui/core.pyx":666
 * 
 *     def get_tex_data_as_alpha8(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 * 
 *         cdef int width
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 666, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":672
 *         cdef unsigned char* pixels
 * 
 *         self._ptr.GetTexDataAsAlpha8(&pixels, &width, &height)             # <<<<<<<<<<<<<<
 * 
 *         return width, height, bytes(pixels[:width*height])
 */
  try {
    __pyx_v_self->_ptr->GetTexDataAsAlpha8((&__pyx_v_pixels), (&__pyx_v_width), (&__pyx_v_height), NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 672, __pyx_L1_error)
  }

  /* "imgui/core.pyx":674
 *         self._ptr.GetTexDataAsAlpha8(&pixels, &width, &height)
 * 
 *         return width, height, bytes(pixels[:width*height])             # <<<<<<<<<<<<<<
 * 
 *     def get_tex_data_as_rgba32(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_pixels) + 0, (__pyx_v_width * __pyx_v_height) - 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyBytes_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":665
 *         return _StaticGlyphRanges.from_ptr(_LATIN_ALL)
 * 
 *     def get_tex_data_as_alpha8(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_tex_data_as_alpha8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":676
 *         return width, height, bytes(pixels[:width*height])
 * 
 *     def get_tex_data_as_rgba32(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_31get_tex_data_as_rgba32(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_30get_tex_data_as_rgba32[] = "_FontAtlas.get_tex_data_as_rgba32(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_31get_tex_data_as_rgba32(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tex_data_as_rgba32 (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_30get_tex_data_as_rgba32(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_30get_tex_data_as_rgba32(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  int __pyx_v_width;
  int __pyx_v_height;
  unsigned char *__pyx_v_pixels;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("get_tex_data_as_rgba32", 0);

  /* "imgui/core.pyx":677
 * 
 *     def get_tex_data_as_rgba32(self):
 *         self._require_pointer()             # <<<<<<<<<<<<<<
 * 
 *         cdef int width
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_require_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 677, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":682
 *         cdef int height
 *         cdef unsigned char* pixels
 *         self._ptr.GetTexDataAsRGBA32(&pixels, &width, &height)             # <<<<<<<<<<<<<<
 * 
 *         return width, height, bytes(pixels[:width*height*4])
 */
  try {
    __pyx_v_self->_ptr->GetTexDataAsRGBA32((&__pyx_v_pixels), (&__pyx_v_width), (&__pyx_v_height), NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 682, __pyx_L1_error)
  }

  /* "imgui/core.pyx":684
 *         self._ptr.GetTexDataAsRGBA32(&pixels, &width, &height)
 * 
 *         return width, height, bytes(pixels[:width*height*4])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_pixels) + 0, ((__pyx_v_width * __pyx_v_height) * 4) - 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyBytes_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":676
 *         return width, height, bytes(pixels[:width*height])
 * 
 *     def get_tex_data_as_rgba32(self):             # <<<<<<<<<<<<<<
 *         self._require_pointer()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("imgui.core._FontAtlas.get_tex_data_as_rgba32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":687
 * 
 *     @property
 *     def texture_id(self):             # <<<<<<<<<<<<<<
 *         """
 *         Note: difference in mapping (maps actual TexID and not TextureID)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_10texture_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_10texture_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_10texture_id___get__(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_10texture_id___get__(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":695
 * 
 *         """
 *         return <object>self._ptr.TexID             # <<<<<<<<<<<<<<
 * 
 *     @texture_id.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_ptr->TexID));
  __pyx_r = ((PyObject *)__pyx_v_self->_ptr->TexID);
  goto __pyx_L0;

  /* "imgui/core.pyx":687
 * 
 *     @property
 *     def texture_id(self):             # <<<<<<<<<<<<<<
 *         """
 *         Note: difference in mapping (maps actual TexID and not TextureID)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":698
 * 
 *     @texture_id.setter
 *     def texture_id(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.TexID = <void *> value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_10_FontAtlas_10texture_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_10_FontAtlas_10texture_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_10texture_id_2__set__(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_10_FontAtlas_10texture_id_2__set__(struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":699
 *     @texture_id.setter
 *     def texture_id(self, value):
 *         self._ptr.TexID = <void *> value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->_ptr->TexID = ((void *)__pyx_v_value);

  /* "imgui/core.pyx":698
 * 
 *     @texture_id.setter
 *     def texture_id(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.TexID = <void *> value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_33__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_32__reduce_cython__[] = "_FontAtlas.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_33__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_32__reduce_cython__(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_32__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._FontAtlas.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_35__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_10_FontAtlas_34__setstate_cython__[] = "_FontAtlas.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_10_FontAtlas_35__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10_FontAtlas_34__setstate_cython__(((struct __pyx_obj_5imgui_4core__FontAtlas *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10_FontAtlas_34__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__FontAtlas *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._FontAtlas.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":707
 *     cdef object _fonts
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self._ptr = &cimgui.GetIO()
 *         self._fonts = _FontAtlas.from_ptr(self._ptr.Fonts)
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO___init__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO___init__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "imgui/core.pyx":708
 * 
 *     def __init__(self):
 *         self._ptr = &cimgui.GetIO()             # <<<<<<<<<<<<<<
 *         self._fonts = _FontAtlas.from_ptr(self._ptr.Fonts)
 *         self._render_callback = None
 */
  __pyx_v_self->_ptr = (&ImGui::GetIO());

  /* "imgui/core.pyx":709
 *     def __init__(self):
 *         self._ptr = &cimgui.GetIO()
 *         self._fonts = _FontAtlas.from_ptr(self._ptr.Fonts)             # <<<<<<<<<<<<<<
 *         self._render_callback = None
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_10_FontAtlas_from_ptr(__pyx_v_self->_ptr->Fonts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_fonts);
  __Pyx_DECREF(__pyx_v_self->_fonts);
  __pyx_v_self->_fonts = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":710
 *         self._ptr = &cimgui.GetIO()
 *         self._fonts = _FontAtlas.from_ptr(self._ptr.Fonts)
 *         self._render_callback = None             # <<<<<<<<<<<<<<
 * 
 *     # ... maping of input properties ...
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_render_callback);
  __Pyx_DECREF(__pyx_v_self->_render_callback);
  __pyx_v_self->_render_callback = Py_None;

  /* "imgui/core.pyx":707
 *     cdef object _fonts
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self._ptr = &cimgui.GetIO()
 *         self._fonts = _FontAtlas.from_ptr(self._ptr.Fonts)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":714
 *     # ... maping of input properties ...
 *     @property
 *     def display_size(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySize)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_12display_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_12display_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_12display_size___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_12display_size___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":715
 *     @property
 *     def display_size(self):
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySize)             # <<<<<<<<<<<<<<
 * 
 *     @display_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplaySize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":714
 *     # ... maping of input properties ...
 *     @property
 *     def display_size(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplaySize)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.display_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":718
 * 
 *     @display_size.setter
 *     def display_size(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplaySize = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_12display_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_12display_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_12display_size_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_12display_size_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":719
 *     @display_size.setter
 *     def display_size(self, value):
 *         self._ptr.DisplaySize = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 719, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplaySize = __pyx_t_1;

  /* "imgui/core.pyx":718
 * 
 *     @display_size.setter
 *     def display_size(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplaySize = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._IO.display_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":722
 * 
 *     @property
 *     def delta_time(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.DeltaTime
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_10delta_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_10delta_time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_10delta_time___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_10delta_time___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":723
 *     @property
 *     def delta_time(self):
 *         return self._ptr.DeltaTime             # <<<<<<<<<<<<<<
 * 
 *     @delta_time.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->DeltaTime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":722
 * 
 *     @property
 *     def delta_time(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.DeltaTime
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.delta_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":726
 * 
 *     @delta_time.setter
 *     def delta_time(self, float time):             # <<<<<<<<<<<<<<
 *         self._ptr.DeltaTime = time
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_10delta_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_time); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_10delta_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_time) {
  float __pyx_v_time;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_time); {
    __pyx_v_time = __pyx_PyFloat_AsFloat(__pyx_arg_time); if (unlikely((__pyx_v_time == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.delta_time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_10delta_time_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_time));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_10delta_time_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_time) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":727
 *     @delta_time.setter
 *     def delta_time(self, float time):
 *         self._ptr.DeltaTime = time             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->DeltaTime = __pyx_v_time;

  /* "imgui/core.pyx":726
 * 
 *     @delta_time.setter
 *     def delta_time(self, float time):             # <<<<<<<<<<<<<<
 *         self._ptr.DeltaTime = time
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":730
 * 
 *     @property
 *     def ini_saving_rate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IniSavingRate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_15ini_saving_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_15ini_saving_rate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_15ini_saving_rate___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_15ini_saving_rate___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":731
 *     @property
 *     def ini_saving_rate(self):
 *         return self._ptr.IniSavingRate             # <<<<<<<<<<<<<<
 * 
 *     @ini_saving_rate.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->IniSavingRate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":730
 * 
 *     @property
 *     def ini_saving_rate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.IniSavingRate
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.ini_saving_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":734
 * 
 *     @ini_saving_rate.setter
 *     def ini_saving_rate(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.IniSavingRate = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_15ini_saving_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_15ini_saving_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.ini_saving_rate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_15ini_saving_rate_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_15ini_saving_rate_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":735
 *     @ini_saving_rate.setter
 *     def ini_saving_rate(self, float value):
 *         self._ptr.IniSavingRate = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->IniSavingRate = __pyx_v_value;

  /* "imgui/core.pyx":734
 * 
 *     @ini_saving_rate.setter
 *     def ini_saving_rate(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.IniSavingRate = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":738
 * 
 *     @property
 *     def log_file_name(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.LogFilename
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_13log_file_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_13log_file_name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_13log_file_name___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_13log_file_name___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":739
 *     @property
 *     def log_file_name(self):
 *         return self._ptr.LogFilename             # <<<<<<<<<<<<<<
 * 
 *     @log_file_name.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->_ptr->LogFilename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":738
 * 
 *     @property
 *     def log_file_name(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.LogFilename
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.log_file_name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":742
 * 
 *     @log_file_name.setter
 *     def log_file_name(self, char* value):             # <<<<<<<<<<<<<<
 *         self._ptr.LogFilename = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_13log_file_name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_13log_file_name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_AsWritableString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(0, 742, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.log_file_name.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_13log_file_name_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((char *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_13log_file_name_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, char *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":743
 *     @log_file_name.setter
 *     def log_file_name(self, char* value):
 *         self._ptr.LogFilename = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->LogFilename = __pyx_v_value;

  /* "imgui/core.pyx":742
 * 
 *     @log_file_name.setter
 *     def log_file_name(self, char* value):             # <<<<<<<<<<<<<<
 *         self._ptr.LogFilename = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":746
 * 
 *     @property
 *     def mouse_double_click_time(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDoubleClickTime
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_23mouse_double_click_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_23mouse_double_click_time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_23mouse_double_click_time___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_23mouse_double_click_time___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":747
 *     @property
 *     def mouse_double_click_time(self):
 *         return self._ptr.MouseDoubleClickTime             # <<<<<<<<<<<<<<
 * 
 *     @mouse_double_click_time.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseDoubleClickTime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":746
 * 
 *     @property
 *     def mouse_double_click_time(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDoubleClickTime
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.mouse_double_click_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":750
 * 
 *     @mouse_double_click_time.setter
 *     def mouse_double_click_time(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDoubleClickTime = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_23mouse_double_click_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_23mouse_double_click_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 750, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.mouse_double_click_time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_23mouse_double_click_time_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_23mouse_double_click_time_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":751
 *     @mouse_double_click_time.setter
 *     def mouse_double_click_time(self, float value):
 *         self._ptr.MouseDoubleClickTime = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseDoubleClickTime = __pyx_v_value;

  /* "imgui/core.pyx":750
 * 
 *     @mouse_double_click_time.setter
 *     def mouse_double_click_time(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDoubleClickTime = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":754
 * 
 *     @property
 *     def mouse_double_click_max_distance(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDoubleClickMaxDist
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_31mouse_double_click_max_distance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_31mouse_double_click_max_distance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_31mouse_double_click_max_distance___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_31mouse_double_click_max_distance___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":755
 *     @property
 *     def mouse_double_click_max_distance(self):
 *         return self._ptr.MouseDoubleClickMaxDist             # <<<<<<<<<<<<<<
 * 
 *     @mouse_double_click_max_distance.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseDoubleClickMaxDist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":754
 * 
 *     @property
 *     def mouse_double_click_max_distance(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDoubleClickMaxDist
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.mouse_double_click_max_distance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":758
 * 
 *     @mouse_double_click_max_distance.setter
 *     def mouse_double_click_max_distance(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDoubleClickMaxDist = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_31mouse_double_click_max_distance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_31mouse_double_click_max_distance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 758, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.mouse_double_click_max_distance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_31mouse_double_click_max_distance_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_31mouse_double_click_max_distance_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":759
 *     @mouse_double_click_max_distance.setter
 *     def mouse_double_click_max_distance(self, float value):
 *         self._ptr.MouseDoubleClickMaxDist = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseDoubleClickMaxDist = __pyx_v_value;

  /* "imgui/core.pyx":758
 * 
 *     @mouse_double_click_max_distance.setter
 *     def mouse_double_click_max_distance(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDoubleClickMaxDist = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":762
 * 
 *     @property
 *     def mouse_drag_threshold(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDragThreshold
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_20mouse_drag_threshold_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_20mouse_drag_threshold_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_20mouse_drag_threshold___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_20mouse_drag_threshold___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":763
 *     @property
 *     def mouse_drag_threshold(self):
 *         return self._ptr.MouseDragThreshold             # <<<<<<<<<<<<<<
 * 
 *     @mouse_drag_threshold.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseDragThreshold); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":762
 * 
 *     @property
 *     def mouse_drag_threshold(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDragThreshold
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.mouse_drag_threshold.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":766
 * 
 *     @mouse_drag_threshold.setter
 *     def mouse_drag_threshold(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDragThreshold = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_20mouse_drag_threshold_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_20mouse_drag_threshold_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 766, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.mouse_drag_threshold.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_20mouse_drag_threshold_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_20mouse_drag_threshold_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":767
 *     @mouse_drag_threshold.setter
 *     def mouse_drag_threshold(self, float value):
 *         self._ptr.MouseDragThreshold = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseDragThreshold = __pyx_v_value;

  /* "imgui/core.pyx":766
 * 
 *     @mouse_drag_threshold.setter
 *     def mouse_drag_threshold(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDragThreshold = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":770
 * 
 *     @property
 *     def key_map(self):             # <<<<<<<<<<<<<<
 *         cdef cvarray key_map = cvarray(
 *             shape=(enums.ImGuiKey_COUNT,),
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_7key_map_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_7key_map_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_7key_map___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_7key_map___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  struct __pyx_array_obj *__pyx_v_key_map = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":772
 *     def key_map(self):
 *         cdef cvarray key_map = cvarray(
 *             shape=(enums.ImGuiKey_COUNT,),             # <<<<<<<<<<<<<<
 *             format='i',
 *             itemsize=sizeof(int),
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_COUNT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_3) < 0) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_i) < 0) __PYX_ERR(0, 772, __pyx_L1_error)

  /* "imgui/core.pyx":774
 *             shape=(enums.ImGuiKey_COUNT,),
 *             format='i',
 *             itemsize=sizeof(int),             # <<<<<<<<<<<<<<
 *             allocate_buffer=False
 *         )
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_3) < 0) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imgui/core.pyx":775
 *             format='i',
 *             itemsize=sizeof(int),
 *             allocate_buffer=False             # <<<<<<<<<<<<<<
 *         )
 *         key_map.data = <char*>self._ptr.KeyMap
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(0, 772, __pyx_L1_error)

  /* "imgui/core.pyx":771
 *     @property
 *     def key_map(self):
 *         cdef cvarray key_map = cvarray(             # <<<<<<<<<<<<<<
 *             shape=(enums.ImGuiKey_COUNT,),
 *             format='i',
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_key_map = ((struct __pyx_array_obj *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "imgui/core.pyx":777
 *             allocate_buffer=False
 *         )
 *         key_map.data = <char*>self._ptr.KeyMap             # <<<<<<<<<<<<<<
 *         return key_map
 * 
 */
  __pyx_v_key_map->data = ((char *)__pyx_v_self->_ptr->KeyMap);

  /* "imgui/core.pyx":778
 *         )
 *         key_map.data = <char*>self._ptr.KeyMap
 *         return key_map             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_key_map));
  __pyx_r = ((PyObject *)__pyx_v_key_map);
  goto __pyx_L0;

  /* "imgui/core.pyx":770
 * 
 *     @property
 *     def key_map(self):             # <<<<<<<<<<<<<<
 *         cdef cvarray key_map = cvarray(
 *             shape=(enums.ImGuiKey_COUNT,),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core._IO.key_map.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_key_map);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":781
 * 
 *     @property
 *     def key_repeat_delay(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyRepeatDelay
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_16key_repeat_delay_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_16key_repeat_delay_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_16key_repeat_delay___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_16key_repeat_delay___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":782
 *     @property
 *     def key_repeat_delay(self):
 *         return self._ptr.KeyRepeatDelay             # <<<<<<<<<<<<<<
 * 
 *     @key_repeat_delay.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->KeyRepeatDelay); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":781
 * 
 *     @property
 *     def key_repeat_delay(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyRepeatDelay
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.key_repeat_delay.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":785
 * 
 *     @key_repeat_delay.setter
 *     def key_repeat_delay(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyRepeatDelay = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_16key_repeat_delay_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_16key_repeat_delay_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 785, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.key_repeat_delay.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_16key_repeat_delay_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_16key_repeat_delay_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":786
 *     @key_repeat_delay.setter
 *     def key_repeat_delay(self, float value):
 *         self._ptr.KeyRepeatDelay = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeyRepeatDelay = __pyx_v_value;

  /* "imgui/core.pyx":785
 * 
 *     @key_repeat_delay.setter
 *     def key_repeat_delay(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyRepeatDelay = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":789
 * 
 *     @property
 *     def key_repeat_rate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyRepeatRate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_15key_repeat_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_15key_repeat_rate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_15key_repeat_rate___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_15key_repeat_rate___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":790
 *     @property
 *     def key_repeat_rate(self):
 *         return self._ptr.KeyRepeatRate             # <<<<<<<<<<<<<<
 * 
 *     @key_repeat_rate.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->KeyRepeatRate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":789
 * 
 *     @property
 *     def key_repeat_rate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyRepeatRate
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.key_repeat_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":793
 * 
 *     @key_repeat_rate.setter
 *     def key_repeat_rate(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyRepeatRate = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_15key_repeat_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_15key_repeat_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 793, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.key_repeat_rate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_15key_repeat_rate_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_15key_repeat_rate_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":794
 *     @key_repeat_rate.setter
 *     def key_repeat_rate(self, float value):
 *         self._ptr.KeyRepeatRate = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeyRepeatRate = __pyx_v_value;

  /* "imgui/core.pyx":793
 * 
 *     @key_repeat_rate.setter
 *     def key_repeat_rate(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyRepeatRate = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":797
 * 
 *     @property
 *     def fonts(self):             # <<<<<<<<<<<<<<
 *         return self._fonts
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_5fonts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_5fonts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_5fonts___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_5fonts___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":798
 *     @property
 *     def fonts(self):
 *         return self._fonts             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_fonts);
  __pyx_r = __pyx_v_self->_fonts;
  goto __pyx_L0;

  /* "imgui/core.pyx":797
 * 
 *     @property
 *     def fonts(self):             # <<<<<<<<<<<<<<
 *         return self._fonts
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":801
 * 
 *     @property
 *     def font_global_scale(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.FontGlobalScale
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_17font_global_scale_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_17font_global_scale_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_17font_global_scale___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_17font_global_scale___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":802
 *     @property
 *     def font_global_scale(self):
 *         return self._ptr.FontGlobalScale             # <<<<<<<<<<<<<<
 * 
 *     @font_global_scale.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->FontGlobalScale); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":801
 * 
 *     @property
 *     def font_global_scale(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.FontGlobalScale
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.font_global_scale.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":805
 * 
 *     @font_global_scale.setter
 *     def font_global_scale(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.FontGlobalScale = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_17font_global_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_17font_global_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 805, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.font_global_scale.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_17font_global_scale_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_17font_global_scale_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":806
 *     @font_global_scale.setter
 *     def font_global_scale(self, float value):
 *         self._ptr.FontGlobalScale = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->FontGlobalScale = __pyx_v_value;

  /* "imgui/core.pyx":805
 * 
 *     @font_global_scale.setter
 *     def font_global_scale(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.FontGlobalScale = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":809
 * 
 *     @property
 *     def font_allow_user_scaling(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.FontAllowUserScaling
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_23font_allow_user_scaling_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_23font_allow_user_scaling_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_23font_allow_user_scaling___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_23font_allow_user_scaling___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":810
 *     @property
 *     def font_allow_user_scaling(self):
 *         return self._ptr.FontAllowUserScaling             # <<<<<<<<<<<<<<
 * 
 *     @font_allow_user_scaling.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->FontAllowUserScaling); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":809
 * 
 *     @property
 *     def font_allow_user_scaling(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.FontAllowUserScaling
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.font_allow_user_scaling.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":813
 * 
 *     @font_allow_user_scaling.setter
 *     def font_allow_user_scaling(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.FontAllowUserScaling = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_23font_allow_user_scaling_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_23font_allow_user_scaling_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 813, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.font_allow_user_scaling.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_23font_allow_user_scaling_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_23font_allow_user_scaling_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":814
 *     @font_allow_user_scaling.setter
 *     def font_allow_user_scaling(self, cimgui.bool value):
 *         self._ptr.FontAllowUserScaling = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->FontAllowUserScaling = __pyx_v_value;

  /* "imgui/core.pyx":813
 * 
 *     @font_allow_user_scaling.setter
 *     def font_allow_user_scaling(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.FontAllowUserScaling = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":817
 * 
 *     @property
 *     def render_callback(self):             # <<<<<<<<<<<<<<
 *         return self._render_callback
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_15render_callback_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_15render_callback_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_15render_callback___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_15render_callback___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":818
 *     @property
 *     def render_callback(self):
 *         return self._render_callback             # <<<<<<<<<<<<<<
 * 
 *     @render_callback.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_render_callback);
  __pyx_r = __pyx_v_self->_render_callback;
  goto __pyx_L0;

  /* "imgui/core.pyx":817
 * 
 *     @property
 *     def render_callback(self):             # <<<<<<<<<<<<<<
 *         return self._render_callback
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":821
 * 
 *     @render_callback.setter
 *     def render_callback(self, object fn):             # <<<<<<<<<<<<<<
 *         self._render_callback = fn
 *         self._ptr.RenderDrawListsFn = self._io_render_callback
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_15render_callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_fn); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_15render_callback_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_fn) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_15render_callback_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_fn));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_15render_callback_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_fn) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  void (*__pyx_t_1)(ImDrawData *);
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":822
 *     @render_callback.setter
 *     def render_callback(self, object fn):
 *         self._render_callback = fn             # <<<<<<<<<<<<<<
 *         self._ptr.RenderDrawListsFn = self._io_render_callback
 * 
 */
  __Pyx_INCREF(__pyx_v_fn);
  __Pyx_GIVEREF(__pyx_v_fn);
  __Pyx_GOTREF(__pyx_v_self->_render_callback);
  __Pyx_DECREF(__pyx_v_self->_render_callback);
  __pyx_v_self->_render_callback = __pyx_v_fn;

  /* "imgui/core.pyx":823
 *     def render_callback(self, object fn):
 *         self._render_callback = fn
 *         self._ptr.RenderDrawListsFn = self._io_render_callback             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5imgui_4core__IO *)__pyx_v_self->__pyx_vtab)->_io_render_callback;
  __pyx_v_self->_ptr->RenderDrawListsFn = __pyx_t_1;

  /* "imgui/core.pyx":821
 * 
 *     @render_callback.setter
 *     def render_callback(self, object fn):             # <<<<<<<<<<<<<<
 *         self._render_callback = fn
 *         self._ptr.RenderDrawListsFn = self._io_render_callback
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":826
 * 
 *     @property
 *     def display_fb_scale(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayFramebufferScale)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_16display_fb_scale_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_16display_fb_scale_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_16display_fb_scale___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_16display_fb_scale___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":827
 *     @property
 *     def display_fb_scale(self):
 *         return _cast_ImVec2_tuple(self._ptr.DisplayFramebufferScale)             # <<<<<<<<<<<<<<
 * 
 *     @display_fb_scale.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplayFramebufferScale); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":826
 * 
 *     @property
 *     def display_fb_scale(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayFramebufferScale)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.display_fb_scale.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":830
 * 
 *     @display_fb_scale.setter
 *     def display_fb_scale(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayFramebufferScale = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_16display_fb_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_16display_fb_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_16display_fb_scale_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_16display_fb_scale_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":831
 *     @display_fb_scale.setter
 *     def display_fb_scale(self, value):
 *         self._ptr.DisplayFramebufferScale = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 831, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplayFramebufferScale = __pyx_t_1;

  /* "imgui/core.pyx":830
 * 
 *     @display_fb_scale.setter
 *     def display_fb_scale(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayFramebufferScale = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._IO.display_fb_scale.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":834
 * 
 *     @property
 *     def display_visible_min(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMin)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_19display_visible_min_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_19display_visible_min_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_19display_visible_min___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_19display_visible_min___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":835
 *     @property
 *     def display_visible_min(self):
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMin)             # <<<<<<<<<<<<<<
 * 
 *     @display_visible_min.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplayVisibleMin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":834
 * 
 *     @property
 *     def display_visible_min(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMin)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.display_visible_min.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":838
 * 
 *     @display_visible_min.setter
 *     def display_visible_min(self,  value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayVisibleMin = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_19display_visible_min_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_19display_visible_min_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_19display_visible_min_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_19display_visible_min_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":839
 *     @display_visible_min.setter
 *     def display_visible_min(self,  value):
 *         self._ptr.DisplayVisibleMin = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplayVisibleMin = __pyx_t_1;

  /* "imgui/core.pyx":838
 * 
 *     @display_visible_min.setter
 *     def display_visible_min(self,  value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayVisibleMin = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._IO.display_visible_min.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":842
 * 
 *     @property
 *     def display_visible_max(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMax)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_19display_visible_max_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_19display_visible_max_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_19display_visible_max___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_19display_visible_max___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":843
 *     @property
 *     def display_visible_max(self):
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMax)             # <<<<<<<<<<<<<<
 * 
 *     @display_visible_max.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->DisplayVisibleMax); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":842
 * 
 *     @property
 *     def display_visible_max(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.DisplayVisibleMax)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.display_visible_max.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":846
 * 
 *     @display_visible_max.setter
 *     def display_visible_max(self,  value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayVisibleMax = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_19display_visible_max_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_19display_visible_max_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_19display_visible_max_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_19display_visible_max_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":847
 *     @display_visible_max.setter
 *     def display_visible_max(self,  value):
 *         self._ptr.DisplayVisibleMax = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 847, __pyx_L1_error)
  __pyx_v_self->_ptr->DisplayVisibleMax = __pyx_t_1;

  /* "imgui/core.pyx":846
 * 
 *     @display_visible_max.setter
 *     def display_visible_max(self,  value):             # <<<<<<<<<<<<<<
 *         self._ptr.DisplayVisibleMax = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._IO.display_visible_max.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":850
 * 
 *     @property
 *     def mouse_pos(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.MousePos)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_9mouse_pos_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_9mouse_pos_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9mouse_pos___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_9mouse_pos___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":851
 *     @property
 *     def mouse_pos(self):
 *         return _cast_ImVec2_tuple(self._ptr.MousePos)             # <<<<<<<<<<<<<<
 * 
 *     @mouse_pos.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_v_self->_ptr->MousePos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":850
 * 
 *     @property
 *     def mouse_pos(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(self._ptr.MousePos)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.mouse_pos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":854
 * 
 *     @mouse_pos.setter
 *     def mouse_pos(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.MousePos = _cast_tuple_ImVec2(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_9mouse_pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_9mouse_pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9mouse_pos_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_9mouse_pos_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":855
 *     @mouse_pos.setter
 *     def mouse_pos(self, value):
 *         self._ptr.MousePos = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 855, __pyx_L1_error)
  __pyx_v_self->_ptr->MousePos = __pyx_t_1;

  /* "imgui/core.pyx":854
 * 
 *     @mouse_pos.setter
 *     def mouse_pos(self, value):             # <<<<<<<<<<<<<<
 *         self._ptr.MousePos = _cast_tuple_ImVec2(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._IO.mouse_pos.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":858
 * 
 *     @property
 *     def mouse_down(self):             # <<<<<<<<<<<<<<
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_10mouse_down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_10mouse_down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_10mouse_down___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_10mouse_down___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  struct __pyx_array_obj *__pyx_v_mouse_down = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":862
 *         # todo: modified in place
 *         cdef cvarray mouse_down = cvarray(
 *             shape=(5,),             # <<<<<<<<<<<<<<
 *             format='b',
 *             itemsize=sizeof(bool),
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_tuple__18) < 0) __PYX_ERR(0, 862, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_b) < 0) __PYX_ERR(0, 862, __pyx_L1_error)

  /* "imgui/core.pyx":864
 *             shape=(5,),
 *             format='b',
 *             itemsize=sizeof(bool),             # <<<<<<<<<<<<<<
 *             allocate_buffer=False
 *         )
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(bool))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_2) < 0) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imgui/core.pyx":865
 *             format='b',
 *             itemsize=sizeof(bool),
 *             allocate_buffer=False             # <<<<<<<<<<<<<<
 *         )
 *         mouse_down.data = <char*>self._ptr.MouseDown
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(0, 862, __pyx_L1_error)

  /* "imgui/core.pyx":861
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 *         cdef cvarray mouse_down = cvarray(             # <<<<<<<<<<<<<<
 *             shape=(5,),
 *             format='b',
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mouse_down = ((struct __pyx_array_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":867
 *             allocate_buffer=False
 *         )
 *         mouse_down.data = <char*>self._ptr.MouseDown             # <<<<<<<<<<<<<<
 *         return mouse_down
 * 
 */
  __pyx_v_mouse_down->data = ((char *)__pyx_v_self->_ptr->MouseDown);

  /* "imgui/core.pyx":868
 *         )
 *         mouse_down.data = <char*>self._ptr.MouseDown
 *         return mouse_down             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_mouse_down));
  __pyx_r = ((PyObject *)__pyx_v_mouse_down);
  goto __pyx_L0;

  /* "imgui/core.pyx":858
 * 
 *     @property
 *     def mouse_down(self):             # <<<<<<<<<<<<<<
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._IO.mouse_down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mouse_down);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":871
 * 
 *     @property
 *     def mouse_wheel(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseWheel
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_11mouse_wheel_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_11mouse_wheel_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_11mouse_wheel___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_11mouse_wheel___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":872
 *     @property
 *     def mouse_wheel(self):
 *         return self._ptr.MouseWheel             # <<<<<<<<<<<<<<
 * 
 *     @mouse_wheel.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->MouseWheel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":871
 * 
 *     @property
 *     def mouse_wheel(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseWheel
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.mouse_wheel.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":875
 * 
 *     @mouse_wheel.setter
 *     def mouse_wheel(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseWheel = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_11mouse_wheel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_11mouse_wheel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 875, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.mouse_wheel.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_11mouse_wheel_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_11mouse_wheel_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, float __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":876
 *     @mouse_wheel.setter
 *     def mouse_wheel(self, float value):
 *         self._ptr.MouseWheel = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseWheel = __pyx_v_value;

  /* "imgui/core.pyx":875
 * 
 *     @mouse_wheel.setter
 *     def mouse_wheel(self, float value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseWheel = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":879
 * 
 *     @property
 *     def mouse_draw_cursor(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDrawCursor
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_17mouse_draw_cursor_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_17mouse_draw_cursor_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_17mouse_draw_cursor___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_17mouse_draw_cursor___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":880
 *     @property
 *     def mouse_draw_cursor(self):
 *         return self._ptr.MouseDrawCursor             # <<<<<<<<<<<<<<
 * 
 *     @mouse_draw_cursor.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->MouseDrawCursor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":879
 * 
 *     @property
 *     def mouse_draw_cursor(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MouseDrawCursor
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.mouse_draw_cursor.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":883
 * 
 *     @mouse_draw_cursor.setter
 *     def mouse_draw_cursor(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDrawCursor = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_17mouse_draw_cursor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_17mouse_draw_cursor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 883, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.mouse_draw_cursor.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_17mouse_draw_cursor_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_17mouse_draw_cursor_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":884
 *     @mouse_draw_cursor.setter
 *     def mouse_draw_cursor(self, cimgui.bool value):
 *         self._ptr.MouseDrawCursor = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->MouseDrawCursor = __pyx_v_value;

  /* "imgui/core.pyx":883
 * 
 *     @mouse_draw_cursor.setter
 *     def mouse_draw_cursor(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.MouseDrawCursor = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":887
 * 
 *     @property
 *     def key_ctrl(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyCtrl
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_8key_ctrl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_8key_ctrl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_8key_ctrl___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_8key_ctrl___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":888
 *     @property
 *     def key_ctrl(self):
 *         return self._ptr.KeyCtrl             # <<<<<<<<<<<<<<
 * 
 *     @key_ctrl.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->KeyCtrl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":887
 * 
 *     @property
 *     def key_ctrl(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyCtrl
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.key_ctrl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":891
 * 
 *     @key_ctrl.setter
 *     def key_ctrl(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyCtrl = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_8key_ctrl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_8key_ctrl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 891, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.key_ctrl.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_8key_ctrl_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_8key_ctrl_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":892
 *     @key_ctrl.setter
 *     def key_ctrl(self, cimgui.bool value):
 *         self._ptr.KeyCtrl = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeyCtrl = __pyx_v_value;

  /* "imgui/core.pyx":891
 * 
 *     @key_ctrl.setter
 *     def key_ctrl(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyCtrl = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":895
 * 
 *     @property
 *     def key_shift(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyShift
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_9key_shift_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_9key_shift_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9key_shift___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_9key_shift___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":896
 *     @property
 *     def key_shift(self):
 *         return self._ptr.KeyShift             # <<<<<<<<<<<<<<
 * 
 *     @key_shift.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->KeyShift); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":895
 * 
 *     @property
 *     def key_shift(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyShift
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.key_shift.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":899
 * 
 *     @key_shift.setter
 *     def key_shift(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyShift = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_9key_shift_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_9key_shift_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.key_shift.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9key_shift_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_9key_shift_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":900
 *     @key_shift.setter
 *     def key_shift(self, cimgui.bool value):
 *         self._ptr.KeyShift = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeyShift = __pyx_v_value;

  /* "imgui/core.pyx":899
 * 
 *     @key_shift.setter
 *     def key_shift(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyShift = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":903
 * 
 *     @property
 *     def key_alt(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyAlt
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_7key_alt_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_7key_alt_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_7key_alt___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_7key_alt___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":904
 *     @property
 *     def key_alt(self):
 *         return self._ptr.KeyAlt             # <<<<<<<<<<<<<<
 * 
 *     @key_alt.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->KeyAlt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":903
 * 
 *     @property
 *     def key_alt(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeyAlt
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.key_alt.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":907
 * 
 *     @key_alt.setter
 *     def key_alt(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyAlt = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_7key_alt_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_7key_alt_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.key_alt.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_7key_alt_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_7key_alt_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":908
 *     @key_alt.setter
 *     def key_alt(self, cimgui.bool value):
 *         self._ptr.KeyAlt = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeyAlt = __pyx_v_value;

  /* "imgui/core.pyx":907
 * 
 *     @key_alt.setter
 *     def key_alt(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeyAlt = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":911
 * 
 *     @property
 *     def key_super(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeySuper
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_9key_super_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_9key_super_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9key_super___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_9key_super___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":912
 *     @property
 *     def key_super(self):
 *         return self._ptr.KeySuper             # <<<<<<<<<<<<<<
 * 
 *     @key_super.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->KeySuper); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":911
 * 
 *     @property
 *     def key_super(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.KeySuper
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.key_super.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":915
 * 
 *     @key_super.setter
 *     def key_super(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeySuper = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_5imgui_4core_3_IO_9key_super_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_5imgui_4core_3_IO_9key_super_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 915, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.key_super.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9key_super_2__set__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5imgui_4core_3_IO_9key_super_2__set__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "imgui/core.pyx":916
 *     @key_super.setter
 *     def key_super(self, cimgui.bool value):
 *         self._ptr.KeySuper = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_ptr->KeySuper = __pyx_v_value;

  /* "imgui/core.pyx":915
 * 
 *     @key_super.setter
 *     def key_super(self, cimgui.bool value):             # <<<<<<<<<<<<<<
 *         self._ptr.KeySuper = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":919
 * 
 *     @property
 *     def keys_down(self):             # <<<<<<<<<<<<<<
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_9keys_down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_9keys_down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9keys_down___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_9keys_down___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  struct __pyx_array_obj *__pyx_v_keys_down = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":923
 *         # todo: modified in place
 *         cdef cvarray keys_down = cvarray(
 *             shape=(512,),             # <<<<<<<<<<<<<<
 *             format='b',
 *             itemsize=sizeof(bool),
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_tuple__19) < 0) __PYX_ERR(0, 923, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_b) < 0) __PYX_ERR(0, 923, __pyx_L1_error)

  /* "imgui/core.pyx":925
 *             shape=(512,),
 *             format='b',
 *             itemsize=sizeof(bool),             # <<<<<<<<<<<<<<
 *             allocate_buffer=False
 *         )
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(bool))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_2) < 0) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imgui/core.pyx":926
 *             format='b',
 *             itemsize=sizeof(bool),
 *             allocate_buffer=False             # <<<<<<<<<<<<<<
 *         )
 *         keys_down.data = <char*>self._ptr.KeysDown
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(0, 923, __pyx_L1_error)

  /* "imgui/core.pyx":922
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 *         cdef cvarray keys_down = cvarray(             # <<<<<<<<<<<<<<
 *             shape=(512,),
 *             format='b',
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_keys_down = ((struct __pyx_array_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "imgui/core.pyx":928
 *             allocate_buffer=False
 *         )
 *         keys_down.data = <char*>self._ptr.KeysDown             # <<<<<<<<<<<<<<
 *         return keys_down
 * 
 */
  __pyx_v_keys_down->data = ((char *)__pyx_v_self->_ptr->KeysDown);

  /* "imgui/core.pyx":929
 *         )
 *         keys_down.data = <char*>self._ptr.KeysDown
 *         return keys_down             # <<<<<<<<<<<<<<
 * 
 *     def add_input_character(self, cimgui.ImWchar c):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_keys_down));
  __pyx_r = ((PyObject *)__pyx_v_keys_down);
  goto __pyx_L0;

  /* "imgui/core.pyx":919
 * 
 *     @property
 *     def keys_down(self):             # <<<<<<<<<<<<<<
 *         # todo: consider adding setter despite the fact that it can be
 *         # todo: modified in place
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core._IO.keys_down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_keys_down);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":931
 *         return keys_down
 * 
 *     def add_input_character(self, cimgui.ImWchar c):             # <<<<<<<<<<<<<<
 *         self._ptr.AddInputCharacter(c)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_3add_input_character(PyObject *__pyx_v_self, PyObject *__pyx_arg_c); /*proto*/
static char __pyx_doc_5imgui_4core_3_IO_2add_input_character[] = "_IO.add_input_character(self, ImWchar c)";
static PyObject *__pyx_pw_5imgui_4core_3_IO_3add_input_character(PyObject *__pyx_v_self, PyObject *__pyx_arg_c) {
  ImWchar __pyx_v_c;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_input_character (wrapper)", 0);
  assert(__pyx_arg_c); {
    __pyx_v_c = __Pyx_PyInt_As_ImWchar(__pyx_arg_c); if (unlikely((__pyx_v_c == ((ImWchar)-1)) && PyErr_Occurred())) __PYX_ERR(0, 931, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core._IO.add_input_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_2add_input_character(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((ImWchar)__pyx_v_c));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_2add_input_character(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, ImWchar __pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_input_character", 0);

  /* "imgui/core.pyx":932
 * 
 *     def add_input_character(self, cimgui.ImWchar c):
 *         self._ptr.AddInputCharacter(c)             # <<<<<<<<<<<<<<
 * 
 *     # ... mapping of output properties ...
 */
  try {
    __pyx_v_self->_ptr->AddInputCharacter(__pyx_v_c);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 932, __pyx_L1_error)
  }

  /* "imgui/core.pyx":931
 *         return keys_down
 * 
 *     def add_input_character(self, cimgui.ImWchar c):             # <<<<<<<<<<<<<<
 *         self._ptr.AddInputCharacter(c)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core._IO.add_input_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":936
 *     # ... mapping of output properties ...
 *     @property
 *     def want_capture_mouse(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantCaptureMouse
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_18want_capture_mouse_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_18want_capture_mouse_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_18want_capture_mouse___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_18want_capture_mouse___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":937
 *     @property
 *     def want_capture_mouse(self):
 *         return self._ptr.WantCaptureMouse             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->WantCaptureMouse); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":936
 *     # ... mapping of output properties ...
 *     @property
 *     def want_capture_mouse(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantCaptureMouse
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.want_capture_mouse.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":940
 * 
 *     @property
 *     def want_capture_keyboard(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantCaptureKeyboard
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_21want_capture_keyboard_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_21want_capture_keyboard_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_21want_capture_keyboard___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_21want_capture_keyboard___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":941
 *     @property
 *     def want_capture_keyboard(self):
 *         return self._ptr.WantCaptureKeyboard             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->WantCaptureKeyboard); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":940
 * 
 *     @property
 *     def want_capture_keyboard(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantCaptureKeyboard
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.want_capture_keyboard.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":944
 * 
 *     @property
 *     def want_text_input(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantTextInput
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_15want_text_input_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_15want_text_input_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_15want_text_input___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_15want_text_input___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":945
 *     @property
 *     def want_text_input(self):
 *         return self._ptr.WantTextInput             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->WantTextInput); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":944
 * 
 *     @property
 *     def want_text_input(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.WantTextInput
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.want_text_input.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":948
 * 
 *     @property
 *     def framerate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.Framerate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_9framerate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_9framerate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_9framerate___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_9framerate___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":949
 *     @property
 *     def framerate(self):
 *         return self._ptr.Framerate             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->Framerate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":948
 * 
 *     @property
 *     def framerate(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.Framerate
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.framerate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":952
 * 
 *     @property
 *     def metrics_allocs(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MetricsAllocs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_14metrics_allocs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_14metrics_allocs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_14metrics_allocs___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_14metrics_allocs___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":953
 *     @property
 *     def metrics_allocs(self):
 *         return self._ptr.MetricsAllocs             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->MetricsAllocs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":952
 * 
 *     @property
 *     def metrics_allocs(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MetricsAllocs
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.metrics_allocs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":956
 * 
 *     @property
 *     def metrics_render_vertices(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MetricsRenderVertices
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_23metrics_render_vertices_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_23metrics_render_vertices_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_23metrics_render_vertices___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_23metrics_render_vertices___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":957
 *     @property
 *     def metrics_render_vertices(self):
 *         return self._ptr.MetricsRenderVertices             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->MetricsRenderVertices); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":956
 * 
 *     @property
 *     def metrics_render_vertices(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MetricsRenderVertices
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.metrics_render_vertices.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":960
 * 
 *     @property
 *     def metrics_active_windows(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MetricsActiveWindows
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_22metrics_active_windows_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5imgui_4core_3_IO_22metrics_active_windows_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_22metrics_active_windows___get__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_22metrics_active_windows___get__(struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "imgui/core.pyx":961
 *     @property
 *     def metrics_active_windows(self):
 *         return self._ptr.MetricsActiveWindows             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ptr->MetricsActiveWindows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":960
 * 
 *     @property
 *     def metrics_active_windows(self):             # <<<<<<<<<<<<<<
 *         return self._ptr.MetricsActiveWindows
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.metrics_active_windows.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":964
 * 
 *     @staticmethod
 *     cdef void _io_render_callback(cimgui.ImDrawData* data) except +:             # <<<<<<<<<<<<<<
 *         io = get_io()
 * 
 */

static void __pyx_f_5imgui_4core_3_IO__io_render_callback(ImDrawData *__pyx_v_data) {
  PyObject *__pyx_v_io = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("_io_render_callback", 0);

  /* "imgui/core.pyx":965
 *     @staticmethod
 *     cdef void _io_render_callback(cimgui.ImDrawData* data) except +:
 *         io = get_io()             # <<<<<<<<<<<<<<
 * 
 *         if io.render_callback:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_get_io); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 965, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_io = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":967
 *         io = get_io()
 * 
 *         if io.render_callback:             # <<<<<<<<<<<<<<
 *             io.render_callback(_DrawData.from_ptr(data))
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_io, __pyx_n_s_render_callback); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "imgui/core.pyx":968
 * 
 *         if io.render_callback:
 *             io.render_callback(_DrawData.from_ptr(data))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_io, __pyx_n_s_render_callback); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_f_5imgui_4core_9_DrawData_from_ptr(__pyx_v_data); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 968, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 968, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 968, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 968, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 968, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "imgui/core.pyx":967
 *         io = get_io()
 * 
 *         if io.render_callback:             # <<<<<<<<<<<<<<
 *             io.render_callback(_DrawData.from_ptr(data))
 * 
 */
  }

  /* "imgui/core.pyx":964
 * 
 *     @staticmethod
 *     cdef void _io_render_callback(cimgui.ImDrawData* data) except +:             # <<<<<<<<<<<<<<
 *         io = get_io()
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core._IO._io_render_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_io);
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_3_IO_4__reduce_cython__[] = "_IO.__reduce_cython__(self)";
static PyObject *__pyx_pw_5imgui_4core_3_IO_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_4__reduce_cython__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__IO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3_IO_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5imgui_4core_3_IO_6__setstate_cython__[] = "_IO.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5imgui_4core_3_IO_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_3_IO_6__setstate_cython__(((struct __pyx_obj_5imgui_4core__IO *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_3_IO_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5imgui_4core__IO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core._IO.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":972
 * 
 * _io = None
 * def get_io():             # <<<<<<<<<<<<<<
 *     global _io
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_1get_io(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_get_io[] = "get_io()";
static PyMethodDef __pyx_mdef_5imgui_4core_1get_io = {"get_io", (PyCFunction)__pyx_pw_5imgui_4core_1get_io, METH_NOARGS, __pyx_doc_5imgui_4core_get_io};
static PyObject *__pyx_pw_5imgui_4core_1get_io(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_io (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_get_io(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_get_io(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("get_io", 0);

  /* "imgui/core.pyx":975
 *     global _io
 * 
 *     if not _io:             # <<<<<<<<<<<<<<
 *         _io = _IO()
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_io); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "imgui/core.pyx":976
 * 
 *     if not _io:
 *         _io = _IO()             # <<<<<<<<<<<<<<
 * 
 *     return _io
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5imgui_4core__IO), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_io, __pyx_t_1) < 0) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "imgui/core.pyx":975
 *     global _io
 * 
 *     if not _io:             # <<<<<<<<<<<<<<
 *         _io = _IO()
 * 
 */
  }

  /* "imgui/core.pyx":978
 *         _io = _IO()
 * 
 *     return _io             # <<<<<<<<<<<<<<
 * 
 * def get_style():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_io); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":972
 * 
 * _io = None
 * def get_io():             # <<<<<<<<<<<<<<
 *     global _io
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.get_io", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":980
 *     return _io
 * 
 * def get_style():             # <<<<<<<<<<<<<<
 *     raise NotImplementedError
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_3get_style(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_2get_style[] = "get_style()";
static PyMethodDef __pyx_mdef_5imgui_4core_3get_style = {"get_style", (PyCFunction)__pyx_pw_5imgui_4core_3get_style, METH_NOARGS, __pyx_doc_5imgui_4core_2get_style};
static PyObject *__pyx_pw_5imgui_4core_3get_style(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_style (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_2get_style(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_2get_style(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_style", 0);

  /* "imgui/core.pyx":981
 * 
 * def get_style():
 *     raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 981, __pyx_L1_error)

  /* "imgui/core.pyx":980
 *     return _io
 * 
 * def get_style():             # <<<<<<<<<<<<<<
 *     raise NotImplementedError
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.get_style", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":984
 * 
 * 
 * def new_frame():             # <<<<<<<<<<<<<<
 *     """Start a new frame.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_5new_frame(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_4new_frame[] = "new_frame()\nStart a new frame.\n\n    After calling this you can submit any command from this point until\n    next :any:`new_frame()` or :any:`render()`.\n\n    .. wraps::\n        void NewFrame()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_5new_frame = {"new_frame", (PyCFunction)__pyx_pw_5imgui_4core_5new_frame, METH_NOARGS, __pyx_doc_5imgui_4core_4new_frame};
static PyObject *__pyx_pw_5imgui_4core_5new_frame(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_frame (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_4new_frame(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_4new_frame(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_frame", 0);

  /* "imgui/core.pyx":993
 *         void NewFrame()
 *     """
 *     cimgui.NewFrame()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::NewFrame();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 993, __pyx_L1_error)
  }

  /* "imgui/core.pyx":984
 * 
 * 
 * def new_frame():             # <<<<<<<<<<<<<<
 *     """Start a new frame.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.new_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":996
 * 
 * 
 * def render():             # <<<<<<<<<<<<<<
 *     """Finalize frame, set rendering data, and run render callback (if set).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_7render(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_6render[] = "render()\nFinalize frame, set rendering data, and run render callback (if set).\n\n    .. wraps::\n        void Render()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_7render = {"render", (PyCFunction)__pyx_pw_5imgui_4core_7render, METH_NOARGS, __pyx_doc_5imgui_4core_6render};
static PyObject *__pyx_pw_5imgui_4core_7render(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("render (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_6render(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_6render(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("render", 0);

  /* "imgui/core.pyx":1002
 *         void Render()
 *     """
 *     cimgui.Render()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Render();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1002, __pyx_L1_error)
  }

  /* "imgui/core.pyx":996
 * 
 * 
 * def render():             # <<<<<<<<<<<<<<
 *     """Finalize frame, set rendering data, and run render callback (if set).
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.render", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1005
 * 
 * 
 * def shutdown():             # <<<<<<<<<<<<<<
 *     """Shutdown ImGui context.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_9shutdown(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_8shutdown[] = "shutdown()\nShutdown ImGui context.\n\n    .. wraps::\n        Shutdown\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_9shutdown = {"shutdown", (PyCFunction)__pyx_pw_5imgui_4core_9shutdown, METH_NOARGS, __pyx_doc_5imgui_4core_8shutdown};
static PyObject *__pyx_pw_5imgui_4core_9shutdown(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shutdown (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_8shutdown(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_8shutdown(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shutdown", 0);

  /* "imgui/core.pyx":1011
 *         Shutdown
 *     """
 *     cimgui.Shutdown()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Shutdown();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1011, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1005
 * 
 * 
 * def shutdown():             # <<<<<<<<<<<<<<
 *     """Shutdown ImGui context.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.shutdown", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1014
 * 
 * 
 * def show_user_guide():             # <<<<<<<<<<<<<<
 *     """Show ImGui user guide editor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_11show_user_guide(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_10show_user_guide[] = "show_user_guide()\nShow ImGui user guide editor.\n\n    .. visual-example::\n        :width: 700\n        :height: 500\n        :auto_layout:\n\n        imgui.begin(\"Example: user guide\")\n        imgui.show_user_guide()\n        imgui.end()\n\n\n    .. wraps::\n        void ShowUserGuide()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_11show_user_guide = {"show_user_guide", (PyCFunction)__pyx_pw_5imgui_4core_11show_user_guide, METH_NOARGS, __pyx_doc_5imgui_4core_10show_user_guide};
static PyObject *__pyx_pw_5imgui_4core_11show_user_guide(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_user_guide (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_10show_user_guide(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_10show_user_guide(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_user_guide", 0);

  /* "imgui/core.pyx":1030
 *         void ShowUserGuide()
 *     """
 *     cimgui.ShowUserGuide()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::ShowUserGuide();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1030, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1014
 * 
 * 
 * def show_user_guide():             # <<<<<<<<<<<<<<
 *     """Show ImGui user guide editor.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.show_user_guide", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1033
 * 
 * 
 * def show_style_editor(GuiStyle style=None):             # <<<<<<<<<<<<<<
 *     """Show ImGui style editor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_13show_style_editor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_12show_style_editor[] = "show_style_editor(GuiStyle style=None)\nShow ImGui style editor.\n\n    .. visual-example::\n        :width: 300\n        :height: 300\n        :auto_layout:\n\n        imgui.begin(\"Example: my style editor\")\n        imgui.show_style_editor()\n        imgui.end()\n\n    Args:\n        style (GuiStyle): style editor state container.\n\n    .. wraps::\n        void ShowStyleEditor(ImGuiStyle* ref = NULL)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_13show_style_editor = {"show_style_editor", (PyCFunction)__pyx_pw_5imgui_4core_13show_style_editor, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_12show_style_editor};
static PyObject *__pyx_pw_5imgui_4core_13show_style_editor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_style = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_style_editor (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_style,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_5imgui_4core_GuiStyle *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_style);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "show_style_editor") < 0)) __PYX_ERR(0, 1033, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_style = ((struct __pyx_obj_5imgui_4core_GuiStyle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("show_style_editor", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1033, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.show_style_editor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_style), __pyx_ptype_5imgui_4core_GuiStyle, 1, "style", 0))) __PYX_ERR(0, 1033, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_12show_style_editor(__pyx_self, __pyx_v_style);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_12show_style_editor(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core_GuiStyle *__pyx_v_style) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("show_style_editor", 0);

  /* "imgui/core.pyx":1051
 *         void ShowStyleEditor(ImGuiStyle* ref = NULL)
 *     """
 *     if style:             # <<<<<<<<<<<<<<
 *         cimgui.ShowStyleEditor(&style.ref)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_style)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1051, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "imgui/core.pyx":1052
 *     """
 *     if style:
 *         cimgui.ShowStyleEditor(&style.ref)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.ShowStyleEditor()
 */
    try {
      ImGui::ShowStyleEditor((&__pyx_v_style->ref));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1052, __pyx_L1_error)
    }

    /* "imgui/core.pyx":1051
 *         void ShowStyleEditor(ImGuiStyle* ref = NULL)
 *     """
 *     if style:             # <<<<<<<<<<<<<<
 *         cimgui.ShowStyleEditor(&style.ref)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":1054
 *         cimgui.ShowStyleEditor(&style.ref)
 *     else:
 *         cimgui.ShowStyleEditor()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    try {
      ImGui::ShowStyleEditor();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1054, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "imgui/core.pyx":1033
 * 
 * 
 * def show_style_editor(GuiStyle style=None):             # <<<<<<<<<<<<<<
 *     """Show ImGui style editor.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.show_style_editor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1057
 * 
 * 
 * def show_test_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui test window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_15show_test_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_14show_test_window[] = "show_test_window(closable=False)\nShow ImGui test window.\n\n    .. visual-example::\n        :width: 700\n        :height: 600\n        :auto_layout:\n\n        imgui.show_test_window()\n\n    Args:\n        closable (bool): define if window is closable.\n\n    Returns:\n        bool: True if window is not closed (False trigerred by close button).\n\n    .. wraps::\n        void ShowTestWindow(bool* p_open = NULL)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_15show_test_window = {"show_test_window", (PyCFunction)__pyx_pw_5imgui_4core_15show_test_window, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_14show_test_window};
static PyObject *__pyx_pw_5imgui_4core_15show_test_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_closable = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_test_window (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_closable,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_closable);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "show_test_window") < 0)) __PYX_ERR(0, 1057, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_closable = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("show_test_window", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1057, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.show_test_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_14show_test_window(__pyx_self, __pyx_v_closable);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_14show_test_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_closable) {
  bool __pyx_v_opened;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("show_test_window", 0);

  /* "imgui/core.pyx":1076
 *         void ShowTestWindow(bool* p_open = NULL)
 *     """
 *     cdef cimgui.bool opened = True             # <<<<<<<<<<<<<<
 * 
 *     if closable:
 */
  __pyx_v_opened = 1;

  /* "imgui/core.pyx":1078
 *     cdef cimgui.bool opened = True
 * 
 *     if closable:             # <<<<<<<<<<<<<<
 *         cimgui.ShowTestWindow(&opened)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_closable); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1078, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "imgui/core.pyx":1079
 * 
 *     if closable:
 *         cimgui.ShowTestWindow(&opened)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.ShowTestWindow()
 */
    try {
      ImGui::ShowTestWindow((&__pyx_v_opened));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1079, __pyx_L1_error)
    }

    /* "imgui/core.pyx":1078
 *     cdef cimgui.bool opened = True
 * 
 *     if closable:             # <<<<<<<<<<<<<<
 *         cimgui.ShowTestWindow(&opened)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":1081
 *         cimgui.ShowTestWindow(&opened)
 *     else:
 *         cimgui.ShowTestWindow()             # <<<<<<<<<<<<<<
 * 
 *     return opened
 */
  /*else*/ {
    try {
      ImGui::ShowTestWindow();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1081, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "imgui/core.pyx":1083
 *         cimgui.ShowTestWindow()
 * 
 *     return opened             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_opened); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1057
 * 
 * 
 * def show_test_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui test window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.show_test_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1086
 * 
 * 
 * def show_metrics_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui metrics window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_17show_metrics_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_16show_metrics_window[] = "show_metrics_window(closable=False)\nShow ImGui metrics window.\n\n    .. visual-example::\n        :width: 700\n        :height: 200\n        :auto_layout:\n\n        imgui.show_metrics_window()\n\n    Args:\n        closable (bool): define if window is closable.\n\n    Returns:\n        bool: True if window is not closed (False trigerred by close button).\n\n    .. wraps::\n        void ShowMetricsWindow(bool* p_open = NULL)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_17show_metrics_window = {"show_metrics_window", (PyCFunction)__pyx_pw_5imgui_4core_17show_metrics_window, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_16show_metrics_window};
static PyObject *__pyx_pw_5imgui_4core_17show_metrics_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_closable = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_metrics_window (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_closable,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_closable);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "show_metrics_window") < 0)) __PYX_ERR(0, 1086, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_closable = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("show_metrics_window", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1086, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.show_metrics_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_16show_metrics_window(__pyx_self, __pyx_v_closable);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_16show_metrics_window(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_closable) {
  bool __pyx_v_opened;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("show_metrics_window", 0);

  /* "imgui/core.pyx":1105
 *         void ShowMetricsWindow(bool* p_open = NULL)
 *     """
 *     cdef cimgui.bool opened = True             # <<<<<<<<<<<<<<
 * 
 *     if closable:
 */
  __pyx_v_opened = 1;

  /* "imgui/core.pyx":1107
 *     cdef cimgui.bool opened = True
 * 
 *     if closable:             # <<<<<<<<<<<<<<
 *         cimgui.ShowMetricsWindow(&opened)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_closable); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1107, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "imgui/core.pyx":1108
 * 
 *     if closable:
 *         cimgui.ShowMetricsWindow(&opened)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.ShowMetricsWindow()
 */
    try {
      ImGui::ShowMetricsWindow((&__pyx_v_opened));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1108, __pyx_L1_error)
    }

    /* "imgui/core.pyx":1107
 *     cdef cimgui.bool opened = True
 * 
 *     if closable:             # <<<<<<<<<<<<<<
 *         cimgui.ShowMetricsWindow(&opened)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":1110
 *         cimgui.ShowMetricsWindow(&opened)
 *     else:
 *         cimgui.ShowMetricsWindow()             # <<<<<<<<<<<<<<
 * 
 *     return opened
 */
  /*else*/ {
    try {
      ImGui::ShowMetricsWindow();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1110, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "imgui/core.pyx":1112
 *         cimgui.ShowMetricsWindow()
 * 
 *     return opened             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_opened); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1086
 * 
 * 
 * def show_metrics_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui metrics window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.show_metrics_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1115
 * 
 * 
 * def begin(str name, closable=False, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin a window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_19begin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_18begin[] = "begin(str name, closable=False, ImGuiWindowFlags flags=0)\nBegin a window.\n\n    .. visual-example::\n        :auto_layout:\n\n        imgui.begin(\"Example: empty window\")\n        imgui.end()\n\n    Args:\n        closable (bool): define if window is closable.\n        flags: Window flags. See:\n            :ref:`list of available flags <window-flag-options>`.\n\n    Returns:\n        tuple: ``(expanded, opened)`` tuple of bools. If window is collapsed\n        ``expanded==True``. The value of ``opened`` is always True for\n        non-closable and open windows but changes state to False on close\n        button click for closable windows.\n\n    .. wraps::\n        Begin(\n            const char* name,\n            bool* p_open = NULL,\n            ImGuiWindowFlags flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_19begin = {"begin", (PyCFunction)__pyx_pw_5imgui_4core_19begin, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_18begin};
static PyObject *__pyx_pw_5imgui_4core_19begin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_closable = 0;
  ImGuiWindowFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name_2,&__pyx_n_s_closable,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_closable);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin") < 0)) __PYX_ERR(0, 1115, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = ((PyObject*)values[0]);
    __pyx_v_closable = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[2]); if (unlikely((__pyx_v_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1115, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiWindowFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1115, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) __PYX_ERR(0, 1115, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_18begin(__pyx_self, __pyx_v_name, __pyx_v_closable, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_18begin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_closable, ImGuiWindowFlags __pyx_v_flags) {
  bool __pyx_v_opened;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool *__pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("begin", 0);

  /* "imgui/core.pyx":1142
 *         )
 *     """
 *     cdef cimgui.bool opened = True             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.Begin(_bytes(name), &opened if closable else NULL, flags), opened
 */
  __pyx_v_opened = 1;

  /* "imgui/core.pyx":1144
 *     cdef cimgui.bool opened = True
 * 
 *     return cimgui.Begin(_bytes(name), &opened if closable else NULL, flags), opened             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 1144, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_closable); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (__pyx_t_4) {
    __pyx_t_3 = (&__pyx_v_opened);
  } else {
    __pyx_t_3 = NULL;
  }
  try {
    __pyx_t_5 = ImGui::Begin(__pyx_t_2, __pyx_t_3, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1144, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_opened); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1115
 * 
 * 
 * def begin(str name, closable=False, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin a window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("imgui.core.begin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1147
 * 
 * 
 * def get_draw_data():             # <<<<<<<<<<<<<<
 *     """Get draw data.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_21get_draw_data(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_20get_draw_data[] = "get_draw_data()\nGet draw data.\n\n    Draw data value is same as passed to your ``io.render_callback()``\n    function. It is valid after :any:`render()` and until the next call\n    to :any:`new_frame()`\n\n    Returns:\n        _DrawData: draw data for all draw calls required to display gui\n\n    .. wraps::\n        ImDrawData* GetDrawData()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_21get_draw_data = {"get_draw_data", (PyCFunction)__pyx_pw_5imgui_4core_21get_draw_data, METH_NOARGS, __pyx_doc_5imgui_4core_20get_draw_data};
static PyObject *__pyx_pw_5imgui_4core_21get_draw_data(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_draw_data (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_20get_draw_data(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_20get_draw_data(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImDrawData *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_draw_data", 0);

  /* "imgui/core.pyx":1160
 *         ImDrawData* GetDrawData()
 *     """
 *     return _DrawData.from_ptr(cimgui.GetDrawData())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetDrawData();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1160, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core_9_DrawData_from_ptr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1147
 * 
 * 
 * def get_draw_data():             # <<<<<<<<<<<<<<
 *     """Get draw data.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_draw_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1163
 * 
 * 
 * def end():             # <<<<<<<<<<<<<<
 *     """End a window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_23end(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_22end[] = "end()\nEnd a window.\n\n    This finishes appending to current window, and pops it off the window\n    stack. See: :any:`begin()`.\n\n    .. wraps::\n        void End()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_23end = {"end", (PyCFunction)__pyx_pw_5imgui_4core_23end, METH_NOARGS, __pyx_doc_5imgui_4core_22end};
static PyObject *__pyx_pw_5imgui_4core_23end(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_22end(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_22end(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end", 0);

  /* "imgui/core.pyx":1172
 *         void End()
 *     """
 *     cimgui.End()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::End();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1172, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1163
 * 
 * 
 * def end():             # <<<<<<<<<<<<<<
 *     """End a window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1180
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id name, float width=0, float height=0, bool border=False,
 *     cimgui.ImGuiWindowFlags flags=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_25begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_24begin_child[] = "begin_child(signatures, args, kwargs, defaults)\nBegin a scrolling region.\n\n    **Note:** sizing of child region allows for three modes:\n    * ``0.0`` - use remaining window size\n    * ``>0.0`` - fixed size\n    * ``<0.0`` - use remaining window size minus abs(size)\n\n    .. visual-example::\n        :width: 200\n        :height: 200\n        :auto_layout:\n\n        imgui.begin(\"Example: child region\")\n\n        imgui.begin_child(\"region\", 150, -50, border=True)\n        imgui.text(\"inside region\")\n        imgui.end_child()\n\n        imgui.text(\"outside region\")\n        imgui.end()\n\n    Args:\n        name (str or int): Child region identifier.\n        width (float): Region width. See note about sizing.\n        height (float): Region height. See note about sizing.\n        border (bool): True if should display border. Defaults to False.\n        flags: Window flags. See:\n            :ref:`list of available flags <window-flag-options>`.\n\n    Returns:\n        bool: True if region is visible\n\n    .. wraps::\n        bool BeginChild(\n            const char* str_id,\n            const ImVec2& size = ImVec2(0,0),\n            bool border = false,\n            ImGuiWindowFlags extra_flags = 0\n        )\n\n        bool BeginChild(\n            ImGuiID id,\n            const ImVec2& size = ImVec2(0,0),\n            bool border = false,\n            ImGuiWindowFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_25begin_child = {"begin_child", (PyCFunction)__pyx_pw_5imgui_4core_25begin_child, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_24begin_child};
static PyObject *__pyx_pw_5imgui_4core_25begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_signatures = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED PyObject *__pyx_v_defaults = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_fused_cpdef (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_signatures,&__pyx_n_s_args,&__pyx_n_s_kwargs,&__pyx_n_s_defaults,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = __pyx_k__22;
    values[2] = __pyx_k__23;
    values[3] = __pyx_k__24;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_signatures)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_args);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kwargs);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_defaults);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_fused_cpdef") < 0)) __PYX_ERR(0, 1180, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_signatures = values[0];
    __pyx_v_args = values[1];
    __pyx_v_kwargs = values[2];
    __pyx_v_defaults = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1180, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_24begin_child(__pyx_self, __pyx_v_signatures, __pyx_v_args, __pyx_v_kwargs, __pyx_v_defaults);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_24begin_child(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults) {
  PyObject *__pyx_v_dest_sig = NULL;
  Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED PyTypeObject *__pyx_v_ndarray = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_v_itemsize;
  CYTHON_UNUSED int __pyx_v_arg_is_pythran_compatible;
  PyObject *__pyx_v_arg = NULL;
  PyObject *__pyx_v_candidates = NULL;
  PyObject *__pyx_v_sig = NULL;
  int __pyx_v_match_found;
  PyObject *__pyx_v_src_sig = NULL;
  PyObject *__pyx_v_dst_type = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  __Pyx_RefNannySetupContext("begin_child", 0);
  __Pyx_INCREF(__pyx_v_kwargs);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyList_SET_ITEM(__pyx_t_1, 0, Py_None);
  __pyx_v_dest_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_kwargs != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_4) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_kwargs, Py_None);
  }
  __pyx_t_1 = ((PyObject *)__Pyx_ImportNumPyArrayTypeIfAvailable()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ndarray = ((PyTypeObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_itemsize = -1L;
  __pyx_v_arg_is_pythran_compatible = 0;
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1180, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __pyx_t_2 = ((0 < __pyx_t_5) != 0);
  if (__pyx_t_2) {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1180, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(((PyObject*)__pyx_v_args), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  __pyx_t_3 = (__pyx_v_kwargs != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1180, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_name_2, ((PyObject*)__pyx_v_kwargs), Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_2) {
    if (unlikely(__pyx_v_kwargs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1180, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_kwargs), __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  /*else*/ {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1180, __pyx_L1_error)
    }
    __pyx_t_5 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_int_1);
    __Pyx_INCREF(__pyx_kp_s__25);
    __Pyx_GIVEREF(__pyx_kp_s__25);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_kp_s__25);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Expected_at_least_d_argument_s_g, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1180, __pyx_L1_error)
  }
  __pyx_L6:;
  while (1) {
    __pyx_t_3 = PyInt_Check(__pyx_v_arg); 
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_4 = PyLong_Check(__pyx_v_arg); 
    __pyx_t_3 = (__pyx_t_4 != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L12_bool_binop_done:;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
      if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_ImGuiID, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0)) __PYX_ERR(0, 1180, __pyx_L1_error)
      goto __pyx_L10_break;
    }
    __pyx_t_3 = PyString_Check(__pyx_v_arg); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
      if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_str, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0)) __PYX_ERR(0, 1180, __pyx_L1_error)
      goto __pyx_L10_break;
    }
    if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, Py_None, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0)) __PYX_ERR(0, 1180, __pyx_L1_error)
    goto __pyx_L10_break;
  }
  __pyx_L10_break:;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_candidates = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_signatures == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1180, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_dict_iterator(((PyObject*)__pyx_v_signatures), 1, ((PyObject *)NULL), (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_6;
  __pyx_t_6 = 0;
  while (1) {
    __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_7, &__pyx_t_5, &__pyx_t_6, NULL, NULL, __pyx_t_8);
    if (unlikely(__pyx_t_9 == 0)) break;
    if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_sig, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_v_match_found = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_sig, __pyx_n_s_strip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_src_sig, __pyx_t_10);
    __pyx_t_10 = 0;
    __pyx_t_11 = PyList_GET_SIZE(__pyx_v_dest_sig); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 1180, __pyx_L1_error)
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_i = __pyx_t_12;
      __pyx_t_10 = __Pyx_GetItemInt_List(__pyx_v_dest_sig, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_XDECREF_SET(__pyx_v_dst_type, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_2 = (__pyx_v_dst_type != Py_None);
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_src_sig, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1180, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_6 = PyObject_RichCompare(__pyx_t_10, __pyx_v_dst_type, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1180, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1180, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (__pyx_t_3) {
          __pyx_v_match_found = 1;
          goto __pyx_L20;
        }
        /*else*/ {
          __pyx_v_match_found = 0;
          goto __pyx_L18_break;
        }
        __pyx_L20:;
      }
    }
    __pyx_L18_break:;
    __pyx_t_3 = (__pyx_v_match_found != 0);
    if (__pyx_t_3) {
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_candidates, __pyx_v_sig); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 1180, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_candidates != Py_None) && (PyList_GET_SIZE(__pyx_v_candidates) != 0);
  __pyx_t_2 = ((!__pyx_t_3) != 0);
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1180, __pyx_L1_error)
  }
  __pyx_t_7 = PyList_GET_SIZE(__pyx_v_candidates); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_7 > 1) != 0);
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1180, __pyx_L1_error)
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_signatures == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1180, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_candidates, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_signatures), __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("imgui.core.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dest_sig);
  __Pyx_XDECREF(__pyx_v_ndarray);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_candidates);
  __Pyx_XDECREF(__pyx_v_sig);
  __Pyx_XDECREF(__pyx_v_src_sig);
  __Pyx_XDECREF(__pyx_v_dst_type);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_337__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_border); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_ImGuiWindowFlags(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_4, 1, Py_None);
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_0__pyx_pw_5imgui_4core_328begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_0__pyx_mdef_5imgui_4core_328begin_child = {"__pyx_fuse_0begin_child", (PyCFunction)__pyx_fuse_0__pyx_pw_5imgui_4core_328begin_child, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_24begin_child};
static PyObject *__pyx_fuse_0__pyx_pw_5imgui_4core_328begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  bool __pyx_v_border;
  ImGuiWindowFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_child (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name_2,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_border,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    __pyx_defaults2 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_border);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_child") < 0)) __PYX_ERR(0, 1180, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1181, __pyx_L3_error)
    } else {
      __pyx_v_width = __pyx_dynamic_args->__pyx_arg_width;
    }
    if (values[2]) {
      __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1181, __pyx_L3_error)
    } else {
      __pyx_v_height = __pyx_dynamic_args->__pyx_arg_height;
    }
    if (values[3]) {
      __pyx_v_border = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_border == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1181, __pyx_L3_error)
    } else {
      __pyx_v_border = __pyx_dynamic_args->__pyx_arg_border;
    }
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[4]); if (unlikely((__pyx_v_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1182, __pyx_L3_error)
    } else {
      __pyx_v_flags = __pyx_dynamic_args->__pyx_arg_flags;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_child", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1180, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) __PYX_ERR(0, 1181, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_327begin_child(__pyx_self, __pyx_v_name, __pyx_v_width, __pyx_v_height, __pyx_v_border, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_327begin_child(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, float __pyx_v_width, float __pyx_v_height, bool __pyx_v_border, ImGuiWindowFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImVec2 __pyx_t_3;
  bool __pyx_t_4;
  __Pyx_RefNannySetupContext("__pyx_fuse_0begin_child", 0);

  /* "imgui/core.pyx":1233
 *     # note: we do not take advantage of C++ function overloading
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(             # <<<<<<<<<<<<<<
 *         _bytes(name), _cast_args_ImVec2(width, height), border, flags
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":1234
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(
 *         _bytes(name), _cast_args_ImVec2(width, height), border, flags             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 1234, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1234, __pyx_L1_error)

  /* "imgui/core.pyx":1233
 *     # note: we do not take advantage of C++ function overloading
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(             # <<<<<<<<<<<<<<
 *         _bytes(name), _cast_args_ImVec2(width, height), border, flags
 *     )
 */
  try {
    __pyx_t_4 = ImGui::BeginChild(__pyx_t_2, __pyx_t_3, __pyx_v_border, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1233, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1180
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id name, float width=0, float height=0, bool border=False,
 *     cimgui.ImGuiWindowFlags flags=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.begin_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_339__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_border); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_ImGuiWindowFlags(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_4, 1, Py_None);
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_1__pyx_pw_5imgui_4core_330begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_1__pyx_mdef_5imgui_4core_330begin_child = {"__pyx_fuse_1begin_child", (PyCFunction)__pyx_fuse_1__pyx_pw_5imgui_4core_330begin_child, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_24begin_child};
static PyObject *__pyx_fuse_1__pyx_pw_5imgui_4core_330begin_child(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiID __pyx_v_name;
  float __pyx_v_width;
  float __pyx_v_height;
  bool __pyx_v_border;
  ImGuiWindowFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_child (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name_2,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_border,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    __pyx_defaults3 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_border);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_child") < 0)) __PYX_ERR(0, 1180, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = __Pyx_PyInt_As_ImGuiID(values[0]); if (unlikely((__pyx_v_name == ((ImGuiID)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1181, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1181, __pyx_L3_error)
    } else {
      __pyx_v_width = __pyx_dynamic_args->__pyx_arg_width;
    }
    if (values[2]) {
      __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1181, __pyx_L3_error)
    } else {
      __pyx_v_height = __pyx_dynamic_args->__pyx_arg_height;
    }
    if (values[3]) {
      __pyx_v_border = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_border == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1181, __pyx_L3_error)
    } else {
      __pyx_v_border = __pyx_dynamic_args->__pyx_arg_border;
    }
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[4]); if (unlikely((__pyx_v_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1182, __pyx_L3_error)
    } else {
      __pyx_v_flags = __pyx_dynamic_args->__pyx_arg_flags;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_child", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1180, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_329begin_child(__pyx_self, __pyx_v_name, __pyx_v_width, __pyx_v_height, __pyx_v_border, __pyx_v_flags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_329begin_child(CYTHON_UNUSED PyObject *__pyx_self, ImGuiID __pyx_v_name, float __pyx_v_width, float __pyx_v_height, bool __pyx_v_border, ImGuiWindowFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  ImVec2 __pyx_t_4;
  bool __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_fuse_1begin_child", 0);

  /* "imgui/core.pyx":1233
 *     # note: we do not take advantage of C++ function overloading
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(             # <<<<<<<<<<<<<<
 *         _bytes(name), _cast_args_ImVec2(width, height), border, flags
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":1234
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(
 *         _bytes(name), _cast_args_ImVec2(width, height), border, flags             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiID(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1234, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 1234, __pyx_L1_error)
  __pyx_t_4 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1234, __pyx_L1_error)

  /* "imgui/core.pyx":1233
 *     # note: we do not take advantage of C++ function overloading
 *     #       in order to take adventage of Python keyword arguments
 *     return cimgui.BeginChild(             # <<<<<<<<<<<<<<
 *         _bytes(name), _cast_args_ImVec2(width, height), border, flags
 *     )
 */
  try {
    __pyx_t_5 = ImGui::BeginChild(__pyx_t_3, __pyx_t_4, __pyx_v_border, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1233, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1180
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id name, float width=0, float height=0, bool border=False,
 *     cimgui.ImGuiWindowFlags flags=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.begin_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1237
 *     )
 * 
 * def end_child():             # <<<<<<<<<<<<<<
 *     """End scrolling region.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_27end_child(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_26end_child[] = "end_child()\nEnd scrolling region.\n\n    .. wraps::\n        void EndChild()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_27end_child = {"end_child", (PyCFunction)__pyx_pw_5imgui_4core_27end_child, METH_NOARGS, __pyx_doc_5imgui_4core_26end_child};
static PyObject *__pyx_pw_5imgui_4core_27end_child(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_child (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_26end_child(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_26end_child(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_child", 0);

  /* "imgui/core.pyx":1243
 *         void EndChild()
 *     """
 *     cimgui.EndChild()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndChild();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1243, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1237
 *     )
 * 
 * def end_child():             # <<<<<<<<<<<<<<
 *     """End scrolling region.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1246
 * 
 * 
 * def get_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get current content boundaries in window coordinates.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_29get_content_region_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_28get_content_region_max[] = "get_content_region_max()\nGet current content boundaries in window coordinates.\n\n    Typically window boundaries include scrolling, or current\n    column boundaries.\n\n    Returns:\n        Vec2: content boundaries two-tuple ``(width, height)``\n\n    .. wraps::\n        ImVec2 GetContentRegionMax()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_29get_content_region_max = {"get_content_region_max", (PyCFunction)__pyx_pw_5imgui_4core_29get_content_region_max, METH_NOARGS, __pyx_doc_5imgui_4core_28get_content_region_max};
static PyObject *__pyx_pw_5imgui_4core_29get_content_region_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_content_region_max (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_28get_content_region_max(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_28get_content_region_max(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_content_region_max", 0);

  /* "imgui/core.pyx":1258
 *         ImVec2 GetContentRegionMax()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetContentRegionMax())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetContentRegionMax();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1258, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1246
 * 
 * 
 * def get_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get current content boundaries in window coordinates.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_content_region_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1261
 * 
 * 
 * def get_content_region_available():             # <<<<<<<<<<<<<<
 *     """Get available content region.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_31get_content_region_available(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_30get_content_region_available[] = "get_content_region_available()\nGet available content region.\n\n    It is shortcut for:\n\n    .. code-block: python\n        imgui.get_content_region_max() - imgui.get_cursor_position()\n\n    Returns:\n        Vec2: available content region size two-tuple ``(width, height)``\n\n    .. wraps::\n        ImVec2 GetContentRegionMax()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_31get_content_region_available = {"get_content_region_available", (PyCFunction)__pyx_pw_5imgui_4core_31get_content_region_available, METH_NOARGS, __pyx_doc_5imgui_4core_30get_content_region_available};
static PyObject *__pyx_pw_5imgui_4core_31get_content_region_available(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_content_region_available (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_30get_content_region_available(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_30get_content_region_available(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_content_region_available", 0);

  /* "imgui/core.pyx":1275
 *         ImVec2 GetContentRegionMax()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetContentRegionAvail())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetContentRegionAvail();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1275, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1261
 * 
 * 
 * def get_content_region_available():             # <<<<<<<<<<<<<<
 *     """Get available content region.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_content_region_available", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1278
 * 
 * 
 * def get_content_region_available_width():             # <<<<<<<<<<<<<<
 *     """Get available content region width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_33get_content_region_available_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_32get_content_region_available_width[] = "get_content_region_available_width()\nGet available content region width.\n\n    Returns:\n        float: available content region width.\n\n    .. wraps::\n        float GetContentRegionAvailWidth()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_33get_content_region_available_width = {"get_content_region_available_width", (PyCFunction)__pyx_pw_5imgui_4core_33get_content_region_available_width, METH_NOARGS, __pyx_doc_5imgui_4core_32get_content_region_available_width};
static PyObject *__pyx_pw_5imgui_4core_33get_content_region_available_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_content_region_available_width (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_32get_content_region_available_width(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_32get_content_region_available_width(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_content_region_available_width", 0);

  /* "imgui/core.pyx":1287
 *         float GetContentRegionAvailWidth()
 *     """
 *     return cimgui.GetContentRegionAvailWidth()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetContentRegionAvailWidth();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1287, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1278
 * 
 * 
 * def get_content_region_available_width():             # <<<<<<<<<<<<<<
 *     """Get available content region width.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_content_region_available_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1290
 * 
 * 
 * def get_window_content_region_min():             # <<<<<<<<<<<<<<
 *     """Get minimal current window content boundaries in window coordinates.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_35get_window_content_region_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_34get_window_content_region_min[] = "get_window_content_region_min()\nGet minimal current window content boundaries in window coordinates.\n\n    It translates roughly to: ``(0, 0) - Scroll``\n\n    Returns:\n        Vec2: content boundaries two-tuple ``(width, height)``\n\n    .. wraps::\n        ImVec2 GetWindowContentRegionMin()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_35get_window_content_region_min = {"get_window_content_region_min", (PyCFunction)__pyx_pw_5imgui_4core_35get_window_content_region_min, METH_NOARGS, __pyx_doc_5imgui_4core_34get_window_content_region_min};
static PyObject *__pyx_pw_5imgui_4core_35get_window_content_region_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_content_region_min (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_34get_window_content_region_min(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_34get_window_content_region_min(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_window_content_region_min", 0);

  /* "imgui/core.pyx":1301
 *         ImVec2 GetWindowContentRegionMin()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetWindowContentRegionMin())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowContentRegionMin();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1301, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1290
 * 
 * 
 * def get_window_content_region_min():             # <<<<<<<<<<<<<<
 *     """Get minimal current window content boundaries in window coordinates.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_window_content_region_min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1304
 * 
 * 
 * def get_window_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get maximal current window content boundaries in window coordinates.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_37get_window_content_region_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_36get_window_content_region_max[] = "get_window_content_region_max()\nGet maximal current window content boundaries in window coordinates.\n\n    It translates roughly to: ``(0, 0) + Size - Scroll``\n\n    Returns:\n        Vec2: content boundaries two-tuple ``(width, height)``\n\n    .. wraps::\n        ImVec2 GetWindowContentRegionMin()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_37get_window_content_region_max = {"get_window_content_region_max", (PyCFunction)__pyx_pw_5imgui_4core_37get_window_content_region_max, METH_NOARGS, __pyx_doc_5imgui_4core_36get_window_content_region_max};
static PyObject *__pyx_pw_5imgui_4core_37get_window_content_region_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_content_region_max (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_36get_window_content_region_max(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_36get_window_content_region_max(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_window_content_region_max", 0);

  /* "imgui/core.pyx":1315
 *         ImVec2 GetWindowContentRegionMin()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetWindowContentRegionMax())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowContentRegionMax();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1315, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1304
 * 
 * 
 * def get_window_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get maximal current window content boundaries in window coordinates.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_window_content_region_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1318
 * 
 * 
 * def get_window_content_region_width():             # <<<<<<<<<<<<<<
 *     """Get available current window content region width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_39get_window_content_region_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_38get_window_content_region_width[] = "get_window_content_region_width()\nGet available current window content region width.\n\n    Returns:\n        float: available content region width.\n\n    .. wraps::\n        float GetWindowContentRegionWidth()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_39get_window_content_region_width = {"get_window_content_region_width", (PyCFunction)__pyx_pw_5imgui_4core_39get_window_content_region_width, METH_NOARGS, __pyx_doc_5imgui_4core_38get_window_content_region_width};
static PyObject *__pyx_pw_5imgui_4core_39get_window_content_region_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_content_region_width (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_38get_window_content_region_width(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_38get_window_content_region_width(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_window_content_region_width", 0);

  /* "imgui/core.pyx":1327
 *         float GetWindowContentRegionWidth()
 *     """
 *     return cimgui.GetWindowContentRegionWidth()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowContentRegionWidth();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1327, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1318
 * 
 * 
 * def get_window_content_region_width():             # <<<<<<<<<<<<<<
 *     """Get available current window content region width.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_window_content_region_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1330
 * 
 * 
 * def set_window_font_scale(float scale):             # <<<<<<<<<<<<<<
 *     """Adjust per-window font scale for current window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_41set_window_font_scale(PyObject *__pyx_self, PyObject *__pyx_arg_scale); /*proto*/
static char __pyx_doc_5imgui_4core_40set_window_font_scale[] = "set_window_font_scale(float scale)\nAdjust per-window font scale for current window.\n\n    Function should be called inside window context so after calling\n    :any:`begin()`.\n\n    Note: use ``get_io().font_global_scale`` if you want to scale all windows.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n\n        imgui.begin(\"Example: font scale\")\n        imgui.set_window_font_scale(2.0)\n        imgui.text(\"Bigger font\")\n        imgui.end()\n\n    Args:\n        scale (float): font scale\n\n    .. wraps::\n        void SetWindowFontScale(float scale)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_41set_window_font_scale = {"set_window_font_scale", (PyCFunction)__pyx_pw_5imgui_4core_41set_window_font_scale, METH_O, __pyx_doc_5imgui_4core_40set_window_font_scale};
static PyObject *__pyx_pw_5imgui_4core_41set_window_font_scale(PyObject *__pyx_self, PyObject *__pyx_arg_scale) {
  float __pyx_v_scale;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_font_scale (wrapper)", 0);
  assert(__pyx_arg_scale); {
    __pyx_v_scale = __pyx_PyFloat_AsFloat(__pyx_arg_scale); if (unlikely((__pyx_v_scale == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1330, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_window_font_scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_40set_window_font_scale(__pyx_self, ((float)__pyx_v_scale));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_40set_window_font_scale(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_scale) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_window_font_scale", 0);

  /* "imgui/core.pyx":1353
 *         void SetWindowFontScale(float scale)
 *     """
 *     cimgui.SetWindowFontScale(scale)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetWindowFontScale(__pyx_v_scale);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1353, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1330
 * 
 * 
 * def set_window_font_scale(float scale):             # <<<<<<<<<<<<<<
 *     """Adjust per-window font scale for current window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_window_font_scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1356
 * 
 * 
 * def set_next_window_collapsed(             # <<<<<<<<<<<<<<
 *     cimgui.bool collapsed, cimgui.ImGuiSetCond condition=ALWAYS
 * ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_43set_next_window_collapsed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_42set_next_window_collapsed[] = "set_next_window_collapsed(bool collapsed, ImGuiSetCond condition=ALWAYS)\nSet next window collapsed state.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 60\n        :width: 400\n\n        imgui.set_next_window_collapsed(True)\n        imgui.begin(\"Example: collapsed window\")\n        imgui.end()\n\n\n    Args:\n        collapsed (bool): set to True if window has to be collapsed.\n        condition (:ref:`condition flag <condition-options>`): defines on\n            which condition value should be set. Defaults to\n            :any:`imgui.ALWAYS`.\n\n    .. wraps::\n         void SetNextWindowCollapsed(\n             bool collapsed, ImGuiSetCond cond = 0\n         )\n\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_43set_next_window_collapsed = {"set_next_window_collapsed", (PyCFunction)__pyx_pw_5imgui_4core_43set_next_window_collapsed, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_42set_next_window_collapsed};
static PyObject *__pyx_pw_5imgui_4core_43set_next_window_collapsed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_collapsed;
  ImGuiSetCond __pyx_v_condition;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_collapsed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_collapsed,&__pyx_n_s_condition,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_collapsed)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_next_window_collapsed") < 0)) __PYX_ERR(0, 1356, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_collapsed = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_collapsed == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1357, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiSetCond(values[1]); if (unlikely((__pyx_v_condition == ((ImGuiSetCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1357, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__32;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_next_window_collapsed", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1356, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_collapsed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_42set_next_window_collapsed(__pyx_self, __pyx_v_collapsed, __pyx_v_condition);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_42set_next_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_collapsed, ImGuiSetCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_collapsed", 0);

  /* "imgui/core.pyx":1383
 * 
 *     """
 *     cimgui.SetNextWindowCollapsed(collapsed, condition)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetNextWindowCollapsed(__pyx_v_collapsed, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1383, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1356
 * 
 * 
 * def set_next_window_collapsed(             # <<<<<<<<<<<<<<
 *     cimgui.bool collapsed, cimgui.ImGuiSetCond condition=ALWAYS
 * ):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_collapsed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1386
 * 
 * 
 * def set_next_window_focus():             # <<<<<<<<<<<<<<
 *     """Set next window to be focused (most front).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_45set_next_window_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_44set_next_window_focus[] = "set_next_window_focus()\nSet next window to be focused (most front).\n\n    .. wraps::\n        void SetNextWindowFocus()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_45set_next_window_focus = {"set_next_window_focus", (PyCFunction)__pyx_pw_5imgui_4core_45set_next_window_focus, METH_NOARGS, __pyx_doc_5imgui_4core_44set_next_window_focus};
static PyObject *__pyx_pw_5imgui_4core_45set_next_window_focus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_focus (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_44set_next_window_focus(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_44set_next_window_focus(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_focus", 0);

  /* "imgui/core.pyx":1392
 *         void SetNextWindowFocus()
 *     """
 *     cimgui.SetNextWindowFocus()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetNextWindowFocus();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1392, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1386
 * 
 * 
 * def set_next_window_focus():             # <<<<<<<<<<<<<<
 *     """Set next window to be focused (most front).
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1395
 * 
 * 
 * def get_window_position():             # <<<<<<<<<<<<<<
 *     """Get current window position.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_47get_window_position(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_46get_window_position[] = "get_window_position()\nGet current window position.\n\n    It may be useful if you want to do your own drawing via the DrawList\n    api.\n\n    Returns:\n        Vec2: two-tuple of window coordinates in screen space.\n\n    .. wraps::\n        ImVec2 GetWindowPos()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_47get_window_position = {"get_window_position", (PyCFunction)__pyx_pw_5imgui_4core_47get_window_position, METH_NOARGS, __pyx_doc_5imgui_4core_46get_window_position};
static PyObject *__pyx_pw_5imgui_4core_47get_window_position(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_position (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_46get_window_position(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_46get_window_position(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_window_position", 0);

  /* "imgui/core.pyx":1407
 *         ImVec2 GetWindowPos()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetWindowPos())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowPos();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1407, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1395
 * 
 * 
 * def get_window_position():             # <<<<<<<<<<<<<<
 *     """Get current window position.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_window_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1410
 * 
 * 
 * def get_window_size():             # <<<<<<<<<<<<<<
 *     """Get current window size.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_49get_window_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_48get_window_size[] = "get_window_size()\nGet current window size.\n\n    Returns:\n        Vec2: two-tuple of window dimensions.\n\n    .. wraps::\n        ImVec2 GetWindowSize()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_49get_window_size = {"get_window_size", (PyCFunction)__pyx_pw_5imgui_4core_49get_window_size, METH_NOARGS, __pyx_doc_5imgui_4core_48get_window_size};
static PyObject *__pyx_pw_5imgui_4core_49get_window_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_size (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_48get_window_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_48get_window_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_window_size", 0);

  /* "imgui/core.pyx":1419
 *         ImVec2 GetWindowSize()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetWindowSize())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowSize();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1419, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1410
 * 
 * 
 * def get_window_size():             # <<<<<<<<<<<<<<
 *     """Get current window size.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1422
 * 
 * 
 * def get_window_width():             # <<<<<<<<<<<<<<
 *     """Get current window width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_51get_window_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_50get_window_width[] = "get_window_width()\nGet current window width.\n\n    Returns:\n        float: width of current window.\n\n    .. wraps::\n        float GetWindowWidth()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_51get_window_width = {"get_window_width", (PyCFunction)__pyx_pw_5imgui_4core_51get_window_width, METH_NOARGS, __pyx_doc_5imgui_4core_50get_window_width};
static PyObject *__pyx_pw_5imgui_4core_51get_window_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_width (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_50get_window_width(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_50get_window_width(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_window_width", 0);

  /* "imgui/core.pyx":1431
 *         float GetWindowWidth()
 *     """
 *     return cimgui.GetWindowWidth()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowWidth();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1431, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1422
 * 
 * 
 * def get_window_width():             # <<<<<<<<<<<<<<
 *     """Get current window width.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_window_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1434
 * 
 * 
 * def get_window_height():             # <<<<<<<<<<<<<<
 *     """Get current window height.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_53get_window_height(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_52get_window_height[] = "get_window_height()\nGet current window height.\n\n    Returns:\n        float: height of current window.\n\n    .. wraps::\n        float GetWindowHeight()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_53get_window_height = {"get_window_height", (PyCFunction)__pyx_pw_5imgui_4core_53get_window_height, METH_NOARGS, __pyx_doc_5imgui_4core_52get_window_height};
static PyObject *__pyx_pw_5imgui_4core_53get_window_height(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_window_height (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_52get_window_height(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_52get_window_height(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_window_height", 0);

  /* "imgui/core.pyx":1443
 *         float GetWindowHeight()
 *     """
 *     return cimgui.GetWindowHeight()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetWindowHeight();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1443, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1434
 * 
 * 
 * def get_window_height():             # <<<<<<<<<<<<<<
 *     """Get current window height.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_window_height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1446
 * 
 * 
 * def set_next_window_position(             # <<<<<<<<<<<<<<
 *     float x, float y, cimgui.ImGuiSetCond condition=ALWAYS
 * ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_55set_next_window_position(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_54set_next_window_position[] = "set_next_window_position(float x, float y, ImGuiSetCond condition=ALWAYS)\nSet next window position.\n\n    Call before :func:`begin()`.\n\n    Args:\n        x (float): x window coordinate\n        y (float): y window coordinate\n        condition (:ref:`condition flag <condition-options>`): defines on which\n            condition value should be set. Defaults to :any:`imgui.ALWAYS`.\n\n    .. visual-example::\n        :title: window positioning\n        :height: 50\n\n        imgui.set_next_window_size(20, 20)\n\n        for index in range(5):\n            imgui.set_next_window_position(index * 40, 5)\n            imgui.begin(str(index))\n            imgui.end()\n\n    .. wraps::\n        void SetNextWindowPos(const ImVec2& pos, ImGuiSetCond cond = 0)\n\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_55set_next_window_position = {"set_next_window_position", (PyCFunction)__pyx_pw_5imgui_4core_55set_next_window_position, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_54set_next_window_position};
static PyObject *__pyx_pw_5imgui_4core_55set_next_window_position(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_x;
  float __pyx_v_y;
  ImGuiSetCond __pyx_v_condition;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_position (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_condition,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_next_window_position", 0, 2, 3, 1); __PYX_ERR(0, 1446, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_next_window_position") < 0)) __PYX_ERR(0, 1446, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1447, __pyx_L3_error)
    __pyx_v_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1447, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiSetCond(values[2]); if (unlikely((__pyx_v_condition == ((ImGuiSetCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1447, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__33;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_next_window_position", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1446, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_54set_next_window_position(__pyx_self, __pyx_v_x, __pyx_v_y, __pyx_v_condition);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_54set_next_window_position(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_x, float __pyx_v_y, ImGuiSetCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  __Pyx_RefNannySetupContext("set_next_window_position", 0);

  /* "imgui/core.pyx":1474
 * 
 *     """
 *     cimgui.SetNextWindowPos(_cast_args_ImVec2(x, y), condition)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_x, __pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1474, __pyx_L1_error)
  try {
    ImGui::SetNextWindowPos(__pyx_t_1, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1474, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1446
 * 
 * 
 * def set_next_window_position(             # <<<<<<<<<<<<<<
 *     float x, float y, cimgui.ImGuiSetCond condition=ALWAYS
 * ):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1477
 * 
 * 
 * def set_next_window_centered(cimgui.ImGuiSetCond condition=ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set next window position to be centered on screen.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_57set_next_window_centered(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_56set_next_window_centered[] = "set_next_window_centered(ImGuiSetCond condition=ALWAYS)\nSet next window position to be centered on screen.\n\n    Call before :func:`begin()`.\n\n    Args:\n        condition (:ref:`condition flag <condition-options>`): defines on which\n            condition value should be set. Defaults to :any:`imgui.ALWAYS`.\n\n    .. visual-example::\n        :title: window centering\n        :height: 100\n        :width: 600\n\n        imgui.set_next_window_size(200, 50)\n        imgui.set_next_window_centered()\n        imgui.begin(\"Example: centered\")\n        imgui.end()\n\n\n    .. wraps::\n        void SetNextWindowPosCenter(ImGuiSetCond cond = 0)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_57set_next_window_centered = {"set_next_window_centered", (PyCFunction)__pyx_pw_5imgui_4core_57set_next_window_centered, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_56set_next_window_centered};
static PyObject *__pyx_pw_5imgui_4core_57set_next_window_centered(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiSetCond __pyx_v_condition;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_centered (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_condition,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_next_window_centered") < 0)) __PYX_ERR(0, 1477, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiSetCond(values[0]); if (unlikely((__pyx_v_condition == ((ImGuiSetCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1477, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__34;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_next_window_centered", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1477, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_centered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_56set_next_window_centered(__pyx_self, __pyx_v_condition);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_56set_next_window_centered(CYTHON_UNUSED PyObject *__pyx_self, ImGuiSetCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_centered", 0);

  /* "imgui/core.pyx":1500
 *         void SetNextWindowPosCenter(ImGuiSetCond cond = 0)
 *     """
 *     cimgui.SetNextWindowPosCenter(condition)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetNextWindowPosCenter(__pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1500, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1477
 * 
 * 
 * def set_next_window_centered(cimgui.ImGuiSetCond condition=ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set next window position to be centered on screen.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_centered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1503
 * 
 * 
 * def set_next_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiSetCond condition=ALWAYS
 * ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_59set_next_window_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_58set_next_window_size[] = "set_next_window_size(float width, float height, ImGuiSetCond condition=ALWAYS)\nSet next window size.\n\n    Call before :func:`begin()`.\n\n    Args:\n        width (float): window width. Value 0.0 enables autofit.\n        height (float): window height. Value 0.0 enables autofit.\n        condition (:ref:`condition flag <condition-options>`): defines on which\n            condition value should be set. Defaults to :any:`imgui.ALWAYS`.\n\n    .. visual-example::\n        :title: window sizing\n        :height: 200\n\n        imgui.set_next_window_centered()\n        imgui.set_next_window_size(80, 180)\n        imgui.begin(\"High\")\n        imgui.end()\n\n\n    .. wraps::\n        void SetNextWindowSize(\n            const ImVec2& size, ImGuiSetCond cond = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_59set_next_window_size = {"set_next_window_size", (PyCFunction)__pyx_pw_5imgui_4core_59set_next_window_size, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_58set_next_window_size};
static PyObject *__pyx_pw_5imgui_4core_59set_next_window_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_width;
  float __pyx_v_height;
  ImGuiSetCond __pyx_v_condition;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_next_window_size (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_condition,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_next_window_size", 0, 2, 3, 1); __PYX_ERR(0, 1503, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_condition);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_next_window_size") < 0)) __PYX_ERR(0, 1503, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1504, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1504, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_condition = __Pyx_PyInt_As_ImGuiSetCond(values[2]); if (unlikely((__pyx_v_condition == ((ImGuiSetCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1504, __pyx_L3_error)
    } else {
      __pyx_v_condition = __pyx_k__35;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_next_window_size", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1503, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_58set_next_window_size(__pyx_self, __pyx_v_width, __pyx_v_height, __pyx_v_condition);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_58set_next_window_size(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width, float __pyx_v_height, ImGuiSetCond __pyx_v_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  __Pyx_RefNannySetupContext("set_next_window_size", 0);

  /* "imgui/core.pyx":1531
 *         )
 *     """
 *     cimgui.SetNextWindowSize(_cast_args_ImVec2(width, height), condition)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1531, __pyx_L1_error)
  try {
    ImGui::SetNextWindowSize(__pyx_t_1, __pyx_v_condition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1531, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1503
 * 
 * 
 * def set_next_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiSetCond condition=ALWAYS
 * ):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_next_window_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1534
 * 
 * 
 * def is_window_collapsed():             # <<<<<<<<<<<<<<
 *     """Check if current window is collapsed.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_61is_window_collapsed(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_60is_window_collapsed[] = "is_window_collapsed()\nCheck if current window is collapsed.\n\n    Returns:\n        bool: True if window is collapsed\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_61is_window_collapsed = {"is_window_collapsed", (PyCFunction)__pyx_pw_5imgui_4core_61is_window_collapsed, METH_NOARGS, __pyx_doc_5imgui_4core_60is_window_collapsed};
static PyObject *__pyx_pw_5imgui_4core_61is_window_collapsed(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_window_collapsed (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_60is_window_collapsed(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_60is_window_collapsed(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_window_collapsed", 0);

  /* "imgui/core.pyx":1540
 *         bool: True if window is collapsed
 *     """
 *     return cimgui.IsWindowCollapsed()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsWindowCollapsed();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1540, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1534
 * 
 * 
 * def is_window_collapsed():             # <<<<<<<<<<<<<<
 *     """Check if current window is collapsed.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_window_collapsed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1543
 * 
 * 
 * def tree_node(str text, cimgui.ImGuiTreeNodeFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Draw a tree node.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_63tree_node(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_62tree_node[] = "tree_node(str text, ImGuiTreeNodeFlags flags=0)\nDraw a tree node.\n\n    Returns 'true' if the node is drawn, call :func:`tree_pop()` to finish.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n        :width: 200\n        :click: 80 40\n\n        imgui.begin(\"Example: tree node\")\n        if imgui.tree_node(\"Expand me!\", imgui.TREE_NODE_DEFAULT_OPEN):\n            imgui.text(\"Lorem Ipsum\")\n            imgui.tree_pop()\n        imgui.end()\n\n    Args:\n        text (str): Tree node label\n        flags: TreeNode flags. See:\n            :ref:`list of available flags <treenode-flag-options>`.\n\n    Returns:\n        bool: True if tree node is displayed (opened).\n\n    .. wraps::\n        bool TreeNode(const char* label)\n        bool TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags = 0)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_63tree_node = {"tree_node", (PyCFunction)__pyx_pw_5imgui_4core_63tree_node, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_62tree_node};
static PyObject *__pyx_pw_5imgui_4core_63tree_node(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  ImGuiTreeNodeFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tree_node (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_flags,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tree_node") < 0)) __PYX_ERR(0, 1543, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiTreeNodeFlags(values[1]); if (unlikely((__pyx_v_flags == ((ImGuiTreeNodeFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1543, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiTreeNodeFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tree_node", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1543, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.tree_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 1543, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_62tree_node(__pyx_self, __pyx_v_text, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_62tree_node(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, ImGuiTreeNodeFlags __pyx_v_flags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  __Pyx_RefNannySetupContext("tree_node", 0);

  /* "imgui/core.pyx":1572
 *         bool TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags = 0)
 *     """
 *     return cimgui.TreeNodeEx(_bytes(text), flags)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 1572, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::TreeNodeEx(__pyx_t_2, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1572, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1543
 * 
 * 
 * def tree_node(str text, cimgui.ImGuiTreeNodeFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Draw a tree node.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.tree_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1575
 * 
 * 
 * def tree_pop():             # <<<<<<<<<<<<<<
 *     """Called to clear the tree nodes stack and return back the identation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_65tree_pop(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_64tree_pop[] = "tree_pop()\nCalled to clear the tree nodes stack and return back the identation.\n\n    Same as calls to :func:`unindent()` and :func:`pop_id()`.\n    For a tree example see :func:`tree_node()`.\n\n    .. wraps::\n        void TreePop()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_65tree_pop = {"tree_pop", (PyCFunction)__pyx_pw_5imgui_4core_65tree_pop, METH_NOARGS, __pyx_doc_5imgui_4core_64tree_pop};
static PyObject *__pyx_pw_5imgui_4core_65tree_pop(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tree_pop (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_64tree_pop(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_64tree_pop(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tree_pop", 0);

  /* "imgui/core.pyx":1584
 *         void TreePop()
 *     """
 *     cimgui.TreePop()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::TreePop();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1584, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1575
 * 
 * 
 * def tree_pop():             # <<<<<<<<<<<<<<
 *     """Called to clear the tree nodes stack and return back the identation.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.tree_pop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1587
 * 
 * 
 * def collapsing_header(             # <<<<<<<<<<<<<<
 *     str text,
 *     visible=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_67collapsing_header(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_66collapsing_header[] = "collapsing_header(str text, visible=None, ImGuiTreeNodeFlags flags=0)\nCollapsable/Expandable header view.\n\n    Returns 'true' if the header is open. Doesn't indent or push to stack,\n    so no need to call any pop function.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n        :width: 200\n        :click: 80 40\n\n        visible = True\n\n        imgui.begin(\"Example: collapsing header\")\n        expanded, visible = imgui.collapsing_header(\"Expand me!\", visible)\n\n        if expanded:\n            imgui.text(\"Now you see me!\")\n        imgui.end()\n\n    Args:\n        text (str): Tree node label\n        visible (bool or None): Force visibility of a header. If set to True\n            shows additional (X) close button. If set to False header is not\n            visible at all. If set to None header is always visible and close\n            button is not displayed.\n        flags: TreeNode flags. See:\n            :ref:`list of available flags <treenode-flag-options>`.\n\n    Returns:\n        tuple: a ``(expanded, visible)`` two-tuple indicating if item was\n        expanded and whether the header is visible or not (only if ``visible``\n        input argument is True/False).\n\n    .. wraps::\n        bool CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags = 0)\n\n        bool CollapsingHeader(\n            const char* label,\n            bool* p_open,\n            ImGuiTreeNodeFlags flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_67collapsing_header = {"collapsing_header", (PyCFunction)__pyx_pw_5imgui_4core_67collapsing_header, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_66collapsing_header};
static PyObject *__pyx_pw_5imgui_4core_67collapsing_header(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  PyObject *__pyx_v_visible = 0;
  ImGuiTreeNodeFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("collapsing_header (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_visible,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};

    /* "imgui/core.pyx":1589
 * def collapsing_header(
 *     str text,
 *     visible=None,             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiTreeNodeFlags flags=0
 * ):
 */
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_visible);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "collapsing_header") < 0)) __PYX_ERR(0, 1587, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    __pyx_v_visible = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiTreeNodeFlags(values[2]); if (unlikely((__pyx_v_flags == ((ImGuiTreeNodeFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1590, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiTreeNodeFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("collapsing_header", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1587, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.collapsing_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 1588, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_66collapsing_header(__pyx_self, __pyx_v_text, __pyx_v_visible, __pyx_v_flags);

  /* "imgui/core.pyx":1587
 * 
 * 
 * def collapsing_header(             # <<<<<<<<<<<<<<
 *     str text,
 *     visible=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_66collapsing_header(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, PyObject *__pyx_v_visible, ImGuiTreeNodeFlags __pyx_v_flags) {
  bool __pyx_v_inout_opened;
  bool __pyx_v_clicked;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("collapsing_header", 0);

  /* "imgui/core.pyx":1635
 *         )
 *     """
 *     cdef cimgui.bool inout_opened = visible             # <<<<<<<<<<<<<<
 *     if visible is None:
 *         clicked = cimgui.CollapsingHeader(_bytes(text), NULL, flags)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_visible); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1635, __pyx_L1_error)
  __pyx_v_inout_opened = __pyx_t_1;

  /* "imgui/core.pyx":1636
 *     """
 *     cdef cimgui.bool inout_opened = visible
 *     if visible is None:             # <<<<<<<<<<<<<<
 *         clicked = cimgui.CollapsingHeader(_bytes(text), NULL, flags)
 *     else:
 */
  __pyx_t_2 = (__pyx_v_visible == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "imgui/core.pyx":1637
 *     cdef cimgui.bool inout_opened = visible
 *     if visible is None:
 *         clicked = cimgui.CollapsingHeader(_bytes(text), NULL, flags)             # <<<<<<<<<<<<<<
 *     else:
 *         clicked = cimgui.CollapsingHeader(_bytes(text), &inout_opened, flags)
 */
    __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 1637, __pyx_L1_error)
    try {
      __pyx_t_1 = ImGui::CollapsingHeader(__pyx_t_5, NULL, __pyx_v_flags);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1637, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_clicked = __pyx_t_1;

    /* "imgui/core.pyx":1636
 *     """
 *     cdef cimgui.bool inout_opened = visible
 *     if visible is None:             # <<<<<<<<<<<<<<
 *         clicked = cimgui.CollapsingHeader(_bytes(text), NULL, flags)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":1639
 *         clicked = cimgui.CollapsingHeader(_bytes(text), NULL, flags)
 *     else:
 *         clicked = cimgui.CollapsingHeader(_bytes(text), &inout_opened, flags)             # <<<<<<<<<<<<<<
 *     return clicked, None if visible is None else inout_opened
 * 
 */
  /*else*/ {
    __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 1639, __pyx_L1_error)
    try {
      __pyx_t_1 = ImGui::CollapsingHeader(__pyx_t_5, (&__pyx_v_inout_opened), __pyx_v_flags);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1639, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_clicked = __pyx_t_1;
  }
  __pyx_L3:;

  /* "imgui/core.pyx":1640
 *     else:
 *         clicked = cimgui.CollapsingHeader(_bytes(text), &inout_opened, flags)
 *     return clicked, None if visible is None else inout_opened             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_clicked); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__pyx_v_visible == Py_None);
  if ((__pyx_t_3 != 0)) {
    __Pyx_INCREF(Py_None);
    __pyx_t_6 = Py_None;
  } else {
    __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_inout_opened); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __pyx_t_7;
    __pyx_t_7 = 0;
  }
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1587
 * 
 * 
 * def collapsing_header(             # <<<<<<<<<<<<<<
 *     str text,
 *     visible=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("imgui.core.collapsing_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1643
 * 
 * 
 * def selectable(             # <<<<<<<<<<<<<<
 *     str label,
 *     selected=False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_69selectable(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_68selectable[] = "selectable(str label, selected=False, ImGuiTreeNodeFlags flags=0, width=0, height=0)\nSelectable text. Returns 'true' if the item is pressed.\n\n    Width of 0.0 will use the available width in the parent container.\n    Height of 0.0 will use the available height in the parent container.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 200\n        :width: 200\n        :click: 80 40\n\n        selected = [False, False]\n        imgui.begin(\"Example: selectable\")\n        _, selected[0] = imgui.selectable(\n            \"1. I am selectable\", selected[0]\n        )\n        _, selected[1] = imgui.selectable(\n            \"2. I am selectable too\", selected[1]\n        )\n        imgui.text(\"3. I am not selectable\")\n        imgui.end()\n\n    Args:\n        label (str): The label.\n        selected (bool): defines if item is selected or not.\n        flags: Selectable flags. See:\n            :ref:`list of available flags <selectable-flag-options>`.\n        width (float): button width.\n        height (float): button height.\n\n    Returns:\n        tuple: a ``(opened, selected)`` two-tuple indicating if item was\n        clicked by the user and the current state of item.\n\n    .. wraps::\n        bool Selectable(\n            const char* label,\n            bool selected = false,\n            ImGuiSelectableFlags flags = 0,\n            const ImVec2& size = ImVec2(0,0)\n        )\n\n        bool Selectable(\n            const char* label,\n            bool* selected,\n            ImGuiSelectableFlags flags = 0,\n            const ImVec2& size = ImVec2(0,0)\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_69selectable = {"selectable", (PyCFunction)__pyx_pw_5imgui_4core_69selectable, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_68selectable};
static PyObject *__pyx_pw_5imgui_4core_69selectable(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_selected = 0;
  ImGuiTreeNodeFlags __pyx_v_flags;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("selectable (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_selected,&__pyx_n_s_flags,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "imgui/core.pyx":1645
 * def selectable(
 *     str label,
 *     selected=False,             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiTreeNodeFlags flags=0,
 *     width=0,
 */
    values[1] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)__pyx_int_0);
    values[4] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_selected);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "selectable") < 0)) __PYX_ERR(0, 1643, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_selected = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiTreeNodeFlags(values[2]); if (unlikely((__pyx_v_flags == ((ImGuiTreeNodeFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1646, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiTreeNodeFlags)0);
    }
    __pyx_v_width = values[3];
    __pyx_v_height = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("selectable", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1643, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.selectable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 1644, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_68selectable(__pyx_self, __pyx_v_label, __pyx_v_selected, __pyx_v_flags, __pyx_v_width, __pyx_v_height);

  /* "imgui/core.pyx":1643
 * 
 * 
 * def selectable(             # <<<<<<<<<<<<<<
 *     str label,
 *     selected=False,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_68selectable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_selected, ImGuiTreeNodeFlags __pyx_v_flags, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  bool __pyx_v_inout_selected;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  float __pyx_t_4;
  float __pyx_t_5;
  ImVec2 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("selectable", 0);

  /* "imgui/core.pyx":1699
 *         )
 *     """
 *     cdef cimgui.bool inout_selected = selected             # <<<<<<<<<<<<<<
 *     return cimgui.Selectable(
 *         _bytes(label),
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_selected); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1699, __pyx_L1_error)
  __pyx_v_inout_selected = __pyx_t_1;

  /* "imgui/core.pyx":1700
 *     """
 *     cdef cimgui.bool inout_selected = selected
 *     return cimgui.Selectable(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         &inout_selected,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":1701
 *     cdef cimgui.bool inout_selected = selected
 *     return cimgui.Selectable(
 *         _bytes(label),             # <<<<<<<<<<<<<<
 *         &inout_selected,
 *         flags,
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 1701, __pyx_L1_error)

  /* "imgui/core.pyx":1704
 *         &inout_selected,
 *         flags,
 *         _cast_args_ImVec2(width, height)), inout_selected             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1704, __pyx_L1_error)
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1704, __pyx_L1_error)
  __pyx_t_6 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_t_4, __pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1704, __pyx_L1_error)

  /* "imgui/core.pyx":1700
 *     """
 *     cdef cimgui.bool inout_selected = selected
 *     return cimgui.Selectable(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         &inout_selected,
 */
  try {
    __pyx_t_1 = ImGui::Selectable(__pyx_t_3, (&__pyx_v_inout_selected), __pyx_v_flags, __pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1700, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":1704
 *         &inout_selected,
 *         flags,
 *         _cast_args_ImVec2(width, height)), inout_selected             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_inout_selected); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "imgui/core.pyx":1700
 *     """
 *     cdef cimgui.bool inout_selected = selected
 *     return cimgui.Selectable(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         &inout_selected,
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1643
 * 
 * 
 * def selectable(             # <<<<<<<<<<<<<<
 *     str label,
 *     selected=False,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.selectable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1707
 * 
 * 
 * def listbox(             # <<<<<<<<<<<<<<
 *     str label,
 *     int current,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_71listbox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_70listbox[] = "listbox(str label, int current, list items, int height_in_items=-1)\nShow listbox widget.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n        :width: 200\n\n        current = 2\n        imgui.begin(\"Example: listbox widget\")\n\n        clicked, current = imgui.listbox(\n            \"List\", current, [\"first\", \"second\", \"third\"]\n        )\n\n        imgui.end()\n\n    Args:\n        label (str): The label.\n        current (int): index of selected item.\n        items (list): list of string labels for items.\n        height_in_items (int): height of dropdown in items. Defaults to -1\n            (autosized).\n\n    Returns:\n        tuple: a ``(changed, current)`` tuple indicating change of selection\n        and current index of selected item.\n\n    .. wraps::\n        bool ListBox(\n            const char* label,\n            int* current_item,\n            const char** items,\n            int items_count,\n            int height_in_items = -1\n        )\n\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_71listbox = {"listbox", (PyCFunction)__pyx_pw_5imgui_4core_71listbox, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_70listbox};
static PyObject *__pyx_pw_5imgui_4core_71listbox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_current;
  PyObject *__pyx_v_items = 0;
  int __pyx_v_height_in_items;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listbox (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_current,&__pyx_n_s_items,&__pyx_n_s_height_in_items,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_current)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("listbox", 0, 3, 4, 1); __PYX_ERR(0, 1707, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("listbox", 0, 3, 4, 2); __PYX_ERR(0, 1707, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height_in_items);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "listbox") < 0)) __PYX_ERR(0, 1707, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_current = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_current == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1709, __pyx_L3_error)
    __pyx_v_items = ((PyObject*)values[2]);
    if (values[3]) {
      __pyx_v_height_in_items = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_height_in_items == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1711, __pyx_L3_error)
    } else {
      __pyx_v_height_in_items = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("listbox", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1707, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.listbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 1708, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_items), (&PyList_Type), 1, "items", 1))) __PYX_ERR(0, 1710, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_70listbox(__pyx_self, __pyx_v_label, __pyx_v_current, __pyx_v_items, __pyx_v_height_in_items);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_70listbox(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_current, PyObject *__pyx_v_items, int __pyx_v_height_in_items) {
  int __pyx_v_inout_current;
  char const **__pyx_v_in_items;
  Py_ssize_t __pyx_v_index;
  PyObject *__pyx_v_item = NULL;
  bool __pyx_v_opened;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  char const *__pyx_t_6;
  bool __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("listbox", 0);

  /* "imgui/core.pyx":1750
 * 
 *     """
 *     cdef int inout_current = current             # <<<<<<<<<<<<<<
 *     cdef const char** in_items = <const char**> malloc(len(items) * sizeof(char*))
 * 
 */
  __pyx_v_inout_current = __pyx_v_current;

  /* "imgui/core.pyx":1751
 *     """
 *     cdef int inout_current = current
 *     cdef const char** in_items = <const char**> malloc(len(items) * sizeof(char*))             # <<<<<<<<<<<<<<
 * 
 *     for index, item in enumerate(items):
 */
  if (unlikely(__pyx_v_items == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1751, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_items); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1751, __pyx_L1_error)
  __pyx_v_in_items = ((char const **)malloc((__pyx_t_1 * (sizeof(char *)))));

  /* "imgui/core.pyx":1753
 *     cdef const char** in_items = <const char**> malloc(len(items) * sizeof(char*))
 * 
 *     for index, item in enumerate(items):             # <<<<<<<<<<<<<<
 *         in_items[index] = strdup(_bytes(item))
 * 
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = __pyx_v_items; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1753, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_v_index = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "imgui/core.pyx":1754
 * 
 *     for index, item in enumerate(items):
 *         in_items[index] = strdup(_bytes(item))             # <<<<<<<<<<<<<<
 * 
 *     opened = cimgui.ListBox(
 */
    if (!(likely(PyString_CheckExact(__pyx_v_item))||((__pyx_v_item) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_item)->tp_name), 0))) __PYX_ERR(0, 1754, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_5imgui_4core__bytes(((PyObject*)__pyx_v_item)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 1754, __pyx_L1_error)
    (__pyx_v_in_items[__pyx_v_index]) = strdup(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "imgui/core.pyx":1753
 *     cdef const char** in_items = <const char**> malloc(len(items) * sizeof(char*))
 * 
 *     for index, item in enumerate(items):             # <<<<<<<<<<<<<<
 *         in_items[index] = strdup(_bytes(item))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imgui/core.pyx":1757
 * 
 *     opened = cimgui.ListBox(
 *         _bytes(label),             # <<<<<<<<<<<<<<
 *         &inout_current,
 *         in_items,
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 1757, __pyx_L1_error)

  /* "imgui/core.pyx":1760
 *         &inout_current,
 *         in_items,
 *         len(items),             # <<<<<<<<<<<<<<
 *         height_in_items
 *     )
 */
  if (unlikely(__pyx_v_items == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1760, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_items); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1760, __pyx_L1_error)

  /* "imgui/core.pyx":1756
 *         in_items[index] = strdup(_bytes(item))
 * 
 *     opened = cimgui.ListBox(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         &inout_current,
 */
  try {
    __pyx_t_7 = ImGui::ListBox(__pyx_t_6, (&__pyx_v_inout_current), __pyx_v_in_items, __pyx_t_1, __pyx_v_height_in_items);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1756, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_opened = __pyx_t_7;

  /* "imgui/core.pyx":1764
 *     )
 * 
 *     for i in range(len(items)):             # <<<<<<<<<<<<<<
 *         free(<char*>in_items[i])
 * 
 */
  if (unlikely(__pyx_v_items == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1764, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_items); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1764, __pyx_L1_error)
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "imgui/core.pyx":1765
 * 
 *     for i in range(len(items)):
 *         free(<char*>in_items[i])             # <<<<<<<<<<<<<<
 * 
 *     free(in_items)
 */
    free(((char *)(__pyx_v_in_items[__pyx_v_i])));
  }

  /* "imgui/core.pyx":1767
 *         free(<char*>in_items[i])
 * 
 *     free(in_items)             # <<<<<<<<<<<<<<
 * 
 *     return opened, inout_current
 */
  free(__pyx_v_in_items);

  /* "imgui/core.pyx":1769
 *     free(in_items)
 * 
 *     return opened, inout_current             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_opened); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_inout_current); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1707
 * 
 * 
 * def listbox(             # <<<<<<<<<<<<<<
 *     str label,
 *     int current,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.listbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1772
 * 
 * 
 * def listbox_header(             # <<<<<<<<<<<<<<
 *     str label,
 *     width=0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_73listbox_header(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_72listbox_header[] = "listbox_header(str label, width=0, height=0)\nFor use if you want to reimplement :func:`listbox()` with custom data\n    or interactions. You need to call :func:`listbox_footer()` at the end.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 200\n        :width: 200\n        :click: 80 40\n\n        imgui.begin(\"Example: custom listbox\")\n\n        imgui.listbox_header(\"List\", 200, 100)\n\n        imgui.selectable(\"Selected\", True)\n        imgui.selectable(\"Not Selected\", False)\n\n        imgui.listbox_footer()\n\n        imgui.end()\n\n    Args:\n        label (str): The label.\n        width (float): button width.\n        height (float): button height.\n\n    Returns:\n        opened (bool): If the item is opened or closed.\n\n    .. wraps::\n        bool ListBoxHeader(\n            const char* label,\n            const ImVec2& size = ImVec2(0,0)\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_73listbox_header = {"listbox_header", (PyCFunction)__pyx_pw_5imgui_4core_73listbox_header, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_72listbox_header};
static PyObject *__pyx_pw_5imgui_4core_73listbox_header(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listbox_header (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "listbox_header") < 0)) __PYX_ERR(0, 1772, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_width = values[1];
    __pyx_v_height = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("listbox_header", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1772, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.listbox_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 1773, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_72listbox_header(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_72listbox_header(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  ImVec2 __pyx_t_5;
  bool __pyx_t_6;
  __Pyx_RefNannySetupContext("listbox_header", 0);

  /* "imgui/core.pyx":1811
 *         )
 *     """
 *     return cimgui.ListBoxHeader(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         _cast_args_ImVec2(width, height)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":1812
 *     """
 *     return cimgui.ListBoxHeader(
 *         _bytes(label),             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(width, height)
 *     )
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 1812, __pyx_L1_error)

  /* "imgui/core.pyx":1813
 *     return cimgui.ListBoxHeader(
 *         _bytes(label),
 *         _cast_args_ImVec2(width, height)             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1813, __pyx_L1_error)
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1813, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_t_3, __pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1813, __pyx_L1_error)

  /* "imgui/core.pyx":1811
 *         )
 *     """
 *     return cimgui.ListBoxHeader(             # <<<<<<<<<<<<<<
 *         _bytes(label),
 *         _cast_args_ImVec2(width, height)
 */
  try {
    __pyx_t_6 = ImGui::ListBoxHeader(__pyx_t_2, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1811, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1772
 * 
 * 
 * def listbox_header(             # <<<<<<<<<<<<<<
 *     str label,
 *     width=0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.listbox_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1817
 * 
 * 
 * def listbox_footer():             # <<<<<<<<<<<<<<
 *     """Closing the listbox, previously opened by :func:`listbox_header()`.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_75listbox_footer(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_74listbox_footer[] = "listbox_footer()\nClosing the listbox, previously opened by :func:`listbox_header()`.\n\n    See :func:`listbox_header()` for usage example.\n\n    .. wraps::\n        void ListBoxFooter()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_75listbox_footer = {"listbox_footer", (PyCFunction)__pyx_pw_5imgui_4core_75listbox_footer, METH_NOARGS, __pyx_doc_5imgui_4core_74listbox_footer};
static PyObject *__pyx_pw_5imgui_4core_75listbox_footer(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listbox_footer (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_74listbox_footer(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_74listbox_footer(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listbox_footer", 0);

  /* "imgui/core.pyx":1825
 *         void ListBoxFooter()
 *     """
 *     cimgui.ListBoxFooter()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::ListBoxFooter();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1825, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1817
 * 
 * 
 * def listbox_footer():             # <<<<<<<<<<<<<<
 *     """Closing the listbox, previously opened by :func:`listbox_header()`.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.listbox_footer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1828
 * 
 * 
 * def set_tooltip(str text):             # <<<<<<<<<<<<<<
 *     """Set tooltip under mouse-cursor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_77set_tooltip(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static char __pyx_doc_5imgui_4core_76set_tooltip[] = "set_tooltip(str text)\nSet tooltip under mouse-cursor.\n\n    Usually used with :func:`is_item_hovered()`.\n    For a complex tooltip window see :func:`begin_tooltip()`.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n        :width: 200\n        :click: 80 40\n\n        imgui.begin(\"Example: tooltip\")\n        imgui.button(\"Hover me!\")\n        if imgui.is_item_hovered():\n            imgui.set_tooltip(\"Please?\")\n        imgui.end()\n\n    .. wraps::\n        void SetTooltip(const char* fmt, ...)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_77set_tooltip = {"set_tooltip", (PyCFunction)__pyx_pw_5imgui_4core_77set_tooltip, METH_O, __pyx_doc_5imgui_4core_76set_tooltip};
static PyObject *__pyx_pw_5imgui_4core_77set_tooltip(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_tooltip (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 1828, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_76set_tooltip(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_76set_tooltip(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  __Pyx_RefNannySetupContext("set_tooltip", 0);

  /* "imgui/core.pyx":1850
 *     """
 *     # note: "%s" required for safety and to favor of Python string formatting
 *     cimgui.SetTooltip("%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 1850, __pyx_L1_error)
  try {
    ImGui::SetTooltip(((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1850, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1828
 * 
 * 
 * def set_tooltip(str text):             # <<<<<<<<<<<<<<
 *     """Set tooltip under mouse-cursor.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.set_tooltip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1853
 * 
 * 
 * def begin_tooltip():             # <<<<<<<<<<<<<<
 *     """Use to create full-featured tooltip windows that aren't just text.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_79begin_tooltip(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_78begin_tooltip[] = "begin_tooltip()\nUse to create full-featured tooltip windows that aren't just text.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 600\n        :height: 200\n        :click: 80 40\n\n        imgui.begin(\"Example: tooltip\")\n        imgui.button(\"Click me!\")\n        if imgui.is_item_hovered():\n            imgui.begin_tooltip()\n            imgui.text(\"This button is clickable.\")\n            imgui.text(\"This button has full window tooltip.\")\n            texture_id = imgui.get_io().fonts.texture_id\n            imgui.image(texture_id, 512, 64, border_color=(1, 0, 0, 1))\n            imgui.end_tooltip()\n        imgui.end()\n\n    .. wraps::\n        void BeginTooltip()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_79begin_tooltip = {"begin_tooltip", (PyCFunction)__pyx_pw_5imgui_4core_79begin_tooltip, METH_NOARGS, __pyx_doc_5imgui_4core_78begin_tooltip};
static PyObject *__pyx_pw_5imgui_4core_79begin_tooltip(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_tooltip (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_78begin_tooltip(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_78begin_tooltip(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_tooltip", 0);

  /* "imgui/core.pyx":1876
 *         void BeginTooltip()
 *     """
 *     cimgui.BeginTooltip()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::BeginTooltip();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1876, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1853
 * 
 * 
 * def begin_tooltip():             # <<<<<<<<<<<<<<
 *     """Use to create full-featured tooltip windows that aren't just text.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.begin_tooltip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1879
 * 
 * 
 * def end_tooltip():             # <<<<<<<<<<<<<<
 *     """End tooltip window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_81end_tooltip(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_80end_tooltip[] = "end_tooltip()\nEnd tooltip window.\n\n    See :func:`begin_tooltip()` for full usage example.\n\n    .. wraps::\n        void EndTooltip()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_81end_tooltip = {"end_tooltip", (PyCFunction)__pyx_pw_5imgui_4core_81end_tooltip, METH_NOARGS, __pyx_doc_5imgui_4core_80end_tooltip};
static PyObject *__pyx_pw_5imgui_4core_81end_tooltip(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_tooltip (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_80end_tooltip(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_80end_tooltip(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_tooltip", 0);

  /* "imgui/core.pyx":1887
 *         void EndTooltip()
 *     """
 *     cimgui.EndTooltip()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndTooltip();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1887, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1879
 * 
 * 
 * def end_tooltip():             # <<<<<<<<<<<<<<
 *     """End tooltip window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_tooltip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1890
 * 
 * 
 * def begin_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Create new full-screen menu bar.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_83begin_main_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_82begin_main_menu_bar[] = "begin_main_menu_bar()\nCreate new full-screen menu bar.\n\n     Only call :func:`end_main_menu_bar` if this function returns ``True``!\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n        :width: 200\n        :click: 10 10\n\n        if imgui.begin_main_menu_bar():\n            # first menu dropdown\n            if imgui.begin_menu('File', True):\n                imgui.menu_item('New', 'Ctrl+N', False, True)\n                imgui.menu_item('Open ...', 'Ctrl+O', False, True)\n\n                # submenu\n                if imgui.begin_menu('Open Recent', True):\n                    imgui.menu_item('doc.txt', None, False, True)\n                    imgui.end_menu()\n\n                imgui.end_menu()\n\n            imgui.end_main_menu_bar()\n\n    Returns:\n        bool: True if main menu bar is displayed (opened).\n\n    .. wraps::\n        bool BeginMainMenuBar()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_83begin_main_menu_bar = {"begin_main_menu_bar", (PyCFunction)__pyx_pw_5imgui_4core_83begin_main_menu_bar, METH_NOARGS, __pyx_doc_5imgui_4core_82begin_main_menu_bar};
static PyObject *__pyx_pw_5imgui_4core_83begin_main_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_main_menu_bar (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_82begin_main_menu_bar(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_82begin_main_menu_bar(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("begin_main_menu_bar", 0);

  /* "imgui/core.pyx":1922
 *         bool BeginMainMenuBar()
 *     """
 *     return cimgui.BeginMainMenuBar()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::BeginMainMenuBar();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1922, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1890
 * 
 * 
 * def begin_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Create new full-screen menu bar.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.begin_main_menu_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1925
 * 
 * 
 * def end_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close main menu bar context.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_85end_main_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_84end_main_menu_bar[] = "end_main_menu_bar()\nClose main menu bar context.\n\n    Only call this function if the :func:`end_main_menu_bar` returns ``True``.\n\n    For practical example how to use this function see documentation of\n    :func:`begin_main_menu_bar`.\n\n    .. wraps::\n        bool EndMainMenuBar()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_85end_main_menu_bar = {"end_main_menu_bar", (PyCFunction)__pyx_pw_5imgui_4core_85end_main_menu_bar, METH_NOARGS, __pyx_doc_5imgui_4core_84end_main_menu_bar};
static PyObject *__pyx_pw_5imgui_4core_85end_main_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_main_menu_bar (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_84end_main_menu_bar(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_84end_main_menu_bar(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_main_menu_bar", 0);

  /* "imgui/core.pyx":1936
 *         bool EndMainMenuBar()
 *     """
 *     cimgui.EndMainMenuBar()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndMainMenuBar();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1936, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1925
 * 
 * 
 * def end_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close main menu bar context.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_main_menu_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1939
 * 
 * 
 * def begin_menu_bar():             # <<<<<<<<<<<<<<
 *     """Append new menu menu bar to current window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_87begin_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_86begin_menu_bar[] = "begin_menu_bar()\nAppend new menu menu bar to current window.\n\n    This function is different from :func:`begin_main_menu_bar`, as this is\n    child-window specific. Only call :func:`end_menu_bar` if this returns\n    ``True``!\n\n    **Note:** this requires :ref:`WINDOW_MENU_BAR <window-flag-options>` flag\n    to be set for the current window. Without this flag set the\n    ``begin_menu_bar()`` function will always return ``False``.\n\n    .. visual-example::\n        :auto_layout:\n        :click: 25 30\n\n        flags = imgui.WINDOW_MENU_BAR\n\n        imgui.begin(\"Child Window - File Browser\", flags=flags)\n\n        if imgui.begin_menu_bar():\n            if imgui.begin_menu('File'):\n                imgui.menu_item('Close')\n                imgui.end_menu()\n\n            imgui.end_menu_bar()\n\n        imgui.end()\n\n    Returns:\n        bool: True if menu bar is displayed (opened).\n\n    .. wraps::\n        bool BeginMenuBar()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_87begin_menu_bar = {"begin_menu_bar", (PyCFunction)__pyx_pw_5imgui_4core_87begin_menu_bar, METH_NOARGS, __pyx_doc_5imgui_4core_86begin_menu_bar};
static PyObject *__pyx_pw_5imgui_4core_87begin_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_menu_bar (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_86begin_menu_bar(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_86begin_menu_bar(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("begin_menu_bar", 0);

  /* "imgui/core.pyx":1973
 *         bool BeginMenuBar()
 *     """
 *     return cimgui.BeginMenuBar()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::BeginMenuBar();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1973, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1939
 * 
 * 
 * def begin_menu_bar():             # <<<<<<<<<<<<<<
 *     """Append new menu menu bar to current window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.begin_menu_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1976
 * 
 * 
 * def end_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close menu bar context.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_89end_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_88end_menu_bar[] = "end_menu_bar()\nClose menu bar context.\n\n    Only call this function if the :func:`begin_menu_bar` returns true.\n\n    For practical example how to use this function see documentation of\n    :func:`begin_menu_bar`.\n\n    .. wraps::\n        void EndMenuBar()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_89end_menu_bar = {"end_menu_bar", (PyCFunction)__pyx_pw_5imgui_4core_89end_menu_bar, METH_NOARGS, __pyx_doc_5imgui_4core_88end_menu_bar};
static PyObject *__pyx_pw_5imgui_4core_89end_menu_bar(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_menu_bar (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_88end_menu_bar(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_88end_menu_bar(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_menu_bar", 0);

  /* "imgui/core.pyx":1987
 *         void EndMenuBar()
 *     """
 *     cimgui.EndMenuBar()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndMenuBar();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1987, __pyx_L1_error)
  }

  /* "imgui/core.pyx":1976
 * 
 * 
 * def end_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close menu bar context.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_menu_bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":1990
 * 
 * 
 * def begin_menu(str label, enabled=True):             # <<<<<<<<<<<<<<
 *     """Create new expandable menu in current menu bar.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_91begin_menu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_90begin_menu[] = "begin_menu(str label, enabled=True)\nCreate new expandable menu in current menu bar.\n\n    Only call :func:`end_menu` if this returns ``True``!\n\n    For practical example how to use this function, please see documentation\n    of :func:`begin_main_menu_bar` or :func:`begin_menu_bar`.\n\n    Args:\n        label (str): label of the menu.\n        enabled (bool): define if menu is enabled or disabled.\n\n    Returns:\n        bool: True if the menu is displayed (opened).\n\n    .. wraps::\n        bool BeginMenu(\n            const char* label,\n            bool enabled\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_91begin_menu = {"begin_menu", (PyCFunction)__pyx_pw_5imgui_4core_91begin_menu, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_90begin_menu};
static PyObject *__pyx_pw_5imgui_4core_91begin_menu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_enabled = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_menu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_enabled,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_enabled);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_menu") < 0)) __PYX_ERR(0, 1990, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_enabled = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_menu", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1990, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin_menu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 1990, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_90begin_menu(__pyx_self, __pyx_v_label, __pyx_v_enabled);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_90begin_menu(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  bool __pyx_t_4;
  __Pyx_RefNannySetupContext("begin_menu", 0);

  /* "imgui/core.pyx":2011
 *         )
 *     """
 *     return cimgui.BeginMenu(_bytes(label), enabled)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2011, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_enabled); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2011, __pyx_L1_error)
  try {
    __pyx_t_4 = ImGui::BeginMenu(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2011, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":1990
 * 
 * 
 * def begin_menu(str label, enabled=True):             # <<<<<<<<<<<<<<
 *     """Create new expandable menu in current menu bar.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.begin_menu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2014
 * 
 * 
 * def end_menu():             # <<<<<<<<<<<<<<
 *     """Close menu context.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_93end_menu(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_92end_menu[] = "end_menu()\nClose menu context.\n\n    Only call this function if the :func:`begin_menu` returns ``True``.\n\n    For practical example how to use this function, please see documentation\n    of :func:`begin_main_menu_bar` or :func:`begin_menu_bar`.\n\n    .. wraps::\n        void EndMenu()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_93end_menu = {"end_menu", (PyCFunction)__pyx_pw_5imgui_4core_93end_menu, METH_NOARGS, __pyx_doc_5imgui_4core_92end_menu};
static PyObject *__pyx_pw_5imgui_4core_93end_menu(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_menu (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_92end_menu(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_92end_menu(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_menu", 0);

  /* "imgui/core.pyx":2025
 *         void EndMenu()
 *     """
 *     cimgui.EndMenu()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndMenu();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2025, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2014
 * 
 * 
 * def end_menu():             # <<<<<<<<<<<<<<
 *     """Close menu context.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_menu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2028
 * 
 * 
 * def menu_item(             # <<<<<<<<<<<<<<
 *     str name, str shortcut=None, cimgui.bool selected=None, enabled=True
 * ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_95menu_item(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_94menu_item[] = "menu_item(str name, str shortcut=None, bool selected=None, enabled=True)\nCreate a menu item.\n\n    Item shortcuts are displayed for convenience but not processed by ImGui at\n    the moment. Using ``selected`` arguement it is possible to show and trigger\n    a check mark next to the menu item label.\n\n    For practical example how to use this function, please see documentation\n    of :func:`begin_main_menu_bar` or :func:`begin_menu_bar`.\n\n    Args:\n        label (str): label of the menu item.\n        shortcut (str): shortcut text of the menu item.\n        selected (bool): define if menu item is selected.\n        enabled (bool): define if menu item is enabled or disabled.\n\n    Returns:\n        tuple: a ``(clicked, state)`` two-tuple indicating if item was\n        clicked by the user and the current state of item (visibility of\n        the check mark).\n\n    .. wraps::\n        MenuItem(\n            const char* label,\n            const char* shortcut,\n            bool* p_selected,\n            bool enabled = true\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_95menu_item = {"menu_item", (PyCFunction)__pyx_pw_5imgui_4core_95menu_item, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_94menu_item};
static PyObject *__pyx_pw_5imgui_4core_95menu_item(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_shortcut = 0;
  bool __pyx_v_selected;
  PyObject *__pyx_v_enabled = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("menu_item (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name_2,&__pyx_n_s_shortcut,&__pyx_n_s_selected,&__pyx_n_s_enabled,0};
    PyObject* values[4] = {0,0,0,0};

    /* "imgui/core.pyx":2029
 * 
 * def menu_item(
 *     str name, str shortcut=None, cimgui.bool selected=None, enabled=True             # <<<<<<<<<<<<<<
 * ):
 *     """Create a menu item.
 */
    values[1] = ((PyObject*)Py_None);
    values[3] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shortcut);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_selected);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_enabled);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "menu_item") < 0)) __PYX_ERR(0, 2028, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = ((PyObject*)values[0]);
    __pyx_v_shortcut = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_selected = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_selected == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2029, __pyx_L3_error)
    } else {
      __pyx_v_selected = __pyx_k__36;
    }
    __pyx_v_enabled = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("menu_item", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2028, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.menu_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) __PYX_ERR(0, 2029, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shortcut), (&PyString_Type), 1, "shortcut", 1))) __PYX_ERR(0, 2029, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_94menu_item(__pyx_self, __pyx_v_name, __pyx_v_shortcut, __pyx_v_selected, __pyx_v_enabled);

  /* "imgui/core.pyx":2028
 * 
 * 
 * def menu_item(             # <<<<<<<<<<<<<<
 *     str name, str shortcut=None, cimgui.bool selected=None, enabled=True
 * ):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_94menu_item(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_shortcut, bool __pyx_v_selected, PyObject *__pyx_v_enabled) {
  bool __pyx_v_inout_selected;
  bool __pyx_v_clicked;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char const *__pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("menu_item", 0);

  /* "imgui/core.pyx":2059
 *         )
 *     """
 *     cdef cimgui.bool inout_selected = selected             # <<<<<<<<<<<<<<
 * 
 *     # note: wee need to split this into two separate calls depending
 */
  __pyx_v_inout_selected = __pyx_v_selected;

  /* "imgui/core.pyx":2064
 *     #       on the value of shortcut in order to support None instead
 *     #       of empty strings.
 *     if shortcut is None:             # <<<<<<<<<<<<<<
 *         clicked = cimgui.MenuItem(
 *             _bytes(name),
 */
  __pyx_t_1 = (__pyx_v_shortcut == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "imgui/core.pyx":2066
 *     if shortcut is None:
 *         clicked = cimgui.MenuItem(
 *             _bytes(name),             # <<<<<<<<<<<<<<
 *             NULL,
 *             &inout_selected,
 */
    __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 2066, __pyx_L1_error)

    /* "imgui/core.pyx":2070
 *             &inout_selected,
 *             <bool>enabled
 *         )             # <<<<<<<<<<<<<<
 *     else:
 *         clicked = cimgui.MenuItem(
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_enabled); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2070, __pyx_L1_error)

    /* "imgui/core.pyx":2065
 *     #       of empty strings.
 *     if shortcut is None:
 *         clicked = cimgui.MenuItem(             # <<<<<<<<<<<<<<
 *             _bytes(name),
 *             NULL,
 */
    try {
      __pyx_t_6 = ImGui::MenuItem(__pyx_t_4, NULL, (&__pyx_v_inout_selected), ((bool)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2065, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_clicked = __pyx_t_6;

    /* "imgui/core.pyx":2064
 *     #       on the value of shortcut in order to support None instead
 *     #       of empty strings.
 *     if shortcut is None:             # <<<<<<<<<<<<<<
 *         clicked = cimgui.MenuItem(
 *             _bytes(name),
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":2072
 *         )
 *     else:
 *         clicked = cimgui.MenuItem(             # <<<<<<<<<<<<<<
 *             _bytes(name),
 *             _bytes(shortcut),
 */
  /*else*/ {

    /* "imgui/core.pyx":2073
 *     else:
 *         clicked = cimgui.MenuItem(
 *             _bytes(name),             # <<<<<<<<<<<<<<
 *             _bytes(shortcut),
 *             &inout_selected,
 */
    __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 2073, __pyx_L1_error)

    /* "imgui/core.pyx":2074
 *         clicked = cimgui.MenuItem(
 *             _bytes(name),
 *             _bytes(shortcut),             # <<<<<<<<<<<<<<
 *             &inout_selected,
 *             <bool>enabled
 */
    __pyx_t_7 = __pyx_f_5imgui_4core__bytes(__pyx_v_shortcut); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2074, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_t_7); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 2074, __pyx_L1_error)

    /* "imgui/core.pyx":2077
 *             &inout_selected,
 *             <bool>enabled
 *         )             # <<<<<<<<<<<<<<
 *     return clicked, inout_selected
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_enabled); if (unlikely((__pyx_t_6 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2077, __pyx_L1_error)

    /* "imgui/core.pyx":2072
 *         )
 *     else:
 *         clicked = cimgui.MenuItem(             # <<<<<<<<<<<<<<
 *             _bytes(name),
 *             _bytes(shortcut),
 */
    try {
      __pyx_t_5 = ImGui::MenuItem(__pyx_t_4, __pyx_t_8, (&__pyx_v_inout_selected), ((bool)__pyx_t_6));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2072, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_clicked = __pyx_t_5;
  }
  __pyx_L3:;

  /* "imgui/core.pyx":2078
 *             <bool>enabled
 *         )
 *     return clicked, inout_selected             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_clicked); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_inout_selected); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_3);
  __pyx_t_7 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2028
 * 
 * 
 * def menu_item(             # <<<<<<<<<<<<<<
 *     str name, str shortcut=None, cimgui.bool selected=None, enabled=True
 * ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.menu_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2081
 * 
 * 
 * def open_popup(str name):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_97open_popup(PyObject *__pyx_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_5imgui_4core_96open_popup[] = "open_popup(str name)\nOpen a popup window.\n\n    Marks a popup window as open. Popups are closed when user click outside,\n    or activate a pressable item, or :func:`close_current_popup()` is\n    called within a :func:`begin_popup()`/:func:`end_popup()` block.\n    Popup identifiers are relative to the current ID-stack\n    (so :func:`open_popup` and :func:`begin_popup` needs to be at\n    the same level).\n\n    .. visual-example::\n        :title: Simple popup window\n        :height: 100\n        :width: 220\n        :auto_layout:\n\n        imgui.begin(\"Example: simple popup\")\n        if imgui.button('Toggle..'):\n            imgui.open_popup(\"toggle\")\n        if imgui.begin_popup(\"toggle\"):\n            if imgui.begin_menu('Sub-menu'):\n                _, _ = imgui.menu_item('Click me')\n                imgui.end_menu()\n            imgui.end_popup()\n        imgui.end()\n\n    Args:\n        name (str): label of the modal window.\n\n    .. wraps::\n        void OpenPopup(\n            const char* str_id\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_97open_popup = {"open_popup", (PyCFunction)__pyx_pw_5imgui_4core_97open_popup, METH_O, __pyx_doc_5imgui_4core_96open_popup};
static PyObject *__pyx_pw_5imgui_4core_97open_popup(PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open_popup (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) __PYX_ERR(0, 2081, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_96open_popup(__pyx_self, ((PyObject*)__pyx_v_name));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_96open_popup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  __Pyx_RefNannySetupContext("open_popup", 0);

  /* "imgui/core.pyx":2115
 *         )
 *     """
 *     cimgui.OpenPopup(_bytes(name))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2115, __pyx_L1_error)
  try {
    ImGui::OpenPopup(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2115, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2081
 * 
 * 
 * def open_popup(str name):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.open_popup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2118
 * 
 * 
 * def begin_popup(str name):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_99begin_popup(PyObject *__pyx_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_5imgui_4core_98begin_popup[] = "begin_popup(str name)\nOpen a popup window.\n\n    Returns ``True`` if the popup is open and you can start outputting\n    content to it. Only call :func:`end_popup()` if :func:`begin_popup()`\n    returned true.\n\n    .. visual-example::\n        :title: Simple popup window\n        :height: 100\n        :width: 220\n        :auto_layout:\n\n        imgui.begin(\"Example: simple popup\")\n\n        if imgui.button(\"select\"):\n            imgui.open_popup(\"select-popup\")\n\n        imgui.same_line()\n\n        if imgui.begin_popup(\"select-popup\"):\n            imgui.text(\"Select one\")\n            imgui.separator()\n            imgui.selectable(\"One\")\n            imgui.selectable(\"Two\")\n            imgui.selectable(\"Three\")\n            imgui.end_popup()\n\n        imgui.end()\n\n    Args:\n        name (str): label of the modal window.\n\n    Returns:\n        opened (bool): True if popup is opened.\n\n    .. wraps::\n        bool BeginPopup(\n            const char* str_id\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_99begin_popup = {"begin_popup", (PyCFunction)__pyx_pw_5imgui_4core_99begin_popup, METH_O, __pyx_doc_5imgui_4core_98begin_popup};
static PyObject *__pyx_pw_5imgui_4core_99begin_popup(PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_popup (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) __PYX_ERR(0, 2118, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_98begin_popup(__pyx_self, ((PyObject*)__pyx_v_name));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_98begin_popup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  __Pyx_RefNannySetupContext("begin_popup", 0);

  /* "imgui/core.pyx":2159
 *         )
 *     """
 *     return cimgui.BeginPopup(_bytes(name))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2159, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::BeginPopup(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2159, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2118
 * 
 * 
 * def begin_popup(str name):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.begin_popup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2162
 * 
 * 
 * def begin_popup_modal(str title, visible=None, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin pouring popup contents.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_101begin_popup_modal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_100begin_popup_modal[] = "begin_popup_modal(str title, visible=None, ImGuiWindowFlags flags=0)\nBegin pouring popup contents.\n\n    Differes from :func:`begin_popup()` with its modality - meaning it\n    opens up on top of every other window.\n\n    .. visual-example::\n        :title: Simple popup window\n        :height: 100\n        :width: 220\n        :auto_layout:\n\n        imgui.begin(\"Example: simple popup modal\")\n\n        if imgui.button(\"Open Modal popup\"):\n            imgui.open_popup(\"select-popup\")\n\n        imgui.same_line()\n\n        if imgui.begin_popup_modal(\"select-popup\")[0]:\n            imgui.text(\"Select an option:\")\n            imgui.separator()\n            imgui.selectable(\"One\")\n            imgui.selectable(\"Two\")\n            imgui.selectable(\"Three\")\n            imgui.end_popup()\n\n        imgui.end()\n\n    Args:\n        title (str): label of the modal window.\n        visible (bool): define if popup is visible or not.\n        flags: Window flags. See:\n            :ref:`list of available flags <window-flag-options>`.\n\n    Returns:\n        tuple: ``(opened, visible)`` tuple of bools.\n        opened can be ``False`` when the popup is completely clipped\n        (e.g. zero size display).\n\n    .. wraps::\n        bool BeginPopupModal(\n            const char* name,\n            bool* p_open = NULL,\n            ImGuiWindowFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_101begin_popup_modal = {"begin_popup_modal", (PyCFunction)__pyx_pw_5imgui_4core_101begin_popup_modal, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_100begin_popup_modal};
static PyObject *__pyx_pw_5imgui_4core_101begin_popup_modal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_title = 0;
  PyObject *__pyx_v_visible = 0;
  ImGuiWindowFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_popup_modal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_title,&__pyx_n_s_visible,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_title)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_visible);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_popup_modal") < 0)) __PYX_ERR(0, 2162, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_title = ((PyObject*)values[0]);
    __pyx_v_visible = values[1];
    if (values[2]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiWindowFlags(values[2]); if (unlikely((__pyx_v_flags == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2162, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiWindowFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_popup_modal", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2162, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin_popup_modal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_title), (&PyString_Type), 1, "title", 1))) __PYX_ERR(0, 2162, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_100begin_popup_modal(__pyx_self, __pyx_v_title, __pyx_v_visible, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_100begin_popup_modal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_title, PyObject *__pyx_v_visible, ImGuiWindowFlags __pyx_v_flags) {
  bool __pyx_v_inout_visible;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool *__pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("begin_popup_modal", 0);

  /* "imgui/core.pyx":2209
 *         )
 *     """
 *     cdef cimgui.bool inout_visible = visible             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.BeginPopupModal(
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_visible); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2209, __pyx_L1_error)
  __pyx_v_inout_visible = __pyx_t_1;

  /* "imgui/core.pyx":2211
 *     cdef cimgui.bool inout_visible = visible
 * 
 *     return cimgui.BeginPopupModal(             # <<<<<<<<<<<<<<
 *         _bytes(title),
 *         &inout_visible if visible is not None else NULL,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":2212
 * 
 *     return cimgui.BeginPopupModal(
 *         _bytes(title),             # <<<<<<<<<<<<<<
 *         &inout_visible if visible is not None else NULL,
 *         flags
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_title); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 2212, __pyx_L1_error)

  /* "imgui/core.pyx":2213
 *     return cimgui.BeginPopupModal(
 *         _bytes(title),
 *         &inout_visible if visible is not None else NULL,             # <<<<<<<<<<<<<<
 *         flags
 *     ), inout_visible
 */
  __pyx_t_5 = (__pyx_v_visible != Py_None);
  if ((__pyx_t_5 != 0)) {
    __pyx_t_4 = (&__pyx_v_inout_visible);
  } else {
    __pyx_t_4 = NULL;
  }

  /* "imgui/core.pyx":2211
 *     cdef cimgui.bool inout_visible = visible
 * 
 *     return cimgui.BeginPopupModal(             # <<<<<<<<<<<<<<
 *         _bytes(title),
 *         &inout_visible if visible is not None else NULL,
 */
  try {
    __pyx_t_1 = ImGui::BeginPopupModal(__pyx_t_3, __pyx_t_4, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2211, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":2215
 *         &inout_visible if visible is not None else NULL,
 *         flags
 *     ), inout_visible             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_inout_visible); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "imgui/core.pyx":2211
 *     cdef cimgui.bool inout_visible = visible
 * 
 *     return cimgui.BeginPopupModal(             # <<<<<<<<<<<<<<
 *         _bytes(title),
 *         &inout_visible if visible is not None else NULL,
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_2 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2162
 * 
 * 
 * def begin_popup_modal(str title, visible=None, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin pouring popup contents.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("imgui.core.begin_popup_modal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2218
 * 
 * 
 * def begin_popup_context_item(str name, int mouse_button=1):             # <<<<<<<<<<<<<<
 *     """This is a helper function to handle the most simple case of associating
 *     one named popup to one given widget.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_103begin_popup_context_item(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_102begin_popup_context_item[] = "begin_popup_context_item(str name, int mouse_button=1)\nThis is a helper function to handle the most simple case of associating\n    one named popup to one given widget.\n\n    .. visual-example::\n        :title: Popup context view\n        :height: 100\n        :width: 200\n        :auto_layout:\n        :click: 40 40\n\n        imgui.begin(\"Example: popup context view\")\n        imgui.text(\"Right-click to set value.\")\n        if imgui.begin_popup_context_item(\"Item Context Menu\", mouse_button=0):\n            imgui.selectable(\"Set to Zero\")\n            imgui.end_popup()\n        imgui.end()\n\n    Args:\n        name (str): label of item.\n        mouse_button (int): mouse button identifier: 0 - left button,\n            1 - right button, 2 - middle button\n\n    Returns:\n        opened (bool): opened can be False when the popup is completely\n        clipped (e.g. zero size display).\n\n    .. wraps::\n        bool BeginPopupContextItem(\n            const char* str_id,\n            int mouse_button = 1\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_103begin_popup_context_item = {"begin_popup_context_item", (PyCFunction)__pyx_pw_5imgui_4core_103begin_popup_context_item, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_102begin_popup_context_item};
static PyObject *__pyx_pw_5imgui_4core_103begin_popup_context_item(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_v_mouse_button;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_popup_context_item (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name_2,&__pyx_n_s_mouse_button,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mouse_button);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_popup_context_item") < 0)) __PYX_ERR(0, 2218, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_mouse_button = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_mouse_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2218, __pyx_L3_error)
    } else {
      __pyx_v_mouse_button = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_popup_context_item", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2218, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin_popup_context_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) __PYX_ERR(0, 2218, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_102begin_popup_context_item(__pyx_self, __pyx_v_name, __pyx_v_mouse_button);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_102begin_popup_context_item(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, int __pyx_v_mouse_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  __Pyx_RefNannySetupContext("begin_popup_context_item", 0);

  /* "imgui/core.pyx":2251
 *         )
 *     """
 *     return cimgui.BeginPopupContextItem(_bytes(name), mouse_button)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2251, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::BeginPopupContextItem(__pyx_t_2, __pyx_v_mouse_button);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2251, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2218
 * 
 * 
 * def begin_popup_context_item(str name, int mouse_button=1):             # <<<<<<<<<<<<<<
 *     """This is a helper function to handle the most simple case of associating
 *     one named popup to one given widget.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.begin_popup_context_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2254
 * 
 * 
 * def begin_popup_context_window(             # <<<<<<<<<<<<<<
 *     bool also_over_items=True,
 *     str name=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_105begin_popup_context_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_104begin_popup_context_window[] = "begin_popup_context_window(bool also_over_items=True, str name=None, int mouse_button=1)\nHelper function to open and begin popup when clicked on current window.\n\n    As all popup functions it should end with :func:`end_popup()`.\n\n    .. visual-example::\n        :title: Popup context view\n        :height: 100\n        :width: 200\n        :auto_layout:\n        :click: 40 40\n\n        imgui.begin(\"Example: popup context window\")\n        if imgui.begin_popup_context_window(mouse_button=0):\n            imgui.selectable(\"Clear\")\n            imgui.end_popup()\n        imgui.end()\n\n    Args:\n        also_over_items (bool): display on top of widget.\n        name (str): name of the window\n        mouse_button (int): mouse button identifier:\n            0 - left button\n            1 - right button\n            2 - middle button\n\n    Returns:\n        opened (bool): if the context window is opened.\n\n    .. wraps::\n        bool BeginPopupContextWindow(\n            bool also_over_items = true,\n            const char* str_id = NULL,\n            int mouse_button = 1\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_105begin_popup_context_window = {"begin_popup_context_window", (PyCFunction)__pyx_pw_5imgui_4core_105begin_popup_context_window, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_104begin_popup_context_window};
static PyObject *__pyx_pw_5imgui_4core_105begin_popup_context_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_also_over_items;
  PyObject *__pyx_v_name = 0;
  int __pyx_v_mouse_button;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_popup_context_window (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_also_over_items,&__pyx_n_s_name_2,&__pyx_n_s_mouse_button,0};
    PyObject* values[3] = {0,0,0};

    /* "imgui/core.pyx":2256
 * def begin_popup_context_window(
 *     bool also_over_items=True,
 *     str name=None,             # <<<<<<<<<<<<<<
 *     int mouse_button=1
 * ):
 */
    values[1] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_also_over_items);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name_2);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mouse_button);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin_popup_context_window") < 0)) __PYX_ERR(0, 2254, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_also_over_items = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_also_over_items == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2255, __pyx_L3_error)
    } else {

      /* "imgui/core.pyx":2255
 * 
 * def begin_popup_context_window(
 *     bool also_over_items=True,             # <<<<<<<<<<<<<<
 *     str name=None,
 *     int mouse_button=1
 */
      __pyx_v_also_over_items = ((bool)1);
    }
    __pyx_v_name = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_mouse_button = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_mouse_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2257, __pyx_L3_error)
    } else {
      __pyx_v_mouse_button = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_popup_context_window", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2254, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.begin_popup_context_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) __PYX_ERR(0, 2256, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_104begin_popup_context_window(__pyx_self, __pyx_v_also_over_items, __pyx_v_name, __pyx_v_mouse_button);

  /* "imgui/core.pyx":2254
 * 
 * 
 * def begin_popup_context_window(             # <<<<<<<<<<<<<<
 *     bool also_over_items=True,
 *     str name=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_104begin_popup_context_window(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_also_over_items, PyObject *__pyx_v_name, int __pyx_v_mouse_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  __Pyx_RefNannySetupContext("begin_popup_context_window", 0);

  /* "imgui/core.pyx":2294
 *         )
 *     """
 *     if name is None:             # <<<<<<<<<<<<<<
 *         return cimgui.BeginPopupContextWindow(
 *             also_over_items,
 */
  __pyx_t_1 = (__pyx_v_name == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "imgui/core.pyx":2295
 *     """
 *     if name is None:
 *         return cimgui.BeginPopupContextWindow(             # <<<<<<<<<<<<<<
 *             also_over_items,
 *             NULL,
 */
    __Pyx_XDECREF(__pyx_r);

    /* "imgui/core.pyx":2299
 *             NULL,
 *             mouse_button
 *         )             # <<<<<<<<<<<<<<
 *     else:
 *         return cimgui.BeginPopupContextWindow(
 */
    try {
      __pyx_t_3 = ImGui::BeginPopupContextWindow(__pyx_v_also_over_items, NULL, __pyx_v_mouse_button);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2295, __pyx_L1_error)
    }

    /* "imgui/core.pyx":2295
 *     """
 *     if name is None:
 *         return cimgui.BeginPopupContextWindow(             # <<<<<<<<<<<<<<
 *             also_over_items,
 *             NULL,
 */
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "imgui/core.pyx":2294
 *         )
 *     """
 *     if name is None:             # <<<<<<<<<<<<<<
 *         return cimgui.BeginPopupContextWindow(
 *             also_over_items,
 */
  }

  /* "imgui/core.pyx":2301
 *         )
 *     else:
 *         return cimgui.BeginPopupContextWindow(             # <<<<<<<<<<<<<<
 *             also_over_items,
 *             _bytes(name),
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);

    /* "imgui/core.pyx":2303
 *         return cimgui.BeginPopupContextWindow(
 *             also_over_items,
 *             _bytes(name),             # <<<<<<<<<<<<<<
 *             mouse_button
 *         )
 */
    __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 2303, __pyx_L1_error)

    /* "imgui/core.pyx":2301
 *         )
 *     else:
 *         return cimgui.BeginPopupContextWindow(             # <<<<<<<<<<<<<<
 *             also_over_items,
 *             _bytes(name),
 */
    try {
      __pyx_t_3 = ImGui::BeginPopupContextWindow(__pyx_v_also_over_items, __pyx_t_5, __pyx_v_mouse_button);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2301, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "imgui/core.pyx":2254
 * 
 * 
 * def begin_popup_context_window(             # <<<<<<<<<<<<<<
 *     bool also_over_items=True,
 *     str name=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("imgui.core.begin_popup_context_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2308
 * 
 * 
 * def end_popup():             # <<<<<<<<<<<<<<
 *     """End a popup window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_107end_popup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_106end_popup[] = "end_popup()\nEnd a popup window.\n\n    Should be called after each XYZPopupXYZ function.\n\n    For practical example how to use this function, please see documentation\n    of :func:`open_popup`.\n\n    .. wraps::\n        void EndPopup()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_107end_popup = {"end_popup", (PyCFunction)__pyx_pw_5imgui_4core_107end_popup, METH_NOARGS, __pyx_doc_5imgui_4core_106end_popup};
static PyObject *__pyx_pw_5imgui_4core_107end_popup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_popup (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_106end_popup(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_106end_popup(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_popup", 0);

  /* "imgui/core.pyx":2319
 *         void EndPopup()
 *     """
 *     cimgui.EndPopup()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::EndPopup();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2319, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2308
 * 
 * 
 * def end_popup():             # <<<<<<<<<<<<<<
 *     """End a popup window.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_popup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2322
 * 
 * 
 * def close_current_popup():             # <<<<<<<<<<<<<<
 *     """Close the current popup window begin-ed directly above this call.
 *     Clicking on a :func:`menu_item()` or :func:`selectable()` automatically
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_109close_current_popup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_108close_current_popup[] = "close_current_popup()\nClose the current popup window begin-ed directly above this call.\n    Clicking on a :func:`menu_item()` or :func:`selectable()` automatically\n    close the current popup.\n\n    For practical example how to use this function, please see documentation\n    of :func:`open_popup`.\n\n    .. wraps::\n        void CloseCurrentPopup()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_109close_current_popup = {"close_current_popup", (PyCFunction)__pyx_pw_5imgui_4core_109close_current_popup, METH_NOARGS, __pyx_doc_5imgui_4core_108close_current_popup};
static PyObject *__pyx_pw_5imgui_4core_109close_current_popup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close_current_popup (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_108close_current_popup(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_108close_current_popup(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close_current_popup", 0);

  /* "imgui/core.pyx":2333
 *         void CloseCurrentPopup()
 *     """
 *     cimgui.CloseCurrentPopup()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::CloseCurrentPopup();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2333, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2322
 * 
 * 
 * def close_current_popup():             # <<<<<<<<<<<<<<
 *     """Close the current popup window begin-ed directly above this call.
 *     Clicking on a :func:`menu_item()` or :func:`selectable()` automatically
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.close_current_popup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2336
 * 
 * 
 * def text(str text):             # <<<<<<<<<<<<<<
 *     """Add text to current widget stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_111text(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static char __pyx_doc_5imgui_4core_110text[] = "text(str text)\nAdd text to current widget stack.\n\n    .. visual-example::\n        :title: simple text widget\n        :height: 80\n        :auto_layout:\n\n        imgui.begin(\"Example: simple text\")\n        imgui.text(\"Simple text\")\n        imgui.end()\n\n    Args:\n        text (str): text to display.\n\n    .. wraps::\n        Text(const char* fmt, ...)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_111text = {"text", (PyCFunction)__pyx_pw_5imgui_4core_111text, METH_O, __pyx_doc_5imgui_4core_110text};
static PyObject *__pyx_pw_5imgui_4core_111text(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 2336, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_110text(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_110text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  __Pyx_RefNannySetupContext("text", 0);

  /* "imgui/core.pyx":2355
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.Text("%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2355, __pyx_L1_error)
  try {
    ImGui::Text(((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2355, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2336
 * 
 * 
 * def text(str text):             # <<<<<<<<<<<<<<
 *     """Add text to current widget stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2358
 * 
 * 
 * def text_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add colored text to current widget stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_113text_colored(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_112text_colored[] = "text_colored(str text, float r, float g, float b, float a=1.0)\nAdd colored text to current widget stack.\n\n    It is a shortcut for:\n\n    .. code-block:: python\n\n        imgui.push_style_color(imgui.COLOR_TEXT, r, g, b, a)\n        imgui.text(text)\n        imgui.pop_style_color()\n\n\n    .. visual-example::\n        :title: colored text widget\n        :height: 100\n        :auto_layout:\n\n        imgui.begin(\"Example: colored text\")\n        imgui.text_colored(\"Colored text\", 1, 0, 0)\n        imgui.end()\n\n    Args:\n        text (str): text to display.\n        r (float): red color intensity.\n        g (float): green color intensity.\n        b (float): blue color instensity.\n        a (float): alpha intensity.\n\n    .. wraps::\n        TextColored(const ImVec4& col, const char* fmt, ...)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_113text_colored = {"text_colored", (PyCFunction)__pyx_pw_5imgui_4core_113text_colored, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_112text_colored};
static PyObject *__pyx_pw_5imgui_4core_113text_colored(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text_colored (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("text_colored", 0, 4, 5, 1); __PYX_ERR(0, 2358, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("text_colored", 0, 4, 5, 2); __PYX_ERR(0, 2358, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("text_colored", 0, 4, 5, 3); __PYX_ERR(0, 2358, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "text_colored") < 0)) __PYX_ERR(0, 2358, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2358, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2358, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2358, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_a = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2358, __pyx_L3_error)
    } else {
      __pyx_v_a = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("text_colored", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2358, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.text_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 2358, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_112text_colored(__pyx_self, __pyx_v_text, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_112text_colored(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  __Pyx_RefNannySetupContext("text_colored", 0);

  /* "imgui/core.pyx":2390
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.TextColored(_cast_args_ImVec4(r, g, b, a), "%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2390, __pyx_L1_error)
  try {
    ImGui::TextColored(__pyx_f_5imgui_4core__cast_args_ImVec4(__pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a), ((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2390, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2358
 * 
 * 
 * def text_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add colored text to current widget stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.text_colored", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2393
 * 
 * 
 * def label_text(str label, str text):             # <<<<<<<<<<<<<<
 *     """Display text+label aligned the same way as value+label widgets.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_115label_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_114label_text[] = "label_text(str label, str text)\nDisplay text+label aligned the same way as value+label widgets.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 80\n        :width: 300\n\n        imgui.begin(\"Example: text with label\")\n        imgui.label_text(\"my label\", \"my text\")\n        imgui.end()\n\n    Args:\n        label (str): label to display.\n        text (str): text to display.\n\n    .. wraps::\n        void LabelText(const char* label, const char* fmt, ...)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_115label_text = {"label_text", (PyCFunction)__pyx_pw_5imgui_4core_115label_text, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_114label_text};
static PyObject *__pyx_pw_5imgui_4core_115label_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_text = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("label_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_text,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("label_text", 1, 2, 2, 1); __PYX_ERR(0, 2393, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "label_text") < 0)) __PYX_ERR(0, 2393, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_text = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("label_text", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2393, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.label_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2393, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 2393, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_114label_text(__pyx_self, __pyx_v_label, __pyx_v_text);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_114label_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("label_text", 0);

  /* "imgui/core.pyx":2413
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.LabelText(_bytes(label), "%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2413, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 2413, __pyx_L1_error)
  try {
    ImGui::LabelText(__pyx_t_2, ((char const *)"%s"), __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2413, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imgui/core.pyx":2393
 * 
 * 
 * def label_text(str label, str text):             # <<<<<<<<<<<<<<
 *     """Display text+label aligned the same way as value+label widgets.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core.label_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2416
 * 
 * 
 * def text_unformatted(str text):             # <<<<<<<<<<<<<<
 *     """Big area text display - the size is defined by it's container.
 *     Recommended for long chunks of text.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_117text_unformatted(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static char __pyx_doc_5imgui_4core_116text_unformatted[] = "text_unformatted(str text)\nBig area text display - the size is defined by it's container.\n    Recommended for long chunks of text.\n\n    .. visual-example::\n        :title: simple text widget\n        :height: 100\n        :width: 200\n        :auto_layout:\n\n        imgui.begin(\"Example: unformatted text\")\n        imgui.text_unformatted(\"Really ... long ... text\")\n        imgui.end()\n\n    Args:\n        text (str): text to display.\n\n    .. wraps::\n        TextUnformatted(const char* text, const char* text_end = NULL)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_117text_unformatted = {"text_unformatted", (PyCFunction)__pyx_pw_5imgui_4core_117text_unformatted, METH_O, __pyx_doc_5imgui_4core_116text_unformatted};
static PyObject *__pyx_pw_5imgui_4core_117text_unformatted(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text_unformatted (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 2416, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_116text_unformatted(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_116text_unformatted(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  __Pyx_RefNannySetupContext("text_unformatted", 0);

  /* "imgui/core.pyx":2436
 *         TextUnformatted(const char* text, const char* text_end = NULL)
 *     """
 *     cimgui.TextUnformatted(_bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2436, __pyx_L1_error)
  try {
    ImGui::TextUnformatted(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2436, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2416
 * 
 * 
 * def text_unformatted(str text):             # <<<<<<<<<<<<<<
 *     """Big area text display - the size is defined by it's container.
 *     Recommended for long chunks of text.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.text_unformatted", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2439
 * 
 * 
 * def bullet():             # <<<<<<<<<<<<<<
 *     """Display a small circle and keep the cursor on the same line.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_119bullet(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_118bullet[] = "bullet()\nDisplay a small circle and keep the cursor on the same line.\n\n    .. advance cursor x position by GetTreeNodeToLabelSpacing(),\n       same distance that TreeNode() uses\n\n    .. visual-example::\n        :auto_layout:\n        :height: 80\n\n        imgui.begin(\"Example: bullets\")\n\n        for i in range(10):\n            imgui.bullet()\n\n        imgui.end()\n\n    .. wraps::\n        void Bullet()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_119bullet = {"bullet", (PyCFunction)__pyx_pw_5imgui_4core_119bullet, METH_NOARGS, __pyx_doc_5imgui_4core_118bullet};
static PyObject *__pyx_pw_5imgui_4core_119bullet(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bullet (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_118bullet(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_118bullet(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bullet", 0);

  /* "imgui/core.pyx":2459
 *         void Bullet()
 *     """
 *     cimgui.Bullet()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Bullet();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2459, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2439
 * 
 * 
 * def bullet():             # <<<<<<<<<<<<<<
 *     """Display a small circle and keep the cursor on the same line.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.bullet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2462
 * 
 * 
 * def bullet_text(str text):             # <<<<<<<<<<<<<<
 *     """Display bullet and text.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_121bullet_text(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static char __pyx_doc_5imgui_4core_120bullet_text[] = "bullet_text(str text)\nDisplay bullet and text.\n\n    This is shortcut for:\n\n    .. code-block:: python\n\n        imgui.bullet()\n        imgui.text(text)\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n\n        imgui.begin(\"Example: bullet text\")\n        imgui.bullet_text(\"Bullet 1\")\n        imgui.bullet_text(\"Bullet 2\")\n        imgui.bullet_text(\"Bullet 3\")\n        imgui.end()\n\n    Args:\n        text (str): text to display.\n\n    .. wraps::\n        void BulletText(const char* fmt, ...)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_121bullet_text = {"bullet_text", (PyCFunction)__pyx_pw_5imgui_4core_121bullet_text, METH_O, __pyx_doc_5imgui_4core_120bullet_text};
static PyObject *__pyx_pw_5imgui_4core_121bullet_text(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bullet_text (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyString_Type), 1, "text", 1))) __PYX_ERR(0, 2462, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_120bullet_text(__pyx_self, ((PyObject*)__pyx_v_text));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_120bullet_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  __Pyx_RefNannySetupContext("bullet_text", 0);

  /* "imgui/core.pyx":2489
 *     """
 *     # note: "%s" required for safety and to favor of Python string formating
 *     cimgui.BulletText("%s", _bytes(text))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2489, __pyx_L1_error)
  try {
    ImGui::BulletText(((char const *)"%s"), __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2489, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2462
 * 
 * 
 * def bullet_text(str text):             # <<<<<<<<<<<<<<
 *     """Display bullet and text.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.bullet_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2492
 * 
 * 
 * def button(str label, width=0, height=0):             # <<<<<<<<<<<<<<
 *     """Display button.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_123button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_122button[] = "button(str label, width=0, height=0)\nDisplay button.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n\n        imgui.begin(\"Example: button\")\n        imgui.button(\"Button 1\")\n        imgui.button(\"Button 2\")\n        imgui.end()\n\n    Args:\n        label (str): button label.\n        width (float): button width.\n        height (float): button height.\n\n    Returns:\n        bool: True if clicked.\n\n    .. wraps::\n        bool Button(const char* label, const ImVec2& size = ImVec2(0,0))\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_123button = {"button", (PyCFunction)__pyx_pw_5imgui_4core_123button, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_122button};
static PyObject *__pyx_pw_5imgui_4core_123button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "button") < 0)) __PYX_ERR(0, 2492, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_width = values[1];
    __pyx_v_height = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("button", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2492, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2492, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_122button(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_122button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  ImVec2 __pyx_t_5;
  bool __pyx_t_6;
  __Pyx_RefNannySetupContext("button", 0);

  /* "imgui/core.pyx":2515
 *         bool Button(const char* label, const ImVec2& size = ImVec2(0,0))
 *     """
 *     return cimgui.Button(_bytes(label), _cast_args_ImVec2(width, height))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2515, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2515, __pyx_L1_error)
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2515, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_t_3, __pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2515, __pyx_L1_error)
  try {
    __pyx_t_6 = ImGui::Button(__pyx_t_2, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2515, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2492
 * 
 * 
 * def button(str label, width=0, height=0):             # <<<<<<<<<<<<<<
 *     """Display button.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2518
 * 
 * 
 * def small_button(str label):             # <<<<<<<<<<<<<<
 *     """Display small button (with 0 frame padding).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_125small_button(PyObject *__pyx_self, PyObject *__pyx_v_label); /*proto*/
static char __pyx_doc_5imgui_4core_124small_button[] = "small_button(str label)\nDisplay small button (with 0 frame padding).\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n\n        imgui.begin(\"Example: button\")\n        imgui.small_button(\"Button 1\")\n        imgui.small_button(\"Button 2\")\n        imgui.end()\n\n    Args:\n        label (str): button label.\n\n    Returns:\n        bool: True if clicked.\n\n    .. wraps::\n        bool SmallButton(const char* label)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_125small_button = {"small_button", (PyCFunction)__pyx_pw_5imgui_4core_125small_button, METH_O, __pyx_doc_5imgui_4core_124small_button};
static PyObject *__pyx_pw_5imgui_4core_125small_button(PyObject *__pyx_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("small_button (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2518, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_124small_button(__pyx_self, ((PyObject*)__pyx_v_label));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_124small_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  __Pyx_RefNannySetupContext("small_button", 0);

  /* "imgui/core.pyx":2539
 *         bool SmallButton(const char* label)
 *     """
 *     return cimgui.SmallButton(_bytes(label))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2539, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::SmallButton(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2539, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2518
 * 
 * 
 * def small_button(str label):             # <<<<<<<<<<<<<<
 *     """Display small button (with 0 frame padding).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.small_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2542
 * 
 * 
 * def invisible_button(str identifier, width, height):             # <<<<<<<<<<<<<<
 *     """Create invisible button.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_127invisible_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_126invisible_button[] = "invisible_button(str identifier, width, height)\nCreate invisible button.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 300\n        :width: 300\n\n        imgui.begin(\"Example: invisible button :)\")\n        imgui.invisible_button(\"Button 1\", 200, 200)\n        imgui.small_button(\"Button 2\")\n        imgui.end()\n\n    Args:\n        identifier (str): Button identifier. Like label on :any:`button()`\n            but it is not displayed.\n        width (float): button width.\n        height (float): button height.\n\n    Returns:\n        bool: True if button is clicked.\n\n    .. wraps::\n        bool InvisibleButton(const char* str_id, const ImVec2& size)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_127invisible_button = {"invisible_button", (PyCFunction)__pyx_pw_5imgui_4core_127invisible_button, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_126invisible_button};
static PyObject *__pyx_pw_5imgui_4core_127invisible_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_identifier = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("invisible_button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_identifier,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_identifier)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("invisible_button", 1, 3, 3, 1); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("invisible_button", 1, 3, 3, 2); __PYX_ERR(0, 2542, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "invisible_button") < 0)) __PYX_ERR(0, 2542, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_identifier = ((PyObject*)values[0]);
    __pyx_v_width = values[1];
    __pyx_v_height = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("invisible_button", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2542, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.invisible_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_identifier), (&PyString_Type), 1, "identifier", 1))) __PYX_ERR(0, 2542, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_126invisible_button(__pyx_self, __pyx_v_identifier, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_126invisible_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_identifier, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  ImVec2 __pyx_t_5;
  bool __pyx_t_6;
  __Pyx_RefNannySetupContext("invisible_button", 0);

  /* "imgui/core.pyx":2567
 *         bool InvisibleButton(const char* str_id, const ImVec2& size)
 *     """
 *     return cimgui.InvisibleButton(             # <<<<<<<<<<<<<<
 *         _bytes(identifier),
 *         _cast_args_ImVec2(width, height)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":2568
 *     """
 *     return cimgui.InvisibleButton(
 *         _bytes(identifier),             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(width, height)
 *     )
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_identifier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2568, __pyx_L1_error)

  /* "imgui/core.pyx":2569
 *     return cimgui.InvisibleButton(
 *         _bytes(identifier),
 *         _cast_args_ImVec2(width, height)             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2569, __pyx_L1_error)
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2569, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_t_3, __pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2569, __pyx_L1_error)

  /* "imgui/core.pyx":2567
 *         bool InvisibleButton(const char* str_id, const ImVec2& size)
 *     """
 *     return cimgui.InvisibleButton(             # <<<<<<<<<<<<<<
 *         _bytes(identifier),
 *         _cast_args_ImVec2(width, height)
 */
  try {
    __pyx_t_6 = ImGui::InvisibleButton(__pyx_t_2, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2567, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2542
 * 
 * 
 * def invisible_button(str identifier, width, height):             # <<<<<<<<<<<<<<
 *     """Create invisible button.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.invisible_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2573
 * 
 * 
 * def color_button(             # <<<<<<<<<<<<<<
 *         float r, float g, float b, a=1.,
 *         cimgui.bool small_height=False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_129color_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_128color_button[] = "color_button(float r, float g, float b, a=1.0, bool small_height=False, bool outline_border=True)\nDisplay colored button.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 150\n\n        imgui.begin(\"Example: color button\")\n        imgui.color_button(1, 0, 0, 1, True, True)\n        imgui.color_button(0, 1, 0, 1, True, False)\n        imgui.color_button(0, 0, 1, 1, False, True)\n        imgui.color_button(1, 0, 1, 1, False, False)\n        imgui.end()\n\n    Args:\n        r (float): red color intensity.\n        g (float): green color intensity.\n        b (float): blue color instensity.\n        a (float): alpha intensity.\n        small_height (bool): Small height. Default to False\n        outline_border (bool): Diplay outline border. Defaults to True.\n\n    Returns:\n        bool: True if button is clicked.\n\n    .. wraps::\n        bool ColorButton(\n            const ImVec4& col,\n            bool small_height = false,\n            bool outline_border = true\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_129color_button = {"color_button", (PyCFunction)__pyx_pw_5imgui_4core_129color_button, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_128color_button};
static PyObject *__pyx_pw_5imgui_4core_129color_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  PyObject *__pyx_v_a = 0;
  bool __pyx_v_small_height;
  bool __pyx_v_outline_border;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("color_button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,&__pyx_n_s_small_height,&__pyx_n_s_outline_border,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_float_1_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_button", 0, 3, 6, 1); __PYX_ERR(0, 2573, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_button", 0, 3, 6, 2); __PYX_ERR(0, 2573, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_small_height);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_outline_border);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "color_button") < 0)) __PYX_ERR(0, 2573, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2574, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2574, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2574, __pyx_L3_error)
    __pyx_v_a = values[3];
    if (values[4]) {
      __pyx_v_small_height = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_small_height == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2575, __pyx_L3_error)
    } else {

      /* "imgui/core.pyx":2575
 * def color_button(
 *         float r, float g, float b, a=1.,
 *         cimgui.bool small_height=False,             # <<<<<<<<<<<<<<
 *         cimgui.bool outline_border=True,
 * ):
 */
      __pyx_v_small_height = ((bool)0);
    }
    if (values[5]) {
      __pyx_v_outline_border = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_outline_border == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2576, __pyx_L3_error)
    } else {

      /* "imgui/core.pyx":2576
 *         float r, float g, float b, a=1.,
 *         cimgui.bool small_height=False,
 *         cimgui.bool outline_border=True,             # <<<<<<<<<<<<<<
 * ):
 *     """Display colored button.
 */
      __pyx_v_outline_border = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("color_button", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2573, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.color_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_128color_button(__pyx_self, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a, __pyx_v_small_height, __pyx_v_outline_border);

  /* "imgui/core.pyx":2573
 * 
 * 
 * def color_button(             # <<<<<<<<<<<<<<
 *         float r, float g, float b, a=1.,
 *         cimgui.bool small_height=False,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_128color_button(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, PyObject *__pyx_v_a, bool __pyx_v_small_height, bool __pyx_v_outline_border) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("color_button", 0);

  /* "imgui/core.pyx":2609
 *         )
 *     """
 *     return cimgui.ColorButton(             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec4(r, g, b, a), small_height, outline_border
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":2610
 *     """
 *     return cimgui.ColorButton(
 *         _cast_args_ImVec4(r, g, b, a), small_height, outline_border             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_a); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2610, __pyx_L1_error)

  /* "imgui/core.pyx":2609
 *         )
 *     """
 *     return cimgui.ColorButton(             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec4(r, g, b, a), small_height, outline_border
 *     )
 */
  try {
    __pyx_t_2 = ImGui::ColorButton(__pyx_f_5imgui_4core__cast_args_ImVec4(__pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_t_1), __pyx_v_small_height, __pyx_v_outline_border);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2609, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2573
 * 
 * 
 * def color_button(             # <<<<<<<<<<<<<<
 *         float r, float g, float b, a=1.,
 *         cimgui.bool small_height=False,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core.color_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2614
 * 
 * 
 * def image_button(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_131image_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_130image_button[] = "image_button(texture_id, float width, float height, tuple uv0=(0, 0), tuple uv1=(1, 1), tuple tint_color=(1, 1, 1, 1), tuple border_color=(0, 0, 0, 0), int frame_padding=-1)\nDisplay image.\n\n    .. todo:: add example with some preconfigured image\n\n    Args:\n        texture_id (object): user data defining texture id. Argument type\n            is implementation dependent. For OpenGL it is usually an integer.\n        size (Vec2): image display size two-tuple.\n        uv0 (Vec2): UV coordinates for 1st corner (lower-left for OpenGL).\n            Defaults to ``(0, 0)``.\n        uv1 (Vec2): UV coordinates for 2nd corner (upper-right for OpenGL).\n            Defaults to ``(1, 1)``.\n        tint_color (Vec4): Image tint color. Defaults to white.\n        border_color (Vec4): Image border color. Defaults to transparent.\n        frame_padding (int): Frame padding (``0``: no padding, ``<0`` default\n            padding).\n\n    Returns:\n        bool: True if clicked.\n\n    .. wraps::\n        bool ImageButton(\n            ImTextureID user_texture_id,\n            const ImVec2& size,\n            const ImVec2& uv0 = ImVec2(0,0),\n            const ImVec2& uv1 = ImVec2(1,1),\n            int frame_padding = -1,\n            const ImVec4& bg_col = ImVec4(0,0,0,0),\n            const ImVec4& tint_col = ImVec4(1,1,1,1)\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_131image_button = {"image_button", (PyCFunction)__pyx_pw_5imgui_4core_131image_button, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_130image_button};
static PyObject *__pyx_pw_5imgui_4core_131image_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_texture_id = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  PyObject *__pyx_v_uv0 = 0;
  PyObject *__pyx_v_uv1 = 0;
  PyObject *__pyx_v_tint_color = 0;
  PyObject *__pyx_v_border_color = 0;
  int __pyx_v_frame_padding;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("image_button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_texture_id,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_uv0,&__pyx_n_s_uv1,&__pyx_n_s_tint_color,&__pyx_n_s_border_color,&__pyx_n_s_frame_padding,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};

    /* "imgui/core.pyx":2618
 *     float width,
 *     float height,
 *     tuple uv0=(0, 0),             # <<<<<<<<<<<<<<
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 */
    values[3] = ((PyObject*)__pyx_tuple__37);

    /* "imgui/core.pyx":2619
 *     float height,
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),             # <<<<<<<<<<<<<<
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),
 */
    values[4] = ((PyObject*)__pyx_tuple__38);

    /* "imgui/core.pyx":2620
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),             # <<<<<<<<<<<<<<
 *     tuple border_color=(0, 0, 0, 0),
 *     int frame_padding=-1,
 */
    values[5] = ((PyObject*)__pyx_tuple__39);

    /* "imgui/core.pyx":2621
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),             # <<<<<<<<<<<<<<
 *     int frame_padding=-1,
 * ):
 */
    values[6] = ((PyObject*)__pyx_tuple__40);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_texture_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("image_button", 0, 3, 8, 1); __PYX_ERR(0, 2614, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("image_button", 0, 3, 8, 2); __PYX_ERR(0, 2614, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_uv0);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_uv1);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tint_color);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_border_color);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_frame_padding);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "image_button") < 0)) __PYX_ERR(0, 2614, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_texture_id = values[0];
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2616, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2617, __pyx_L3_error)
    __pyx_v_uv0 = ((PyObject*)values[3]);
    __pyx_v_uv1 = ((PyObject*)values[4]);
    __pyx_v_tint_color = ((PyObject*)values[5]);
    __pyx_v_border_color = ((PyObject*)values[6]);
    if (values[7]) {
      __pyx_v_frame_padding = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_frame_padding == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2622, __pyx_L3_error)
    } else {
      __pyx_v_frame_padding = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("image_button", 0, 3, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2614, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.image_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv0), (&PyTuple_Type), 1, "uv0", 1))) __PYX_ERR(0, 2618, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv1), (&PyTuple_Type), 1, "uv1", 1))) __PYX_ERR(0, 2619, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tint_color), (&PyTuple_Type), 1, "tint_color", 1))) __PYX_ERR(0, 2620, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_border_color), (&PyTuple_Type), 1, "border_color", 1))) __PYX_ERR(0, 2621, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_130image_button(__pyx_self, __pyx_v_texture_id, __pyx_v_width, __pyx_v_height, __pyx_v_uv0, __pyx_v_uv1, __pyx_v_tint_color, __pyx_v_border_color, __pyx_v_frame_padding);

  /* "imgui/core.pyx":2614
 * 
 * 
 * def image_button(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_130image_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_texture_id, float __pyx_v_width, float __pyx_v_height, PyObject *__pyx_v_uv0, PyObject *__pyx_v_uv1, PyObject *__pyx_v_tint_color, PyObject *__pyx_v_border_color, int __pyx_v_frame_padding) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  ImVec2 __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("image_button", 0);

  /* "imgui/core.pyx":2655
 *         )
 *     """
 *     return cimgui.ImageButton(             # <<<<<<<<<<<<<<
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":2657
 *     return cimgui.ImageButton(
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining             # <<<<<<<<<<<<<<
 *         _cast_tuple_ImVec2(uv0),
 *         _cast_tuple_ImVec2(uv1),
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2657, __pyx_L1_error)

  /* "imgui/core.pyx":2658
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 *         _cast_tuple_ImVec2(uv0),             # <<<<<<<<<<<<<<
 *         _cast_tuple_ImVec2(uv1),
 *         # note: slightly different order of params than in ImGui::Image()
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_uv0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2658, __pyx_L1_error)

  /* "imgui/core.pyx":2659
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 *         _cast_tuple_ImVec2(uv0),
 *         _cast_tuple_ImVec2(uv1),             # <<<<<<<<<<<<<<
 *         # note: slightly different order of params than in ImGui::Image()
 *         frame_padding,
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_uv1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2659, __pyx_L1_error)

  /* "imgui/core.pyx":2655
 *         )
 *     """
 *     return cimgui.ImageButton(             # <<<<<<<<<<<<<<
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 */
  try {
    __pyx_t_4 = ImGui::ImageButton(((void *)__pyx_v_texture_id), __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_v_frame_padding, __pyx_f_5imgui_4core__cast_tuple_ImVec4(__pyx_v_border_color), __pyx_f_5imgui_4core__cast_tuple_ImVec4(__pyx_v_tint_color));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2655, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2614
 * 
 * 
 * def image_button(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.image_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2667
 * 
 * 
 * def image(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_133image(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_132image[] = "image(texture_id, float width, float height, tuple uv0=(0, 0), tuple uv1=(1, 1), tuple tint_color=(1, 1, 1, 1), tuple border_color=(0, 0, 0, 0))\nDisplay image.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 550\n        :height: 200\n\n        texture_id = imgui.get_io().fonts.texture_id\n\n        imgui.begin(\"Example: image display\")\n        imgui.image(texture_id, 512, 64, border_color=(1, 0, 0, 1))\n        imgui.end()\n\n    Args:\n        texture_id (object): user data defining texture id. Argument type\n            is implementation dependent. For OpenGL it is usually an integer.\n        size (Vec2): image display size two-tuple.\n        uv0 (Vec2): UV coordinates for 1st corner (lower-left for OpenGL).\n            Defaults to ``(0, 0)``.\n        uv1 (Vec2): UV coordinates for 2nd corner (upper-right for OpenGL).\n            Defaults to ``(1, 1)``.\n        tint_color(Vec4): Image tint color. Defaults to white.\n        border_color(Vec4): Image border color. Defaults to transparent.\n\n    .. wraps::\n        void Image(\n            ImTextureID user_texture_id,\n            const ImVec2& size,\n            const ImVec2& uv0 = ImVec2(0,0),\n            const ImVec2& uv1 = ImVec2(1,1),\n            const ImVec4& tint_col = ImVec4(1,1,1,1),\n            const ImVec4& border_col = ImVec4(0,0,0,0)\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_133image = {"image", (PyCFunction)__pyx_pw_5imgui_4core_133image, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_132image};
static PyObject *__pyx_pw_5imgui_4core_133image(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_texture_id = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  PyObject *__pyx_v_uv0 = 0;
  PyObject *__pyx_v_uv1 = 0;
  PyObject *__pyx_v_tint_color = 0;
  PyObject *__pyx_v_border_color = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("image (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_texture_id,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_uv0,&__pyx_n_s_uv1,&__pyx_n_s_tint_color,&__pyx_n_s_border_color,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};

    /* "imgui/core.pyx":2671
 *     float width,
 *     float height,
 *     tuple uv0=(0, 0),             # <<<<<<<<<<<<<<
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 */
    values[3] = ((PyObject*)__pyx_tuple__41);

    /* "imgui/core.pyx":2672
 *     float height,
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),             # <<<<<<<<<<<<<<
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),
 */
    values[4] = ((PyObject*)__pyx_tuple__42);

    /* "imgui/core.pyx":2673
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),             # <<<<<<<<<<<<<<
 *     tuple border_color=(0, 0, 0, 0),
 * ):
 */
    values[5] = ((PyObject*)__pyx_tuple__43);

    /* "imgui/core.pyx":2674
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),             # <<<<<<<<<<<<<<
 * ):
 *     """Display image.
 */
    values[6] = ((PyObject*)__pyx_tuple__44);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_texture_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("image", 0, 3, 7, 1); __PYX_ERR(0, 2667, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("image", 0, 3, 7, 2); __PYX_ERR(0, 2667, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_uv0);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_uv1);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tint_color);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_border_color);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "image") < 0)) __PYX_ERR(0, 2667, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_texture_id = values[0];
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2669, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2670, __pyx_L3_error)
    __pyx_v_uv0 = ((PyObject*)values[3]);
    __pyx_v_uv1 = ((PyObject*)values[4]);
    __pyx_v_tint_color = ((PyObject*)values[5]);
    __pyx_v_border_color = ((PyObject*)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("image", 0, 3, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2667, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv0), (&PyTuple_Type), 1, "uv0", 1))) __PYX_ERR(0, 2671, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uv1), (&PyTuple_Type), 1, "uv1", 1))) __PYX_ERR(0, 2672, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tint_color), (&PyTuple_Type), 1, "tint_color", 1))) __PYX_ERR(0, 2673, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_border_color), (&PyTuple_Type), 1, "border_color", 1))) __PYX_ERR(0, 2674, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_132image(__pyx_self, __pyx_v_texture_id, __pyx_v_width, __pyx_v_height, __pyx_v_uv0, __pyx_v_uv1, __pyx_v_tint_color, __pyx_v_border_color);

  /* "imgui/core.pyx":2667
 * 
 * 
 * def image(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_132image(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_texture_id, float __pyx_v_width, float __pyx_v_height, PyObject *__pyx_v_uv0, PyObject *__pyx_v_uv1, PyObject *__pyx_v_tint_color, PyObject *__pyx_v_border_color) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  ImVec2 __pyx_t_3;
  __Pyx_RefNannySetupContext("image", 0);

  /* "imgui/core.pyx":2712
 *     cimgui.Image(
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining             # <<<<<<<<<<<<<<
 *         _cast_tuple_ImVec2(uv0),
 *         _cast_tuple_ImVec2(uv1),
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2712, __pyx_L1_error)

  /* "imgui/core.pyx":2713
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 *         _cast_tuple_ImVec2(uv0),             # <<<<<<<<<<<<<<
 *         _cast_tuple_ImVec2(uv1),
 *         _cast_tuple_ImVec4(tint_color),
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_uv0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2713, __pyx_L1_error)

  /* "imgui/core.pyx":2714
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 *         _cast_tuple_ImVec2(uv0),
 *         _cast_tuple_ImVec2(uv1),             # <<<<<<<<<<<<<<
 *         _cast_tuple_ImVec4(tint_color),
 *         _cast_tuple_ImVec4(border_color),
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_uv1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2714, __pyx_L1_error)

  /* "imgui/core.pyx":2710
 *         )
 *     """
 *     cimgui.Image(             # <<<<<<<<<<<<<<
 *         <void*>texture_id,
 *         _cast_args_ImVec2(width, height),  # todo: consider inlining
 */
  try {
    ImGui::Image(((void *)__pyx_v_texture_id), __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_f_5imgui_4core__cast_tuple_ImVec4(__pyx_v_tint_color), __pyx_f_5imgui_4core__cast_tuple_ImVec4(__pyx_v_border_color));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2710, __pyx_L1_error)
  }

  /* "imgui/core.pyx":2667
 * 
 * 
 * def image(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2720
 * 
 * 
 * def checkbox(str label, cimgui.bool state):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_135checkbox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_134checkbox[] = "checkbox(str label, bool state)\nDisplay checkbox widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n\n        imgui.begin(\"Example: checkboxes\")\n\n        c1_output = imgui.checkbox(\"Checkbox 1\", True)\n        c2_output = imgui.checkbox(\"Checkbox 2\", False)\n\n        imgui.text(\"Checkbox 1 return value: {}\".format(c1_output))\n        imgui.text(\"Checkbox 2 return value: {}\".format(c2_output))\n\n        imgui.end()\n\n    Args:\n        label (str): text label for checkbox widget.\n        state (bool): current (desired) state of the checkbox. If it has to\n            change, the new state will be returned as a second item of\n            the return value.\n\n    Returns:\n        tuple: a ``(clicked, state)`` two-tuple indicating click event and the\n        current state of the checkbox.\n\n    .. wraps::\n        bool Checkbox(const char* label, bool* v)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_135checkbox = {"checkbox", (PyCFunction)__pyx_pw_5imgui_4core_135checkbox, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_134checkbox};
static PyObject *__pyx_pw_5imgui_4core_135checkbox(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  bool __pyx_v_state;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkbox (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_state,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("checkbox", 1, 2, 2, 1); __PYX_ERR(0, 2720, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "checkbox") < 0)) __PYX_ERR(0, 2720, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_state = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_state == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2720, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("checkbox", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2720, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.checkbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2720, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_134checkbox(__pyx_self, __pyx_v_label, __pyx_v_state);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_134checkbox(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_state) {
  bool __pyx_v_inout_state;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("checkbox", 0);

  /* "imgui/core.pyx":2750
 *         bool Checkbox(const char* label, bool* v)
 *     """
 *     cdef cimgui.bool inout_state = state             # <<<<<<<<<<<<<<
 *     return cimgui.Checkbox(_bytes(label), &inout_state), inout_state
 * 
 */
  __pyx_v_inout_state = __pyx_v_state;

  /* "imgui/core.pyx":2751
 *     """
 *     cdef cimgui.bool inout_state = state
 *     return cimgui.Checkbox(_bytes(label), &inout_state), inout_state             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2751, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::Checkbox(__pyx_t_2, (&__pyx_v_inout_state));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2751, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_inout_state); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2720
 * 
 * 
 * def checkbox(str label, cimgui.bool state):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.checkbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2754
 * 
 * 
 * def checkbox_flags(str label, unsigned int flags, unsigned int flags_value):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget that handle integer flags (bit fields).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_137checkbox_flags(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_136checkbox_flags[] = "checkbox_flags(str label, unsigned int flags, unsigned int flags_value)\nDisplay checkbox widget that handle integer flags (bit fields).\n\n    It is useful for handling window/style flags or any kind of flags\n    implemented as integer bitfields.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 500\n\n        flags = imgui.WINDOW_NO_RESIZE | imgui.WINDOW_NO_MOVE\n\n        imgui.begin(\"Example: checkboxes for flags\", flags=flags)\n\n        clicked, flags = imgui.checkbox_flags(\n            \"No resize\", flags, imgui.WINDOW_NO_RESIZE\n        )\n        clicked, flags = imgui.checkbox_flags(\n            \"No move\", flags, imgui.WINDOW_NO_MOVE\n        )\n        clicked, flags = imgui.checkbox_flags(\n            \"No collapse\", flags, imgui.WINDOW_NO_COLLAPSE\n        )\n        # note: it also allows to use multiple flags at once\n        clicked, flags = imgui.checkbox_flags(\n            \"No resize & no move\", flags,\n            imgui.WINDOW_NO_RESIZE | imgui.WINDOW_NO_MOVE\n        )\n        imgui.text(\"Current flags value: {0:b}\".format(flags))\n        imgui.end()\n\n    Args:\n        label (str): text label for checkbox widget.\n        flags (int): current state of the flags associated with checkbox.\n            Actual state of checkbox (toggled/untoggled) is calculated from\n            this argument and ``flags_value`` argument. If it has to change,\n            the new state will be returned as a second item of the return\n            value.\n        flags_value (int): values of flags this widget can toggle. Represents\n            bitmask in flags bitfield. Allows multiple flags to be toggled\n            at once (specify using bit OR operator `|`, see example above).\n\n    Returns:\n        tuple: a ``(clicked, flags)`` two-tuple indicating click event and the\n        current state of the flags controlled with this checkbox.\n\n    .. wraps::\n        bool CheckboxFlags(\n            const char* label, unsigned int*"" flags,\n            unsigned int flags_value\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_137checkbox_flags = {"checkbox_flags", (PyCFunction)__pyx_pw_5imgui_4core_137checkbox_flags, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_136checkbox_flags};
static PyObject *__pyx_pw_5imgui_4core_137checkbox_flags(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  unsigned int __pyx_v_flags;
  unsigned int __pyx_v_flags_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkbox_flags (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_flags,&__pyx_n_s_flags_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("checkbox_flags", 1, 3, 3, 1); __PYX_ERR(0, 2754, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("checkbox_flags", 1, 3, 3, 2); __PYX_ERR(0, 2754, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "checkbox_flags") < 0)) __PYX_ERR(0, 2754, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_flags = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_flags == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2754, __pyx_L3_error)
    __pyx_v_flags_value = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_flags_value == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2754, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("checkbox_flags", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2754, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.checkbox_flags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2754, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_136checkbox_flags(__pyx_self, __pyx_v_label, __pyx_v_flags, __pyx_v_flags_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_136checkbox_flags(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, unsigned int __pyx_v_flags, unsigned int __pyx_v_flags_value) {
  unsigned int __pyx_v_inout_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("checkbox_flags", 0);

  /* "imgui/core.pyx":2806
 *         )
 *     """
 *     cdef unsigned int inout_flags = flags             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.CheckboxFlags(_bytes(label), &inout_flags, flags_value), inout_flags
 */
  __pyx_v_inout_flags = __pyx_v_flags;

  /* "imgui/core.pyx":2808
 *     cdef unsigned int inout_flags = flags
 * 
 *     return cimgui.CheckboxFlags(_bytes(label), &inout_flags, flags_value), inout_flags             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2808, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::CheckboxFlags(__pyx_t_2, (&__pyx_v_inout_flags), __pyx_v_flags_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2808, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_inout_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2754
 * 
 * 
 * def checkbox_flags(str label, unsigned int flags, unsigned int flags_value):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget that handle integer flags (bit fields).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.checkbox_flags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2811
 * 
 * 
 * def radio_button(str label, cimgui.bool active):             # <<<<<<<<<<<<<<
 *     """Display radio button widget
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_139radio_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_138radio_button[] = "radio_button(str label, bool active)\nDisplay radio button widget\n\n    .. visual-example::\n        :auto_layout:\n        :height: 100\n\n        radio_active = True\n\n        imgui.begin(\"Example: radio buttons\")\n\n        if imgui.radio_button(\"Radio button\", radio_active):\n            radio_active = not radio_active\n\n        imgui.end()\n\n    Args:\n        label (str): button label.\n        active (bool): state of the radio button.\n\n    Returns:\n        bool: True if clicked.\n\n    .. wraps::\n        bool RadioButton(const char* label, bool active)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_139radio_button = {"radio_button", (PyCFunction)__pyx_pw_5imgui_4core_139radio_button, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_138radio_button};
static PyObject *__pyx_pw_5imgui_4core_139radio_button(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  bool __pyx_v_active;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("radio_button (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_active,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_active)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("radio_button", 1, 2, 2, 1); __PYX_ERR(0, 2811, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "radio_button") < 0)) __PYX_ERR(0, 2811, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_active = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_active == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2811, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("radio_button", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2811, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.radio_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2811, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_138radio_button(__pyx_self, __pyx_v_label, __pyx_v_active);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_138radio_button(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, bool __pyx_v_active) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  __Pyx_RefNannySetupContext("radio_button", 0);

  /* "imgui/core.pyx":2837
 *         bool RadioButton(const char* label, bool active)
 *     """
 *     return cimgui.RadioButton(_bytes(label), active)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2837, __pyx_L1_error)
  try {
    __pyx_t_3 = ImGui::RadioButton(__pyx_t_2, __pyx_v_active);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2837, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2811
 * 
 * 
 * def radio_button(str label, cimgui.bool active):             # <<<<<<<<<<<<<<
 *     """Display radio button widget
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.radio_button", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2840
 * 
 * 
 * def combo(str label, int current, list items, int height_in_items=-1):             # <<<<<<<<<<<<<<
 *     """Display combo widget.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_141combo(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_140combo[] = "combo(str label, int current, list items, int height_in_items=-1)\nDisplay combo widget.\n\n    .. visual-example::\n        :auto_layout:\n        :height: 200\n        :click: 80 40\n\n        current = 2\n        imgui.begin(\"Example: combo widget\")\n\n        clicked, current = imgui.combo(\n            \"combo\", current, [\"first\", \"second\", \"third\"]\n        )\n\n        imgui.end()\n\n    Args:\n        label (str): combo label.\n        current (int): index of selected item.\n        items (list): list of string labels for items.\n        height_in_items (int): height of dropdown in items. Defaults to -1\n            (autosized).\n\n    Returns:\n        tuple: a ``(changed, current)`` tuple indicating change of selection\n        and current index of selected item.\n\n    .. wraps::\n        bool Combo(\n            const char* label, int* current_item,\n            const char* items_separated_by_zeros,\n            int height_in_items = -1\n        )\n\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_141combo = {"combo", (PyCFunction)__pyx_pw_5imgui_4core_141combo, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_140combo};
static PyObject *__pyx_pw_5imgui_4core_141combo(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_current;
  PyObject *__pyx_v_items = 0;
  int __pyx_v_height_in_items;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("combo (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_current,&__pyx_n_s_items,&__pyx_n_s_height_in_items,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_current)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("combo", 0, 3, 4, 1); __PYX_ERR(0, 2840, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("combo", 0, 3, 4, 2); __PYX_ERR(0, 2840, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height_in_items);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "combo") < 0)) __PYX_ERR(0, 2840, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_current = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_current == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2840, __pyx_L3_error)
    __pyx_v_items = ((PyObject*)values[2]);
    if (values[3]) {
      __pyx_v_height_in_items = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_height_in_items == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2840, __pyx_L3_error)
    } else {
      __pyx_v_height_in_items = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("combo", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2840, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.combo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2840, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_items), (&PyList_Type), 1, "items", 1))) __PYX_ERR(0, 2840, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_140combo(__pyx_self, __pyx_v_label, __pyx_v_current, __pyx_v_items, __pyx_v_height_in_items);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_140combo(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_current, PyObject *__pyx_v_items, int __pyx_v_height_in_items) {
  int __pyx_v_inout_current;
  PyObject *__pyx_v_in_items = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("combo", 0);

  /* "imgui/core.pyx":2876
 * 
 *     """
 *     cdef int inout_current = current             # <<<<<<<<<<<<<<
 * 
 *     in_items = "\0".join(items)
 */
  __pyx_v_inout_current = __pyx_v_current;

  /* "imgui/core.pyx":2878
 *     cdef int inout_current = current
 * 
 *     in_items = "\0".join(items)             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.Combo(
 */
  __pyx_t_1 = __Pyx_PyString_Join(__pyx_kp_s__45, __pyx_v_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_in_items = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":2880
 *     in_items = "\0".join(items)
 * 
 *     return cimgui.Combo(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_current, _bytes(in_items), height_in_items
 *     ), inout_current
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":2881
 * 
 *     return cimgui.Combo(
 *         _bytes(label), &inout_current, _bytes(in_items), height_in_items             # <<<<<<<<<<<<<<
 *     ), inout_current
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 2881, __pyx_L1_error)
  if (!(likely(PyString_CheckExact(__pyx_v_in_items))||((__pyx_v_in_items) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_in_items)->tp_name), 0))) __PYX_ERR(0, 2881, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(((PyObject*)__pyx_v_in_items)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 2881, __pyx_L1_error)

  /* "imgui/core.pyx":2880
 *     in_items = "\0".join(items)
 * 
 *     return cimgui.Combo(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_current, _bytes(in_items), height_in_items
 *     ), inout_current
 */
  try {
    __pyx_t_5 = ImGui::Combo(__pyx_t_2, (&__pyx_v_inout_current), __pyx_t_4, __pyx_v_height_in_items);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2880, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "imgui/core.pyx":2882
 *     return cimgui.Combo(
 *         _bytes(label), &inout_current, _bytes(in_items), height_in_items
 *     ), inout_current             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_inout_current); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":2880
 *     in_items = "\0".join(items)
 * 
 *     return cimgui.Combo(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_current, _bytes(in_items), height_in_items
 *     ), inout_current
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2840
 * 
 * 
 * def combo(str label, int current, list items, int height_in_items=-1):             # <<<<<<<<<<<<<<
 *     """Display combo widget.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core.combo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_in_items);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2885
 * 
 * 
 * def color_edit3(str label, float r, float g, float b):             # <<<<<<<<<<<<<<
 *     """Display color edit widget for color without alpha value.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_143color_edit3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_142color_edit3[] = "color_edit3(str label, float r, float g, float b)\nDisplay color edit widget for color without alpha value.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n\n        color_1 = 1., .0, .5\n        color_2 = 0., .8, .3\n\n        imgui.begin(\"Example: color edit without alpha\")\n\n        changed, color_1 = imgui.color_edit3(\"Color 1\", *color_1)\n        changed, color_2 = imgui.color_edit3(\"Color 2\", *color_2)\n\n        imgui.end()\n\n    Args:\n        label (str): color edit label.\n        r (float): red color intensity.\n        g (float): green color intensity.\n        b (float): blue color instensity.\n        a (float): alpha intensity.\n\n    Returns:\n        tuple: a ``(changed, color)`` tuple that contains indicator of color\n        change and current value of color\n\n    .. wraps::\n        bool ColorEdit3(const char* label, float col[3])\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_143color_edit3 = {"color_edit3", (PyCFunction)__pyx_pw_5imgui_4core_143color_edit3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_142color_edit3};
static PyObject *__pyx_pw_5imgui_4core_143color_edit3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("color_edit3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit3", 1, 4, 4, 1); __PYX_ERR(0, 2885, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit3", 1, 4, 4, 2); __PYX_ERR(0, 2885, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit3", 1, 4, 4, 3); __PYX_ERR(0, 2885, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "color_edit3") < 0)) __PYX_ERR(0, 2885, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2885, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2885, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2885, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("color_edit3", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2885, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.color_edit3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2885, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_142color_edit3(__pyx_self, __pyx_v_label, __pyx_v_r, __pyx_v_g, __pyx_v_b);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_142color_edit3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b) {
  float __pyx_v_inout_color[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("color_edit3", 0);

  /* "imgui/core.pyx":2917
 *     """
 * 
 *     cdef float[3] inout_color = [r, g, b]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.ColorEdit3(
 */
  __pyx_t_1[0] = __pyx_v_r;
  __pyx_t_1[1] = __pyx_v_g;
  __pyx_t_1[2] = __pyx_v_b;
  memcpy(&(__pyx_v_inout_color[0]), __pyx_t_1, sizeof(__pyx_v_inout_color[0]) * (3));

  /* "imgui/core.pyx":2919
 *     cdef float[3] inout_color = [r, g, b]
 * 
 *     return cimgui.ColorEdit3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color)
 *     ), (inout_color[0], inout_color[1], inout_color[2])
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":2920
 * 
 *     return cimgui.ColorEdit3(
 *         _bytes(label), <float *>(&inout_color)             # <<<<<<<<<<<<<<
 *     ), (inout_color[0], inout_color[1], inout_color[2])
 * 
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 2920, __pyx_L1_error)

  /* "imgui/core.pyx":2919
 *     cdef float[3] inout_color = [r, g, b]
 * 
 *     return cimgui.ColorEdit3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color)
 *     ), (inout_color[0], inout_color[1], inout_color[2])
 */
  try {
    __pyx_t_4 = ImGui::ColorEdit3(__pyx_t_3, ((float *)(&__pyx_v_inout_color)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2919, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":2921
 *     return cimgui.ColorEdit3(
 *         _bytes(label), <float *>(&inout_color)
 *     ), (inout_color[0], inout_color[1], inout_color[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_inout_color[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_inout_color[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_color[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;

  /* "imgui/core.pyx":2919
 *     cdef float[3] inout_color = [r, g, b]
 * 
 *     return cimgui.ColorEdit3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color)
 *     ), (inout_color[0], inout_color[1], inout_color[2])
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2885
 * 
 * 
 * def color_edit3(str label, float r, float g, float b):             # <<<<<<<<<<<<<<
 *     """Display color edit widget for color without alpha value.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.color_edit3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2924
 * 
 * 
 * def color_edit4(             # <<<<<<<<<<<<<<
 *     str label, float r, float g, float b, float a, cimgui.bool show_alpha=True
 * ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_145color_edit4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_144color_edit4[] = "color_edit4(str label, float r, float g, float b, float a, bool show_alpha=True)\nDisplay color edit widget for color with alpha value.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n\n        color = 1., .0, .5, 1.\n\n        imgui.begin(\"Example: color edit with alpha\")\n\n        _, color = imgui.color_edit4(\"Alpha\", *color, show_alpha=True)\n        _, color = imgui.color_edit4(\"No alpha\", *color, show_alpha=False)\n\n        imgui.end()\n\n    Args:\n        label (str): color edit label.\n        r (float): red color intensity.\n        g (float): green color intensity.\n        b (float): blue color instensity.\n        a (float): alpha intensity.\n        show_alpha (bool): if set to True wiget allows to modify alpha\n\n    Returns:\n        tuple: a ``(changed, color)`` tuple that contains indicator of color\n        change and current value of color\n\n    .. wraps::\n        ColorEdit4(\n            const char* label, float col[4], bool show_alpha = true\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_145color_edit4 = {"color_edit4", (PyCFunction)__pyx_pw_5imgui_4core_145color_edit4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_144color_edit4};
static PyObject *__pyx_pw_5imgui_4core_145color_edit4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  bool __pyx_v_show_alpha;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("color_edit4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,&__pyx_n_s_show_alpha,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit4", 0, 5, 6, 1); __PYX_ERR(0, 2924, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit4", 0, 5, 6, 2); __PYX_ERR(0, 2924, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit4", 0, 5, 6, 3); __PYX_ERR(0, 2924, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("color_edit4", 0, 5, 6, 4); __PYX_ERR(0, 2924, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_show_alpha);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "color_edit4") < 0)) __PYX_ERR(0, 2924, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2925, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2925, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2925, __pyx_L3_error)
    __pyx_v_a = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2925, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_show_alpha = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_show_alpha == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2925, __pyx_L3_error)
    } else {

      /* "imgui/core.pyx":2925
 * 
 * def color_edit4(
 *     str label, float r, float g, float b, float a, cimgui.bool show_alpha=True             # <<<<<<<<<<<<<<
 * ):
 *     """Display color edit widget for color with alpha value.
 */
      __pyx_v_show_alpha = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("color_edit4", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2924, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.color_edit4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2925, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_144color_edit4(__pyx_self, __pyx_v_label, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a, __pyx_v_show_alpha);

  /* "imgui/core.pyx":2924
 * 
 * 
 * def color_edit4(             # <<<<<<<<<<<<<<
 *     str label, float r, float g, float b, float a, cimgui.bool show_alpha=True
 * ):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_144color_edit4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a, bool __pyx_v_show_alpha) {
  float __pyx_v_inout_color[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("color_edit4", 0);

  /* "imgui/core.pyx":2959
 *         )
 *     """
 *     cdef float[4] inout_color = [r, g, b, a]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.ColorEdit4(
 */
  __pyx_t_1[0] = __pyx_v_r;
  __pyx_t_1[1] = __pyx_v_g;
  __pyx_t_1[2] = __pyx_v_b;
  __pyx_t_1[3] = __pyx_v_a;
  memcpy(&(__pyx_v_inout_color[0]), __pyx_t_1, sizeof(__pyx_v_inout_color[0]) * (4));

  /* "imgui/core.pyx":2961
 *     cdef float[4] inout_color = [r, g, b, a]
 * 
 *     return cimgui.ColorEdit4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color), show_alpha
 *     ), (inout_color[0], inout_color[1], inout_color[2], inout_color[3])
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":2962
 * 
 *     return cimgui.ColorEdit4(
 *         _bytes(label), <float *>(&inout_color), show_alpha             # <<<<<<<<<<<<<<
 *     ), (inout_color[0], inout_color[1], inout_color[2], inout_color[3])
 * 
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 2962, __pyx_L1_error)

  /* "imgui/core.pyx":2961
 *     cdef float[4] inout_color = [r, g, b, a]
 * 
 *     return cimgui.ColorEdit4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color), show_alpha
 *     ), (inout_color[0], inout_color[1], inout_color[2], inout_color[3])
 */
  try {
    __pyx_t_4 = ImGui::ColorEdit4(__pyx_t_3, ((float *)(&__pyx_v_inout_color)), __pyx_v_show_alpha);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2961, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":2963
 *     return cimgui.ColorEdit4(
 *         _bytes(label), <float *>(&inout_color), show_alpha
 *     ), (inout_color[0], inout_color[1], inout_color[2], inout_color[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_inout_color[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_inout_color[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_color[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_color[3])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_8);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":2961
 *     cdef float[4] inout_color = [r, g, b, a]
 * 
 *     return cimgui.ColorEdit4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float *>(&inout_color), show_alpha
 *     ), (inout_color[0], inout_color[1], inout_color[2], inout_color[3])
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2924
 * 
 * 
 * def color_edit4(             # <<<<<<<<<<<<<<
 *     str label, float r, float g, float b, float a, cimgui.bool show_alpha=True
 * ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.color_edit4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":2966
 * 
 * 
 * def drag_float(             # <<<<<<<<<<<<<<
 *     str label, float value,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_147drag_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_146drag_float[] = "drag_float(str label, float value, float change_speed=1.0, float max_value=0.0, float min_value=0.0, str display_format='%.3f', float power=1.0)\nDisplay float drag widget.\n\n    .. todo::\n        Consider replacing ``display_format`` with something that allows\n        for safer way to specify display format without loosing the\n        functionality of wrapped function.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        value = 42.0\n\n        imgui.begin(\"Example: drag float\")\n        changed, value = imgui.drag_float(\n            \"Default\", value,\n        )\n        changed, value = imgui.drag_float(\n            \"Less precise\", value, display_format=\"%.1f\"\n        )\n        imgui.text(\"Changed: %s, Value: %s\" % (changed, value))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (float): drag values,\n        change_speed (float): how fast values change on drag.\n        max_value (float): max value allowed by widget.\n        min_value (float): min value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** Highly unsafe when used without care.\n            May lead to segmentation faults and other memory violation issues.\n        power (float): index of the power function applied to the value.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        widget state change and the current drag value.\n\n    .. wraps::\n        bool DragFloat(\n            const char* label,\n            float* v,\n            float v_speed = 1.0f,\n            float v_min = 0.0f,\n            float v_max = 0.0f,\n            const char* display_format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_147drag_float = {"drag_float", (PyCFunction)__pyx_pw_5imgui_4core_147drag_float, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_146drag_float};
static PyObject *__pyx_pw_5imgui_4core_147drag_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value;
  float __pyx_v_change_speed;
  float __pyx_v_max_value;
  float __pyx_v_min_value;
  PyObject *__pyx_v_display_format = 0;
  float __pyx_v_power;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_float (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_change_speed,&__pyx_n_s_max_value,&__pyx_n_s_min_value,&__pyx_n_s_display_format,&__pyx_n_s_power,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[5] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float", 0, 2, 7, 1); __PYX_ERR(0, 2966, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_float") < 0)) __PYX_ERR(0, 2966, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2967, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2968, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[3]) {
      __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2969, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((float)0.0);
    }
    if (values[4]) {
      __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2970, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((float)0.0);
    }
    __pyx_v_display_format = ((PyObject*)values[5]);
    if (values[6]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2972, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_float", 0, 2, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2966, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 2967, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 2971, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_146drag_float(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_v_display_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_146drag_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_change_speed, float __pyx_v_max_value, float __pyx_v_min_value, PyObject *__pyx_v_display_format, float __pyx_v_power) {
  float __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("drag_float", 0);

  /* "imgui/core.pyx":3024
 *         )
 *     """
 *     cdef float inout_value = value             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.DragFloat(
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":3026
 *     cdef float inout_value = value
 * 
 *     return cimgui.DragFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3027
 * 
 *     return cimgui.DragFloat(
 *         _bytes(label), &inout_value,             # <<<<<<<<<<<<<<
 *         change_speed, max_value, min_value, _bytes(display_format), power
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3027, __pyx_L1_error)

  /* "imgui/core.pyx":3028
 *     return cimgui.DragFloat(
 *         _bytes(label), &inout_value,
 *         change_speed, max_value, min_value, _bytes(display_format), power             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 3028, __pyx_L1_error)

  /* "imgui/core.pyx":3026
 *     cdef float inout_value = value
 * 
 *     return cimgui.DragFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 */
  try {
    __pyx_t_5 = ImGui::DragFloat(__pyx_t_2, (&__pyx_v_inout_value), __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_t_4, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3026, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "imgui/core.pyx":3029
 *         _bytes(label), &inout_value,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":3026
 *     cdef float inout_value = value
 * 
 *     return cimgui.DragFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":2966
 * 
 * 
 * def drag_float(             # <<<<<<<<<<<<<<
 *     str label, float value,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core.drag_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3032
 * 
 * 
 * def drag_float2(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_149drag_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_148drag_float2[] = "drag_float2(str label, float value0, float value1, float change_speed=1.0, float max_value=0.0, float min_value=0.0, str display_format='%.3f', float power=1.0)\nDisplay float drag widget with 2 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88.0, 42.0\n\n        imgui.begin(\"Example: drag float\")\n        changed, values = imgui.drag_float2(\n            \"Default\", *values\n        )\n        changed, values = imgui.drag_float2(\n            \"Less precise\", *values, display_format=\"%.1f\"\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1 (float): drag values.\n        change_speed (float): how fast values change on drag.\n        max_value (float): max value allowed by widget.\n        min_value (float): min value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe. See :any:`drag_float()`.\n        power (float): index of the power function applied to the value.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current drag values.\n\n    .. wraps::\n        bool DragFloat2(\n            const char* label,\n            float v[2],\n            float v_speed = 1.0f,\n            float v_min = 0.0f,\n            float v_max = 0.0f,\n            const char* display_format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_149drag_float2 = {"drag_float2", (PyCFunction)__pyx_pw_5imgui_4core_149drag_float2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_148drag_float2};
static PyObject *__pyx_pw_5imgui_4core_149drag_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_change_speed;
  float __pyx_v_max_value;
  float __pyx_v_min_value;
  PyObject *__pyx_v_display_format = 0;
  float __pyx_v_power;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_float2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_change_speed,&__pyx_n_s_max_value,&__pyx_n_s_min_value,&__pyx_n_s_display_format,&__pyx_n_s_power,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float2", 0, 3, 8, 1); __PYX_ERR(0, 3032, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float2", 0, 3, 8, 2); __PYX_ERR(0, 3032, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_float2") < 0)) __PYX_ERR(0, 3032, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3033, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3033, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3034, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[4]) {
      __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3035, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((float)0.0);
    }
    if (values[5]) {
      __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3036, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((float)0.0);
    }
    __pyx_v_display_format = ((PyObject*)values[6]);
    if (values[7]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3038, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_float2", 0, 3, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3032, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3033, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 3037, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_148drag_float2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_v_display_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_148drag_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_change_speed, float __pyx_v_max_value, float __pyx_v_min_value, PyObject *__pyx_v_display_format, float __pyx_v_power) {
  float __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("drag_float2", 0);

  /* "imgui/core.pyx":3084
 *         )
 *     """
 *     cdef float[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 *     return cimgui.DragFloat2(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "imgui/core.pyx":3085
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.DragFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3086
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.DragFloat2(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, max_value, min_value, _bytes(display_format), power
 *     ), (inout_values[0], inout_values[1])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3086, __pyx_L1_error)

  /* "imgui/core.pyx":3087
 *     return cimgui.DragFloat2(
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3087, __pyx_L1_error)

  /* "imgui/core.pyx":3085
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.DragFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 */
  try {
    __pyx_t_6 = ImGui::DragFloat2(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3085, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":3088
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 *     ), (inout_values[0], inout_values[1])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;

  /* "imgui/core.pyx":3085
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.DragFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3032
 * 
 * 
 * def drag_float2(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.drag_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3091
 * 
 * 
 * def drag_float3(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_151drag_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_150drag_float3[] = "drag_float3(str label, float value0, float value1, float value2, float change_speed=1.0, float max_value=0.0, float min_value=0.0, str display_format='%.3f', float power=1.0)\nDisplay float drag widget with 3 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88.0, 42.0, 69.0\n\n        imgui.begin(\"Example: drag float\")\n        changed, values = imgui.drag_float3(\n            \"Default\", *values\n        )\n        changed, values = imgui.drag_float3(\n            \"Less precise\", *values, display_format=\"%.1f\"\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2 (float): drag values.\n        change_speed (float): how fast values change on drag.\n        max_value (float): max value allowed by widget.\n        min_value (float): min value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe. See :any:`drag_float()`.\n        power (float): index of the power function applied to the value.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current drag values.\n\n    .. wraps::\n        bool DragFloat3(\n            const char* label,\n            float v[3],\n            float v_speed = 1.0f,\n            float v_min = 0.0f,\n            float v_max = 0.0f,\n            const char* display_format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_151drag_float3 = {"drag_float3", (PyCFunction)__pyx_pw_5imgui_4core_151drag_float3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_150drag_float3};
static PyObject *__pyx_pw_5imgui_4core_151drag_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  float __pyx_v_change_speed;
  float __pyx_v_max_value;
  float __pyx_v_min_value;
  PyObject *__pyx_v_display_format = 0;
  float __pyx_v_power;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_float3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_change_speed,&__pyx_n_s_max_value,&__pyx_n_s_min_value,&__pyx_n_s_display_format,&__pyx_n_s_power,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    values[7] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float3", 0, 4, 9, 1); __PYX_ERR(0, 3091, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float3", 0, 4, 9, 2); __PYX_ERR(0, 3091, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float3", 0, 4, 9, 3); __PYX_ERR(0, 3091, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_float3") < 0)) __PYX_ERR(0, 3091, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3092, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3092, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3092, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3093, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[5]) {
      __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3094, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((float)0.0);
    }
    if (values[6]) {
      __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3095, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((float)0.0);
    }
    __pyx_v_display_format = ((PyObject*)values[7]);
    if (values[8]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3097, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_float3", 0, 4, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3091, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3092, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 3096, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_150drag_float3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_v_display_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_150drag_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_change_speed, float __pyx_v_max_value, float __pyx_v_min_value, PyObject *__pyx_v_display_format, float __pyx_v_power) {
  float __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("drag_float3", 0);

  /* "imgui/core.pyx":3143
 *         )
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 *     return cimgui.DragFloat3(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "imgui/core.pyx":3144
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3145
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragFloat3(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, max_value, min_value, _bytes(display_format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3145, __pyx_L1_error)

  /* "imgui/core.pyx":3146
 *     return cimgui.DragFloat3(
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3146, __pyx_L1_error)

  /* "imgui/core.pyx":3144
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 */
  try {
    __pyx_t_6 = ImGui::DragFloat3(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3144, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":3147
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":3144
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3091
 * 
 * 
 * def drag_float3(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.drag_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3150
 * 
 * 
 * def drag_float4(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2, float value3,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_153drag_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_152drag_float4[] = "drag_float4(str label, float value0, float value1, float value2, float value3, float change_speed=1.0, float max_value=0.0, float min_value=0.0, str display_format='%.3f', float power=1.0)\nDisplay float drag widget with 4 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88.0, 42.0, 69.0, 0.0\n\n        imgui.begin(\"Example: drag float\")\n        changed, values = imgui.drag_float4(\n            \"Default\", *values\n        )\n        changed, values = imgui.drag_float4(\n            \"Less precise\", *values, display_format=\"%.1f\"\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2, value3 (float): drag values.\n        change_speed (float): how fast values change on drag.\n        max_value (float): max value allowed by widget.\n        min_value (float): min value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe. See :any:`drag_float()`.\n        power (float): index of the power function applied to the value.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current drag values.\n\n    .. wraps::\n        bool DragFloat4(\n            const char* label,\n            float v[4],\n            float v_speed = 1.0f,\n            float v_min = 0.0f,\n            float v_max = 0.0f,\n            const char* display_format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_153drag_float4 = {"drag_float4", (PyCFunction)__pyx_pw_5imgui_4core_153drag_float4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_152drag_float4};
static PyObject *__pyx_pw_5imgui_4core_153drag_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  float __pyx_v_value3;
  float __pyx_v_change_speed;
  float __pyx_v_max_value;
  float __pyx_v_min_value;
  PyObject *__pyx_v_display_format = 0;
  float __pyx_v_power;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_float4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_change_speed,&__pyx_n_s_max_value,&__pyx_n_s_min_value,&__pyx_n_s_display_format,&__pyx_n_s_power,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    values[8] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float4", 0, 5, 10, 1); __PYX_ERR(0, 3150, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float4", 0, 5, 10, 2); __PYX_ERR(0, 3150, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float4", 0, 5, 10, 3); __PYX_ERR(0, 3150, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_float4", 0, 5, 10, 4); __PYX_ERR(0, 3150, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[9] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_float4") < 0)) __PYX_ERR(0, 3150, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3151, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3151, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3151, __pyx_L3_error)
    __pyx_v_value3 = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_value3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3151, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3152, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[6]) {
      __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3153, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((float)0.0);
    }
    if (values[7]) {
      __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3154, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((float)0.0);
    }
    __pyx_v_display_format = ((PyObject*)values[8]);
    if (values[9]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[9]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3156, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_float4", 0, 5, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3150, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3151, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 3155, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_152drag_float4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_v_display_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_152drag_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, float __pyx_v_change_speed, float __pyx_v_max_value, float __pyx_v_min_value, PyObject *__pyx_v_display_format, float __pyx_v_power) {
  float __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("drag_float4", 0);

  /* "imgui/core.pyx":3202
 *         )
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 *     return cimgui.DragFloat4(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "imgui/core.pyx":3203
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3204
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragFloat4(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, max_value, min_value, _bytes(display_format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3204, __pyx_L1_error)

  /* "imgui/core.pyx":3205
 *     return cimgui.DragFloat4(
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3205, __pyx_L1_error)

  /* "imgui/core.pyx":3203
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 */
  try {
    __pyx_t_6 = ImGui::DragFloat4(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3203, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":3206
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 3206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "imgui/core.pyx":3203
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format), power
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_4 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3150
 * 
 * 
 * def drag_float4(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2, float value3,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("imgui.core.drag_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3209
 * 
 * 
 * def drag_int(             # <<<<<<<<<<<<<<
 *     str label, int value,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_155drag_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_154drag_int[] = "drag_int(str label, int value, float change_speed=1.0, int max_value=0, int min_value=0, str display_format='%.f')\nDisplay int drag widget.\n\n    .. todo::\n        Consider replacing ``display_format`` with something that allows\n        for safer way to specify display format without loosing the\n        functionality of wrapped function.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        value = 42\n\n        imgui.begin(\"Example: drag int\")\n        changed, value = imgui.drag_int(\"drag int\", value,)\n        imgui.text(\"Changed: %s, Value: %s\" % (changed, value))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (int): drag value,\n        change_speed (float): how fast values change on drag.\n        max_value (int): max value allowed by widget.\n        min_value (int): min value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** Highly unsafe when used without care.\n            May lead to segmentation faults and other memory violation issues.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        widget state change and the current drag value.\n\n    .. wraps::\n        bool DragInt(\n            const char* label,\n            int* v,\n            float v_speed = 1.0f,\n            int v_min = 0.0f,\n            int v_max = 0.0f,\n            const char* display_format = \"%.f\",\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_155drag_int = {"drag_int", (PyCFunction)__pyx_pw_5imgui_4core_155drag_int, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_154drag_int};
static PyObject *__pyx_pw_5imgui_4core_155drag_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value;
  float __pyx_v_change_speed;
  int __pyx_v_max_value;
  int __pyx_v_min_value;
  PyObject *__pyx_v_display_format = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_int (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_change_speed,&__pyx_n_s_max_value,&__pyx_n_s_min_value,&__pyx_n_s_display_format,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int", 0, 2, 6, 1); __PYX_ERR(0, 3209, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_int") < 0)) __PYX_ERR(0, 3209, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3210, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3211, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[3]) {
      __pyx_v_max_value = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3212, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((int)0);
    }
    if (values[4]) {
      __pyx_v_min_value = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3213, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((int)0);
    }
    __pyx_v_display_format = ((PyObject*)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_int", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3209, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3210, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 3214, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_154drag_int(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_v_display_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_154drag_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, float __pyx_v_change_speed, int __pyx_v_max_value, int __pyx_v_min_value, PyObject *__pyx_v_display_format) {
  int __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("drag_int", 0);

  /* "imgui/core.pyx":3259
 *         )
 *     """
 *     cdef int inout_value = value             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.DragInt(
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":3261
 *     cdef int inout_value = value
 * 
 *     return cimgui.DragInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, max_value, min_value, _bytes(display_format)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3262
 * 
 *     return cimgui.DragInt(
 *         _bytes(label), &inout_value,             # <<<<<<<<<<<<<<
 *         change_speed, max_value, min_value, _bytes(display_format)
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3262, __pyx_L1_error)

  /* "imgui/core.pyx":3263
 *     return cimgui.DragInt(
 *         _bytes(label), &inout_value,
 *         change_speed, max_value, min_value, _bytes(display_format)             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 3263, __pyx_L1_error)

  /* "imgui/core.pyx":3261
 *     cdef int inout_value = value
 * 
 *     return cimgui.DragInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, max_value, min_value, _bytes(display_format)
 */
  try {
    __pyx_t_5 = ImGui::DragInt(__pyx_t_2, (&__pyx_v_inout_value), __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3261, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "imgui/core.pyx":3264
 *         _bytes(label), &inout_value,
 *         change_speed, max_value, min_value, _bytes(display_format)
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":3261
 *     cdef int inout_value = value
 * 
 *     return cimgui.DragInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value,
 *         change_speed, max_value, min_value, _bytes(display_format)
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3209
 * 
 * 
 * def drag_int(             # <<<<<<<<<<<<<<
 *     str label, int value,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core.drag_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3267
 * 
 * 
 * def drag_int2(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_157drag_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_156drag_int2[] = "drag_int2(str label, int value0, int value1, float change_speed=1.0, int max_value=0, int min_value=0, str display_format='%.f')\nDisplay int drag widget with 2 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88, 42\n\n        imgui.begin(\"Example: drag int\")\n        changed, values = imgui.drag_int2(\n            \"drag ints\", *values\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1 (int): drag values.\n        change_speed (float): how fast values change on drag.\n        max_value (int): max value allowed by widget.\n        min_value (int): min value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe. See :any:`drag_int()`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current drag values.\n\n    .. wraps::\n        bool DragInt2(\n            const char* label,\n            int v[2],\n            float v_speed = 1.0f,\n            int v_min = 0.0f,\n            int v_max = 0.0f,\n            const char* display_format = \"%.f\",\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_157drag_int2 = {"drag_int2", (PyCFunction)__pyx_pw_5imgui_4core_157drag_int2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_156drag_int2};
static PyObject *__pyx_pw_5imgui_4core_157drag_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  float __pyx_v_change_speed;
  int __pyx_v_max_value;
  int __pyx_v_min_value;
  PyObject *__pyx_v_display_format = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_int2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_change_speed,&__pyx_n_s_max_value,&__pyx_n_s_min_value,&__pyx_n_s_display_format,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int2", 0, 3, 7, 1); __PYX_ERR(0, 3267, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int2", 0, 3, 7, 2); __PYX_ERR(0, 3267, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_int2") < 0)) __PYX_ERR(0, 3267, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3268, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3268, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3269, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[4]) {
      __pyx_v_max_value = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3270, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((int)0);
    }
    if (values[5]) {
      __pyx_v_min_value = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3271, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((int)0);
    }
    __pyx_v_display_format = ((PyObject*)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_int2", 0, 3, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3267, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3268, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 3272, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_156drag_int2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_v_display_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_156drag_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, float __pyx_v_change_speed, int __pyx_v_max_value, int __pyx_v_min_value, PyObject *__pyx_v_display_format) {
  int __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("drag_int2", 0);

  /* "imgui/core.pyx":3313
 *         )
 *     """
 *     cdef int[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 *     return cimgui.DragInt2(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "imgui/core.pyx":3314
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.DragInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3315
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.DragInt2(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, max_value, min_value, _bytes(display_format),
 *     ), (inout_values[0], inout_values[1])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3315, __pyx_L1_error)

  /* "imgui/core.pyx":3316
 *     return cimgui.DragInt2(
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format),             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3316, __pyx_L1_error)

  /* "imgui/core.pyx":3314
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.DragInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format),
 */
  try {
    __pyx_t_6 = ImGui::DragInt2(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3314, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":3317
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format),
 *     ), (inout_values[0], inout_values[1])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;

  /* "imgui/core.pyx":3314
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.DragInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format),
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3267
 * 
 * 
 * def drag_int2(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.drag_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3320
 * 
 * 
 * def drag_int3(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_159drag_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_158drag_int3[] = "drag_int3(str label, int value0, int value1, int value2, float change_speed=1.0, int max_value=0, int min_value=0, str display_format='%.f')\nDisplay int drag widget with 3 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88, 42, 69\n\n        imgui.begin(\"Example: drag int\")\n        changed, values = imgui.drag_int3(\n            \"drag ints\", *values\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1 (int): drag values.\n        change_speed (float): how fast values change on drag.\n        max_value (int): max value allowed by widget.\n        min_value (int): min value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe. See :any:`drag_int()`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current drag values.\n\n    .. wraps::\n        bool DragInt3(\n            const char* label,\n            int v[3],\n            float v_speed = 1.0f,\n            int v_min = 0.0f,\n            int v_max = 0.0f,\n            const char* display_format = \"%.f\",\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_159drag_int3 = {"drag_int3", (PyCFunction)__pyx_pw_5imgui_4core_159drag_int3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_158drag_int3};
static PyObject *__pyx_pw_5imgui_4core_159drag_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  float __pyx_v_change_speed;
  int __pyx_v_max_value;
  int __pyx_v_min_value;
  PyObject *__pyx_v_display_format = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_int3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_change_speed,&__pyx_n_s_max_value,&__pyx_n_s_min_value,&__pyx_n_s_display_format,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[7] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int3", 0, 4, 8, 1); __PYX_ERR(0, 3320, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int3", 0, 4, 8, 2); __PYX_ERR(0, 3320, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int3", 0, 4, 8, 3); __PYX_ERR(0, 3320, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_int3") < 0)) __PYX_ERR(0, 3320, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3321, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3321, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3321, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3322, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[5]) {
      __pyx_v_max_value = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3323, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((int)0);
    }
    if (values[6]) {
      __pyx_v_min_value = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3324, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((int)0);
    }
    __pyx_v_display_format = ((PyObject*)values[7]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_int3", 0, 4, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3320, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3321, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 3325, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_158drag_int3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_v_display_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_158drag_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, float __pyx_v_change_speed, int __pyx_v_max_value, int __pyx_v_min_value, PyObject *__pyx_v_display_format) {
  int __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("drag_int3", 0);

  /* "imgui/core.pyx":3366
 *         )
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 *     return cimgui.DragInt3(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "imgui/core.pyx":3367
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3368
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragInt3(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, max_value, min_value, _bytes(display_format),
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3368, __pyx_L1_error)

  /* "imgui/core.pyx":3369
 *     return cimgui.DragInt3(
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format),             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3369, __pyx_L1_error)

  /* "imgui/core.pyx":3367
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format),
 */
  try {
    __pyx_t_6 = ImGui::DragInt3(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3367, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":3370
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format),
 *     ), (inout_values[0], inout_values[1], inout_values[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":3367
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.DragInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format),
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3320
 * 
 * 
 * def drag_int3(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.drag_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3373
 * 
 * 
 * def drag_int4(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2, int value3,
 *     float change_speed = 1.0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_161drag_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_160drag_int4[] = "drag_int4(str label, int value0, int value1, int value2, int value3, float change_speed=1.0, int max_value=0, int min_value=0, str display_format='%.f')\nDisplay int drag widget with 4 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88, 42, 69, 0\n\n        imgui.begin(\"Example: drag int\")\n        changed, values = imgui.drag_int4(\n            \"drag ints\", *values\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1 (int): drag values.\n        change_speed (float): how fast values change on drag.\n        max_value (int): max value allowed by widget.\n        min_value (int): min value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe. See :any:`drag_int()`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current drag values.\n\n    .. wraps::\n        bool DragInt4(\n            const char* label,\n            int v[4],\n            float v_speed = 1.0f,\n            int v_min = 0.0f,\n            int v_max = 0.0f,\n            const char* display_format = \"%.f\",\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_161drag_int4 = {"drag_int4", (PyCFunction)__pyx_pw_5imgui_4core_161drag_int4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_160drag_int4};
static PyObject *__pyx_pw_5imgui_4core_161drag_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  int __pyx_v_value3;
  float __pyx_v_change_speed;
  int __pyx_v_max_value;
  int __pyx_v_min_value;
  PyObject *__pyx_v_display_format = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drag_int4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_change_speed,&__pyx_n_s_max_value,&__pyx_n_s_min_value,&__pyx_n_s_display_format,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    values[8] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int4", 0, 5, 9, 1); __PYX_ERR(0, 3373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int4", 0, 5, 9, 2); __PYX_ERR(0, 3373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int4", 0, 5, 9, 3); __PYX_ERR(0, 3373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drag_int4", 0, 5, 9, 4); __PYX_ERR(0, 3373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_change_speed);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drag_int4") < 0)) __PYX_ERR(0, 3373, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3374, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3374, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3374, __pyx_L3_error)
    __pyx_v_value3 = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_value3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3374, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_change_speed = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_change_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3375, __pyx_L3_error)
    } else {
      __pyx_v_change_speed = ((float)1.0);
    }
    if (values[6]) {
      __pyx_v_max_value = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3376, __pyx_L3_error)
    } else {
      __pyx_v_max_value = ((int)0);
    }
    if (values[7]) {
      __pyx_v_min_value = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3377, __pyx_L3_error)
    } else {
      __pyx_v_min_value = ((int)0);
    }
    __pyx_v_display_format = ((PyObject*)values[8]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drag_int4", 0, 5, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3373, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.drag_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3374, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 3378, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_160drag_int4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_v_display_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_160drag_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, float __pyx_v_change_speed, int __pyx_v_max_value, int __pyx_v_min_value, PyObject *__pyx_v_display_format) {
  int __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("drag_int4", 0);

  /* "imgui/core.pyx":3419
 *         )
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 *     return cimgui.DragInt4(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "imgui/core.pyx":3420
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3421
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragInt4(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         change_speed, max_value, min_value, _bytes(display_format),
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3421, __pyx_L1_error)

  /* "imgui/core.pyx":3422
 *     return cimgui.DragInt4(
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format),             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 3422, __pyx_L1_error)

  /* "imgui/core.pyx":3420
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format),
 */
  try {
    __pyx_t_6 = ImGui::DragInt4(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_change_speed, __pyx_v_max_value, __pyx_v_min_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3420, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":3423
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format),
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 3423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "imgui/core.pyx":3420
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.DragInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         change_speed, max_value, min_value, _bytes(display_format),
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_4 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3373
 * 
 * 
 * def drag_int4(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2, int value3,
 *     float change_speed = 1.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("imgui.core.drag_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3426
 * 
 * 
 * def input_text(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_163input_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_162input_text[] = "input_text(str label, str value, int buffer_length, ImGuiInputTextFlags flags=0)\nDisplay text input widget.\n\n    ``buffer_length`` is the maximum allowed length of the content.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        text_val = 'Please, type the coefficient here.'\n        imgui.begin(\"Example: text input\")\n        changed, text_val = imgui.input_text(\n            'Amount:',\n            text_val,\n            256\n        )\n        imgui.text('You wrote:')\n        imgui.same_line()\n        imgui.text(text_val)\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (str): textbox value\n        buffer_length (int): length of the content buffer\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        textbox state change and the current text contents.\n\n    .. wraps::\n        bool InputText(\n            const char* label,\n            char* buf,\n            size_t buf_size,\n            ImGuiInputTextFlags flags = 0,\n            ImGuiTextEditCallback callback = NULL,\n            void* user_data = NULL\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_163input_text = {"input_text", (PyCFunction)__pyx_pw_5imgui_4core_163input_text, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_162input_text};
static PyObject *__pyx_pw_5imgui_4core_163input_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_v_buffer_length;
  ImGuiInputTextFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_buffer_length,&__pyx_n_s_flags,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_text", 0, 3, 4, 1); __PYX_ERR(0, 3426, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_buffer_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_text", 0, 3, 4, 2); __PYX_ERR(0, 3426, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_text") < 0)) __PYX_ERR(0, 3426, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = ((PyObject*)values[1]);
    __pyx_v_buffer_length = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_buffer_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3429, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[3]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3430, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_text", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3426, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3427, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(0, 3428, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_162input_text(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_buffer_length, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_162input_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_value, int __pyx_v_buffer_length, ImGuiInputTextFlags __pyx_v_flags) {
  char *__pyx_v_inout_text;
  bool __pyx_v_changed;
  PyObject *__pyx_v_output = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("input_text", 0);

  /* "imgui/core.pyx":3475
 *     """
 *     # todo: pymalloc
 *     cdef char* inout_text = <char*>malloc(buffer_length * sizeof(char))             # <<<<<<<<<<<<<<
 *     # todo: take special care of terminating char
 *     strncpy(inout_text, _bytes(value), buffer_length)
 */
  __pyx_v_inout_text = ((char *)malloc((__pyx_v_buffer_length * (sizeof(char)))));

  /* "imgui/core.pyx":3477
 *     cdef char* inout_text = <char*>malloc(buffer_length * sizeof(char))
 *     # todo: take special care of terminating char
 *     strncpy(inout_text, _bytes(value), buffer_length)             # <<<<<<<<<<<<<<
 * 
 *     changed = cimgui.InputText(
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3477, __pyx_L1_error)
  strncpy(__pyx_v_inout_text, __pyx_t_2, __pyx_v_buffer_length);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3480
 * 
 *     changed = cimgui.InputText(
 *         _bytes(label), inout_text, buffer_length, flags, NULL, NULL             # <<<<<<<<<<<<<<
 *     )
 *     output = _from_bytes(inout_text)
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3480, __pyx_L1_error)

  /* "imgui/core.pyx":3479
 *     strncpy(inout_text, _bytes(value), buffer_length)
 * 
 *     changed = cimgui.InputText(             # <<<<<<<<<<<<<<
 *         _bytes(label), inout_text, buffer_length, flags, NULL, NULL
 *     )
 */
  try {
    __pyx_t_4 = ImGui::InputText(__pyx_t_3, __pyx_v_inout_text, __pyx_v_buffer_length, __pyx_v_flags, NULL, NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3479, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_changed = __pyx_t_4;

  /* "imgui/core.pyx":3482
 *         _bytes(label), inout_text, buffer_length, flags, NULL, NULL
 *     )
 *     output = _from_bytes(inout_text)             # <<<<<<<<<<<<<<
 * 
 *     free(inout_text)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_inout_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_f_5imgui_4core__from_bytes(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_output = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "imgui/core.pyx":3484
 *     output = _from_bytes(inout_text)
 * 
 *     free(inout_text)             # <<<<<<<<<<<<<<
 *     return changed, output
 * 
 */
  free(__pyx_v_inout_text);

  /* "imgui/core.pyx":3485
 * 
 *     free(inout_text)
 *     return changed, output             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_changed); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __Pyx_INCREF(__pyx_v_output);
  __Pyx_GIVEREF(__pyx_v_output);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_output);
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3426
 * 
 * 
 * def input_text(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.input_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3488
 * 
 * 
 * def input_text_multiline(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_165input_text_multiline(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_164input_text_multiline[] = "input_text_multiline(str label, str value, int buffer_length, float width=0, float height=0, ImGuiInputTextFlags flags=0)\nDisplay multiline text input widget.\n\n    ``buffer_length`` is the maximum allowed length of the content.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 200\n\n        text_val = 'Type the your message here.'\n        imgui.begin(\"Example: text input\")\n        changed, text_val = imgui.input_text_multiline(\n            'Message:',\n            text_val,\n            2056\n        )\n        imgui.text('You wrote:')\n        imgui.same_line()\n        imgui.text(text_val)\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (str): textbox value\n        buffer_length (int): length of the content buffer\n        width (float): width of the textbox\n        height (float): height of the textbox\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        textbox state change and the current text contents.\n\n    .. wraps::\n        bool InputTextMultiline(\n            const char* label,\n            char* buf,\n            size_t buf_size,\n            const ImVec2& size = ImVec2(0,0),\n            ImGuiInputTextFlags flags = 0,\n            ImGuiTextEditCallback callback = NULL,\n            void* user_data = NULL\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_165input_text_multiline = {"input_text_multiline", (PyCFunction)__pyx_pw_5imgui_4core_165input_text_multiline, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_164input_text_multiline};
static PyObject *__pyx_pw_5imgui_4core_165input_text_multiline(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_v_buffer_length;
  float __pyx_v_width;
  float __pyx_v_height;
  ImGuiInputTextFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_text_multiline (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_buffer_length,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_flags,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_text_multiline", 0, 3, 6, 1); __PYX_ERR(0, 3488, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_buffer_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_text_multiline", 0, 3, 6, 2); __PYX_ERR(0, 3488, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_text_multiline") < 0)) __PYX_ERR(0, 3488, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = ((PyObject*)values[1]);
    __pyx_v_buffer_length = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_buffer_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3491, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3492, __pyx_L3_error)
    } else {
      __pyx_v_width = ((float)0.0);
    }
    if (values[4]) {
      __pyx_v_height = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3493, __pyx_L3_error)
    } else {
      __pyx_v_height = ((float)0.0);
    }
    if (values[5]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[5]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3494, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_text_multiline", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3488, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_text_multiline", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3489, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(0, 3490, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_164input_text_multiline(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_buffer_length, __pyx_v_width, __pyx_v_height, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_164input_text_multiline(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, PyObject *__pyx_v_value, int __pyx_v_buffer_length, float __pyx_v_width, float __pyx_v_height, ImGuiInputTextFlags __pyx_v_flags) {
  char *__pyx_v_inout_text;
  bool __pyx_v_changed;
  PyObject *__pyx_v_output = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  char const *__pyx_t_3;
  ImVec2 __pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("input_text_multiline", 0);

  /* "imgui/core.pyx":3541
 *         )
 *     """
 *     cdef char* inout_text = <char*>malloc(buffer_length * sizeof(char))             # <<<<<<<<<<<<<<
 *     # todo: take special care of terminating char
 *     strncpy(inout_text, _bytes(value), buffer_length)
 */
  __pyx_v_inout_text = ((char *)malloc((__pyx_v_buffer_length * (sizeof(char)))));

  /* "imgui/core.pyx":3543
 *     cdef char* inout_text = <char*>malloc(buffer_length * sizeof(char))
 *     # todo: take special care of terminating char
 *     strncpy(inout_text, _bytes(value), buffer_length)             # <<<<<<<<<<<<<<
 * 
 *     changed = cimgui.InputTextMultiline(
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3543, __pyx_L1_error)
  strncpy(__pyx_v_inout_text, __pyx_t_2, __pyx_v_buffer_length);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3546
 * 
 *     changed = cimgui.InputTextMultiline(
 *         _bytes(label), inout_text, buffer_length,             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(width, height), flags,
 *         NULL, NULL
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3546, __pyx_L1_error)

  /* "imgui/core.pyx":3547
 *     changed = cimgui.InputTextMultiline(
 *         _bytes(label), inout_text, buffer_length,
 *         _cast_args_ImVec2(width, height), flags,             # <<<<<<<<<<<<<<
 *         NULL, NULL
 *     )
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3547, __pyx_L1_error)

  /* "imgui/core.pyx":3545
 *     strncpy(inout_text, _bytes(value), buffer_length)
 * 
 *     changed = cimgui.InputTextMultiline(             # <<<<<<<<<<<<<<
 *         _bytes(label), inout_text, buffer_length,
 *         _cast_args_ImVec2(width, height), flags,
 */
  try {
    __pyx_t_5 = ImGui::InputTextMultiline(__pyx_t_3, __pyx_v_inout_text, __pyx_v_buffer_length, __pyx_t_4, __pyx_v_flags, NULL, NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3545, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_changed = __pyx_t_5;

  /* "imgui/core.pyx":3550
 *         NULL, NULL
 *     )
 *     output = _from_bytes(inout_text)             # <<<<<<<<<<<<<<
 * 
 *     free(inout_text)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_inout_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __pyx_f_5imgui_4core__from_bytes(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_output = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "imgui/core.pyx":3552
 *     output = _from_bytes(inout_text)
 * 
 *     free(inout_text)             # <<<<<<<<<<<<<<
 *     return changed, output
 * 
 */
  free(__pyx_v_inout_text);

  /* "imgui/core.pyx":3553
 * 
 *     free(inout_text)
 *     return changed, output             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_changed); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_output);
  __Pyx_GIVEREF(__pyx_v_output);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_output);
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3488
 * 
 * 
 * def input_text_multiline(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core.input_text_multiline", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3556
 * 
 * 
 * def input_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_167input_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_166input_float[] = "input_float(str label, float value, float step=0.0, float step_fast=0.0, int decimal_precision=-1, ImGuiInputTextFlags flags=0)\nDisplay float input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        float_val = 0.4\n        imgui.begin(\"Example: float input\")\n        changed, float_val = imgui.input_float('Type coefficient:', float_val)\n        imgui.text('You wrote: %f' % float_val)\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (float): textbox value\n        step (float): incremental step\n        step_fast (float): fast incremental step\n        decimal_precision (int): float precision\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        textbox state change and the current textbox content.\n\n    .. wraps::\n        bool InputFloat(\n            const char* label,\n            float* v,\n            float step = 0.0f,\n            float step_fast = 0.0f,\n            int decimal_precision = -1,\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_167input_float = {"input_float", (PyCFunction)__pyx_pw_5imgui_4core_167input_float, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_166input_float};
static PyObject *__pyx_pw_5imgui_4core_167input_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value;
  float __pyx_v_step;
  float __pyx_v_step_fast;
  int __pyx_v_decimal_precision;
  ImGuiInputTextFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_float (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_step,&__pyx_n_s_step_fast,&__pyx_n_s_decimal_precision,&__pyx_n_s_flags,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float", 0, 2, 6, 1); __PYX_ERR(0, 3556, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step_fast);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_decimal_precision);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_float") < 0)) __PYX_ERR(0, 3556, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3558, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_step = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_step == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3559, __pyx_L3_error)
    } else {
      __pyx_v_step = ((float)0.0);
    }
    if (values[3]) {
      __pyx_v_step_fast = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_step_fast == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3560, __pyx_L3_error)
    } else {
      __pyx_v_step_fast = ((float)0.0);
    }
    if (values[4]) {
      __pyx_v_decimal_precision = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_decimal_precision == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3561, __pyx_L3_error)
    } else {
      __pyx_v_decimal_precision = ((int)-1);
    }
    if (values[5]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[5]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3562, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_float", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3556, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3557, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_166input_float(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_step, __pyx_v_step_fast, __pyx_v_decimal_precision, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_166input_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_step, float __pyx_v_step_fast, int __pyx_v_decimal_precision, ImGuiInputTextFlags __pyx_v_flags) {
  float __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("input_float", 0);

  /* "imgui/core.pyx":3600
 *         )
 *     """
 *     cdef float inout_value = value             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputFloat(
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":3602
 *     cdef float inout_value = value
 * 
 *     return cimgui.InputFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step,
 *         step_fast, decimal_precision, flags
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3603
 * 
 *     return cimgui.InputFloat(
 *         _bytes(label), &inout_value, step,             # <<<<<<<<<<<<<<
 *         step_fast, decimal_precision, flags
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3603, __pyx_L1_error)

  /* "imgui/core.pyx":3602
 *     cdef float inout_value = value
 * 
 *     return cimgui.InputFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step,
 *         step_fast, decimal_precision, flags
 */
  try {
    __pyx_t_3 = ImGui::InputFloat(__pyx_t_2, (&__pyx_v_inout_value), __pyx_v_step, __pyx_v_step_fast, __pyx_v_decimal_precision, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3602, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":3605
 *         _bytes(label), &inout_value, step,
 *         step_fast, decimal_precision, flags
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":3602
 *     cdef float inout_value = value
 * 
 *     return cimgui.InputFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step,
 *         step_fast, decimal_precision, flags
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3556
 * 
 * 
 * def input_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.input_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3608
 * 
 * 
 * def input_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_169input_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_168input_float2[] = "input_float2(str label, float value0, float value1, int decimal_precision=-1, ImGuiInputTextFlags flags=0)\nDisplay two-float input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        values = 0.4, 3.2\n        imgui.begin(\"Example: two float inputs\")\n        changed, values = imgui.input_float2('Type here:', *values)\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1 (float): input values.\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        textbox state change and the tuple of current values.\n\n    .. wraps::\n        bool InputFloat2(\n            const char* label,\n            float v[2],\n            int decimal_precision = -1,\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_169input_float2 = {"input_float2", (PyCFunction)__pyx_pw_5imgui_4core_169input_float2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_168input_float2};
static PyObject *__pyx_pw_5imgui_4core_169input_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  int __pyx_v_decimal_precision;
  ImGuiInputTextFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_float2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_decimal_precision,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float2", 0, 3, 5, 1); __PYX_ERR(0, 3608, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float2", 0, 3, 5, 2); __PYX_ERR(0, 3608, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_decimal_precision);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_float2") < 0)) __PYX_ERR(0, 3608, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3610, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3610, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_decimal_precision = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_decimal_precision == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3611, __pyx_L3_error)
    } else {
      __pyx_v_decimal_precision = ((int)-1);
    }
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[4]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3612, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_float2", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3608, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3609, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_168input_float2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_decimal_precision, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_168input_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, int __pyx_v_decimal_precision, ImGuiInputTextFlags __pyx_v_flags) {
  float __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("input_float2", 0);

  /* "imgui/core.pyx":3645
 *         )
 *     """
 *     cdef float[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputFloat2(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "imgui/core.pyx":3647
 *     cdef float[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         decimal_precision, flags
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3648
 * 
 *     return cimgui.InputFloat2(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         decimal_precision, flags
 *     ), (inout_values[0], inout_values[1])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3648, __pyx_L1_error)

  /* "imgui/core.pyx":3647
 *     cdef float[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         decimal_precision, flags
 */
  try {
    __pyx_t_4 = ImGui::InputFloat2(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_decimal_precision, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3647, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":3650
 *         _bytes(label), <float*>&inout_values,
 *         decimal_precision, flags
 *     ), (inout_values[0], inout_values[1])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;

  /* "imgui/core.pyx":3647
 *     cdef float[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         decimal_precision, flags
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3608
 * 
 * 
 * def input_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("imgui.core.input_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3653
 * 
 * 
 * def input_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_171input_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_170input_float3[] = "input_float3(str label, float value0, float value1, float value2, int decimal_precision=-1, ImGuiInputTextFlags flags=0)\nDisplay three-float input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        values = 0.4, 3.2, 29.3\n        imgui.begin(\"Example: three float inputs\")\n        changed, values = imgui.input_float3('Type here:', *values)\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2 (float): input values.\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        textbox state change and the tuple of current values.\n\n    .. wraps::\n        bool InputFloat3(\n            const char* label,\n            float v[3],\n            int decimal_precision = -1,\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_171input_float3 = {"input_float3", (PyCFunction)__pyx_pw_5imgui_4core_171input_float3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_170input_float3};
static PyObject *__pyx_pw_5imgui_4core_171input_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  int __pyx_v_decimal_precision;
  ImGuiInputTextFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_float3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_decimal_precision,&__pyx_n_s_flags,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float3", 0, 4, 6, 1); __PYX_ERR(0, 3653, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float3", 0, 4, 6, 2); __PYX_ERR(0, 3653, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float3", 0, 4, 6, 3); __PYX_ERR(0, 3653, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_decimal_precision);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_float3") < 0)) __PYX_ERR(0, 3653, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3655, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3655, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3655, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_decimal_precision = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_decimal_precision == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3656, __pyx_L3_error)
    } else {
      __pyx_v_decimal_precision = ((int)-1);
    }
    if (values[5]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[5]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3657, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_float3", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3653, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3654, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_170input_float3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_decimal_precision, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_170input_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, int __pyx_v_decimal_precision, ImGuiInputTextFlags __pyx_v_flags) {
  float __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("input_float3", 0);

  /* "imgui/core.pyx":3690
 *         )
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputFloat3(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "imgui/core.pyx":3692
 *     cdef float[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         decimal_precision, flags
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3693
 * 
 *     return cimgui.InputFloat3(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         decimal_precision, flags
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3693, __pyx_L1_error)

  /* "imgui/core.pyx":3692
 *     cdef float[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         decimal_precision, flags
 */
  try {
    __pyx_t_4 = ImGui::InputFloat3(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_decimal_precision, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3692, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":3695
 *         _bytes(label), <float*>&inout_values,
 *         decimal_precision, flags
 *     ), (inout_values[0], inout_values[1], inout_values[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;

  /* "imgui/core.pyx":3692
 *     cdef float[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         decimal_precision, flags
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3653
 * 
 * 
 * def input_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.input_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3698
 * 
 * 
 * def input_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_173input_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_172input_float4[] = "input_float4(str label, float value0, float value1, float value2, float value3, int decimal_precision=-1, ImGuiInputTextFlags flags=0)\nDisplay four-float input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        values = 0.4, 3.2, 29.3, 12.9\n        imgui.begin(\"Example: four float inputs\")\n        changed, values = imgui.input_float4('Type here:', *values)\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2, value3 (float): input values.\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        textbox state change and the tuple of current values.\n\n    .. wraps::\n        bool InputFloat4(\n            const char* label,\n            float v[4],\n            int decimal_precision = -1,\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_173input_float4 = {"input_float4", (PyCFunction)__pyx_pw_5imgui_4core_173input_float4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_172input_float4};
static PyObject *__pyx_pw_5imgui_4core_173input_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  float __pyx_v_value3;
  int __pyx_v_decimal_precision;
  ImGuiInputTextFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_float4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_decimal_precision,&__pyx_n_s_flags,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float4", 0, 5, 7, 1); __PYX_ERR(0, 3698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float4", 0, 5, 7, 2); __PYX_ERR(0, 3698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float4", 0, 5, 7, 3); __PYX_ERR(0, 3698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_float4", 0, 5, 7, 4); __PYX_ERR(0, 3698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_decimal_precision);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_float4") < 0)) __PYX_ERR(0, 3698, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3700, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3700, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3700, __pyx_L3_error)
    __pyx_v_value3 = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_value3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3700, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_decimal_precision = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_decimal_precision == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3701, __pyx_L3_error)
    } else {
      __pyx_v_decimal_precision = ((int)-1);
    }
    if (values[6]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[6]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3702, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_float4", 0, 5, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3698, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3699, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_172input_float4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_decimal_precision, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_172input_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, int __pyx_v_decimal_precision, ImGuiInputTextFlags __pyx_v_flags) {
  float __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("input_float4", 0);

  /* "imgui/core.pyx":3735
 *         )
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputFloat4(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "imgui/core.pyx":3737
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         decimal_precision, flags
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3738
 * 
 *     return cimgui.InputFloat4(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         decimal_precision, flags
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3738, __pyx_L1_error)

  /* "imgui/core.pyx":3737
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         decimal_precision, flags
 */
  try {
    __pyx_t_4 = ImGui::InputFloat4(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_decimal_precision, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3737, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":3740
 *         _bytes(label), <float*>&inout_values,
 *         decimal_precision, flags
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_8);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":3737
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         decimal_precision, flags
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3698
 * 
 * 
 * def input_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.input_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3743
 * 
 * 
 * def input_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_175input_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_174input_int[] = "input_int(str label, int value, int step=1, int step_fast=100, ImGuiInputTextFlags flags=0)\nDisplay integer input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        int_val = 3\n        imgui.begin(\"Example: integer input\")\n        changed, int_val = imgui.input_float('Type multiplier:', int_val)\n        imgui.text('You wrote: %i' % int_val)\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value (int): textbox value\n        step (int): incremental step\n        step_fast (int): fast incremental step\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        textbox state change and the current textbox content.\n\n    .. wraps::\n        bool InputInt(\n            const char* label,\n            int* v,\n            int step = 1,\n            int step_fast = 100,\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_175input_int = {"input_int", (PyCFunction)__pyx_pw_5imgui_4core_175input_int, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_174input_int};
static PyObject *__pyx_pw_5imgui_4core_175input_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value;
  int __pyx_v_step;
  int __pyx_v_step_fast;
  ImGuiInputTextFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_int (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_step,&__pyx_n_s_step_fast,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int", 0, 2, 5, 1); __PYX_ERR(0, 3743, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step_fast);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_int") < 0)) __PYX_ERR(0, 3743, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3745, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_step = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_step == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3746, __pyx_L3_error)
    } else {
      __pyx_v_step = ((int)1);
    }
    if (values[3]) {
      __pyx_v_step_fast = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_step_fast == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3747, __pyx_L3_error)
    } else {
      __pyx_v_step_fast = ((int)0x64);
    }
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[4]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3748, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_int", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3743, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3744, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_174input_int(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_step, __pyx_v_step_fast, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_174input_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, int __pyx_v_step, int __pyx_v_step_fast, ImGuiInputTextFlags __pyx_v_flags) {
  int __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("input_int", 0);

  /* "imgui/core.pyx":3784
 *         )
 *     """
 *     cdef int inout_value = value             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputInt(
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":3786
 *     cdef int inout_value = value
 * 
 *     return cimgui.InputInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step, step_fast, flags
 *     ), inout_value
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3787
 * 
 *     return cimgui.InputInt(
 *         _bytes(label), &inout_value, step, step_fast, flags             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3787, __pyx_L1_error)

  /* "imgui/core.pyx":3786
 *     cdef int inout_value = value
 * 
 *     return cimgui.InputInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step, step_fast, flags
 *     ), inout_value
 */
  try {
    __pyx_t_3 = ImGui::InputInt(__pyx_t_2, (&__pyx_v_inout_value), __pyx_v_step, __pyx_v_step_fast, __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3786, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":3788
 *     return cimgui.InputInt(
 *         _bytes(label), &inout_value, step, step_fast, flags
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_inout_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":3786
 *     cdef int inout_value = value
 * 
 *     return cimgui.InputInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), &inout_value, step, step_fast, flags
 *     ), inout_value
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3743
 * 
 * 
 * def input_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("imgui.core.input_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3791
 * 
 * 
 * def input_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_177input_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_176input_int2[] = "input_int2(str label, int value0, int value1, ImGuiInputTextFlags flags=0)\nDisplay two-integer input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        values = 4, 12\n        imgui.begin(\"Example: two int inputs\")\n        changed, values = imgui.input_int2('Type here:', *values)\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1 (int): textbox values\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        textbox state change and the current textbox content.\n\n    .. wraps::\n        bool InputInt2(\n            const char* label,\n            int v[2],\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_177input_int2 = {"input_int2", (PyCFunction)__pyx_pw_5imgui_4core_177input_int2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_176input_int2};
static PyObject *__pyx_pw_5imgui_4core_177input_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  ImGuiInputTextFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_int2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_flags,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int2", 0, 3, 4, 1); __PYX_ERR(0, 3791, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int2", 0, 3, 4, 2); __PYX_ERR(0, 3791, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_int2") < 0)) __PYX_ERR(0, 3791, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3793, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3793, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[3]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3794, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_int2", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3791, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3792, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_176input_int2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_176input_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, ImGuiInputTextFlags __pyx_v_flags) {
  int __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("input_int2", 0);

  /* "imgui/core.pyx":3826
 *         )
 *     """
 *     cdef int[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputInt2(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "imgui/core.pyx":3828
 *     cdef int[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1]]
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3829
 * 
 *     return cimgui.InputInt2(
 *         _bytes(label), <int*>&inout_values, flags             # <<<<<<<<<<<<<<
 *     ), [inout_values[0], inout_values[1]]
 * 
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3829, __pyx_L1_error)

  /* "imgui/core.pyx":3828
 *     cdef int[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1]]
 */
  try {
    __pyx_t_4 = ImGui::InputInt2(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3828, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":3830
 *     return cimgui.InputInt2(
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1]]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyList_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;

  /* "imgui/core.pyx":3828
 *     cdef int[2] inout_values = [value0, value1]
 * 
 *     return cimgui.InputInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1]]
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3791
 * 
 * 
 * def input_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("imgui.core.input_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3833
 * 
 * 
 * def input_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_179input_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_178input_int3[] = "input_int3(str label, int value0, int value1, int value2, ImGuiInputTextFlags flags=0)\nDisplay three-integer input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        values = 4, 12, 28\n        imgui.begin(\"Example: three int inputs\")\n        changed, values = imgui.input_int3('Type here:', *values)\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2 (int): textbox values\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        textbox state change and the current textbox content.\n\n    .. wraps::\n        bool InputInt3(\n            const char* label,\n            int v[3],\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_179input_int3 = {"input_int3", (PyCFunction)__pyx_pw_5imgui_4core_179input_int3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_178input_int3};
static PyObject *__pyx_pw_5imgui_4core_179input_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  ImGuiInputTextFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_int3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_flags,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int3", 0, 4, 5, 1); __PYX_ERR(0, 3833, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int3", 0, 4, 5, 2); __PYX_ERR(0, 3833, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int3", 0, 4, 5, 3); __PYX_ERR(0, 3833, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_int3") < 0)) __PYX_ERR(0, 3833, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3835, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3835, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3835, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[4]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3836, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_int3", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3833, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3834, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_178input_int3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_178input_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, ImGuiInputTextFlags __pyx_v_flags) {
  int __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("input_int3", 0);

  /* "imgui/core.pyx":3868
 *         )
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputInt3(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "imgui/core.pyx":3870
 *     cdef int[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2]]
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3871
 * 
 *     return cimgui.InputInt3(
 *         _bytes(label), <int*>&inout_values, flags             # <<<<<<<<<<<<<<
 *     ), [inout_values[0], inout_values[1], inout_values[2]]
 * 
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3871, __pyx_L1_error)

  /* "imgui/core.pyx":3870
 *     cdef int[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2]]
 */
  try {
    __pyx_t_4 = ImGui::InputInt3(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3870, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":3872
 *     return cimgui.InputInt3(
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2]]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;

  /* "imgui/core.pyx":3870
 *     cdef int[3] inout_values = [value0, value1, value2]
 * 
 *     return cimgui.InputInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2]]
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3833
 * 
 * 
 * def input_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.input_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3875
 * 
 * 
 * def input_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_181input_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_180input_int4[] = "input_int4(str label, int value0, int value1, int value2, int value3, ImGuiInputTextFlags flags=0)\nDisplay four-integer input widget.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 100\n\n        values = 4, 12, 28, 73\n        imgui.begin(\"Example: four int inputs\")\n        changed, values = imgui.input_int4('Type here:', *values)\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2, value3 (int): textbox values\n        flags: InputText flags. See:\n            :ref:`list of available flags <inputtext-flag-options>`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        textbox state change and the current textbox content.\n\n    .. wraps::\n        bool InputInt4(\n            const char* label,\n            int v[4],\n            ImGuiInputTextFlags extra_flags = 0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_181input_int4 = {"input_int4", (PyCFunction)__pyx_pw_5imgui_4core_181input_int4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_180input_int4};
static PyObject *__pyx_pw_5imgui_4core_181input_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  int __pyx_v_value3;
  ImGuiInputTextFlags __pyx_v_flags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("input_int4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_flags,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int4", 0, 5, 6, 1); __PYX_ERR(0, 3875, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int4", 0, 5, 6, 2); __PYX_ERR(0, 3875, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int4", 0, 5, 6, 3); __PYX_ERR(0, 3875, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("input_int4", 0, 5, 6, 4); __PYX_ERR(0, 3875, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "input_int4") < 0)) __PYX_ERR(0, 3875, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3877, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3877, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3877, __pyx_L3_error)
    __pyx_v_value3 = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_value3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3877, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_flags = __Pyx_PyInt_As_ImGuiInputTextFlags(values[5]); if (unlikely((__pyx_v_flags == ((ImGuiInputTextFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 3878, __pyx_L3_error)
    } else {
      __pyx_v_flags = ((ImGuiInputTextFlags)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("input_int4", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3875, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.input_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3876, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_180input_int4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_180input_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, ImGuiInputTextFlags __pyx_v_flags) {
  int __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("input_int4", 0);

  /* "imgui/core.pyx":3910
 *         )
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 * 
 *     return cimgui.InputInt4(
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "imgui/core.pyx":3912
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2], inout_values[3]]
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3913
 * 
 *     return cimgui.InputInt4(
 *         _bytes(label), <int*>&inout_values, flags             # <<<<<<<<<<<<<<
 *     ), [inout_values[0], inout_values[1], inout_values[2], inout_values[3]]
 * 
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 3913, __pyx_L1_error)

  /* "imgui/core.pyx":3912
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2], inout_values[3]]
 */
  try {
    __pyx_t_4 = ImGui::InputInt4(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_flags);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3912, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imgui/core.pyx":3914
 *     return cimgui.InputInt4(
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2], inout_values[3]]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyList_New(4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 3914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_9, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_9, 3, __pyx_t_8);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":3912
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 * 
 *     return cimgui.InputInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values, flags
 *     ), [inout_values[0], inout_values[1], inout_values[2], inout_values[3]]
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3875
 * 
 * 
 * def input_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.input_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3917
 * 
 * 
 * def slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_183slider_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_182slider_float[] = "slider_float(str label, float value, float min_value, float max_value, str display_format='%.3f', float power=1.0)\nDisplay float slider widget.\n    Use power different from 1.0 for logarithmic sliders.\n\n    For a float slider example see :func:`slider_float4()`.\n\n    Args:\n        label (str): widget label.\n        value (float): slider values.\n        min_value (float): min value allowed by widget.\n        max_value (float): max value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_float()`.\n        power (float): how fast values changes on slide.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the current slider value.\n\n    .. wraps::\n        bool SliderFloat(\n            const char* label,\n            float v,\n            float v_min,\n            float v_max,\n            const char* display_format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_183slider_float = {"slider_float", (PyCFunction)__pyx_pw_5imgui_4core_183slider_float, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_182slider_float};
static PyObject *__pyx_pw_5imgui_4core_183slider_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_display_format = 0;
  float __pyx_v_power;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_float (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_display_format,&__pyx_n_s_power,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[4] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float", 0, 4, 6, 1); __PYX_ERR(0, 3917, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float", 0, 4, 6, 2); __PYX_ERR(0, 3917, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float", 0, 4, 6, 3); __PYX_ERR(0, 3917, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_float") < 0)) __PYX_ERR(0, 3917, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3919, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3920, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3921, __pyx_L3_error)
    __pyx_v_display_format = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3923, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_float", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3917, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3918, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 3922, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_182slider_float(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_display_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_182slider_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_display_format, float __pyx_v_power) {
  float __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("slider_float", 0);

  /* "imgui/core.pyx":3954
 *         )
 *     """
 *     cdef float inout_value = value             # <<<<<<<<<<<<<<
 *     return cimgui.SliderFloat(
 *         _bytes(label), <float*>&inout_value,
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":3955
 *     """
 *     cdef float inout_value = value
 *     return cimgui.SliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value, _bytes(display_format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":3956
 *     cdef float inout_value = value
 *     return cimgui.SliderFloat(
 *         _bytes(label), <float*>&inout_value,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(display_format), power
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 3956, __pyx_L1_error)

  /* "imgui/core.pyx":3957
 *     return cimgui.SliderFloat(
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value, _bytes(display_format), power             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 3957, __pyx_L1_error)

  /* "imgui/core.pyx":3955
 *     """
 *     cdef float inout_value = value
 *     return cimgui.SliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value, _bytes(display_format), power
 */
  try {
    __pyx_t_5 = ImGui::SliderFloat(__pyx_t_2, ((float *)(&__pyx_v_inout_value)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_4, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3955, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "imgui/core.pyx":3958
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value, _bytes(display_format), power
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":3955
 *     """
 *     cdef float inout_value = value
 *     return cimgui.SliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_value,
 *         min_value, max_value, _bytes(display_format), power
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3917
 * 
 * 
 * def slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core.slider_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":3961
 * 
 * 
 * def slider_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_185slider_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_184slider_float2[] = "slider_float2(str label, float value0, float value1, float min_value, float max_value, str display_format='%.3f', float power=1.0)\nDisplay float slider widget with 2 values.\n    Use power different from 1.0 for logarithmic sliders.\n\n    For a float slider example see :func:`slider_float4()`.\n\n    Args:\n        label (str): widget label.\n        value0, value1 (float): slider values.\n        min_value (float): min value allowed by widget.\n        max_value (float): max value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_float()`.\n        power (float): how fast values changes on slide.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current slider values.\n\n    .. wraps::\n        bool SliderFloat2(\n            const char* label,\n            float v[2],\n            float v_min,\n            float v_max,\n            const char* display_format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_185slider_float2 = {"slider_float2", (PyCFunction)__pyx_pw_5imgui_4core_185slider_float2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_184slider_float2};
static PyObject *__pyx_pw_5imgui_4core_185slider_float2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_display_format = 0;
  float __pyx_v_power;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_float2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_display_format,&__pyx_n_s_power,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[5] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float2", 0, 5, 7, 1); __PYX_ERR(0, 3961, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float2", 0, 5, 7, 2); __PYX_ERR(0, 3961, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float2", 0, 5, 7, 3); __PYX_ERR(0, 3961, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float2", 0, 5, 7, 4); __PYX_ERR(0, 3961, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_float2") < 0)) __PYX_ERR(0, 3961, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3963, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3963, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3964, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3965, __pyx_L3_error)
    __pyx_v_display_format = ((PyObject*)values[5]);
    if (values[6]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3967, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_float2", 0, 5, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3961, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 3962, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 3966, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_184slider_float2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_display_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_184slider_float2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_display_format, float __pyx_v_power) {
  float __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("slider_float2", 0);

  /* "imgui/core.pyx":3998
 *         )
 *     """
 *     cdef float[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderFloat2(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "imgui/core.pyx":3999
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.SliderFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(display_format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4000
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.SliderFloat2(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(display_format), power
 *     ), (inout_values[0], inout_values[1])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4000, __pyx_L1_error)

  /* "imgui/core.pyx":4001
 *     return cimgui.SliderFloat2(
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(display_format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4001, __pyx_L1_error)

  /* "imgui/core.pyx":3999
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.SliderFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(display_format), power
 */
  try {
    __pyx_t_6 = ImGui::SliderFloat2(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3999, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":4002
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(display_format), power
 *     ), (inout_values[0], inout_values[1])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;

  /* "imgui/core.pyx":3999
 *     """
 *     cdef float[2] inout_values = [value0, value1]
 *     return cimgui.SliderFloat2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(display_format), power
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 3999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":3961
 * 
 * 
 * def slider_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.slider_float2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4005
 * 
 * 
 * def slider_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_187slider_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_186slider_float3[] = "slider_float3(str label, float value0, float value1, float value2, float min_value, float max_value, str display_format='%.3f', float power=1.0)\nDisplay float slider widget with 3 values.\n    Use power different from 1.0 for logarithmic sliders.\n\n    For a float slider example see :func:`slider_float4()`.\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2 (float): slider values.\n        min_value (float): min value allowed by widget.\n        max_value (float): max value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_float()`.\n        power (float): how fast values changes on slide.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current slider values.\n\n    .. wraps::\n        bool SliderFloat3(\n            const char* label,\n            float v[3],\n            float v_min,\n            float v_max,\n            const char* display_format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_187slider_float3 = {"slider_float3", (PyCFunction)__pyx_pw_5imgui_4core_187slider_float3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_186slider_float3};
static PyObject *__pyx_pw_5imgui_4core_187slider_float3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_display_format = 0;
  float __pyx_v_power;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_float3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_display_format,&__pyx_n_s_power,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, 1); __PYX_ERR(0, 4005, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, 2); __PYX_ERR(0, 4005, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, 3); __PYX_ERR(0, 4005, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, 4); __PYX_ERR(0, 4005, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, 5); __PYX_ERR(0, 4005, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_float3") < 0)) __PYX_ERR(0, 4005, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4007, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4007, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4007, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4008, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4009, __pyx_L3_error)
    __pyx_v_display_format = ((PyObject*)values[6]);
    if (values[7]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4011, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_float3", 0, 6, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4005, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4006, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 4010, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_186slider_float3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_display_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_186slider_float3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_display_format, float __pyx_v_power) {
  float __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("slider_float3", 0);

  /* "imgui/core.pyx":4042
 *         )
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderFloat3(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "imgui/core.pyx":4043
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(display_format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4044
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderFloat3(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(display_format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4044, __pyx_L1_error)

  /* "imgui/core.pyx":4045
 *     return cimgui.SliderFloat3(
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(display_format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4045, __pyx_L1_error)

  /* "imgui/core.pyx":4043
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(display_format), power
 */
  try {
    __pyx_t_6 = ImGui::SliderFloat3(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4043, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":4046
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(display_format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":4043
 *     """
 *     cdef float[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderFloat3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(display_format), power
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4005
 * 
 * 
 * def slider_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.slider_float3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4049
 * 
 * 
 * def slider_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_189slider_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_188slider_float4[] = "slider_float4(str label, float value0, float value1, float value2, float value3, float min_value, float max_value, str display_format='%.3f', float power=1.0)\nDisplay float slider widget with 4 values.\n    Use power different from 1.0 for logarithmic sliders.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88.2, 42.6, 69.1, 0.3\n\n        imgui.begin(\"Example: slider float\")\n        changed, values = imgui.slider_float4(\n            \"slide floats\", *values,\n            min_value=0.0, max_value=100.0,\n            display_format=\"%.0f\",\n            power=1.0\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2, value3 (float): slider values.\n        min_value (float): min value allowed by widget.\n        max_value (float): max value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_float()`.\n        power (float): how fast values changes on slide.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current slider values.\n\n    .. wraps::\n        bool SliderFloat4(\n            const char* label,\n            float v[4],\n            float v_min,\n            float v_max,\n            const char* display_format = \"%.3f\",\n            float power = 1.0f\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_189slider_float4 = {"slider_float4", (PyCFunction)__pyx_pw_5imgui_4core_189slider_float4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_188slider_float4};
static PyObject *__pyx_pw_5imgui_4core_189slider_float4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_value0;
  float __pyx_v_value1;
  float __pyx_v_value2;
  float __pyx_v_value3;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_display_format = 0;
  float __pyx_v_power;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_float4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_display_format,&__pyx_n_s_power,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    values[7] = ((PyObject*)__pyx_kp_s_3f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 1); __PYX_ERR(0, 4049, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 2); __PYX_ERR(0, 4049, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 3); __PYX_ERR(0, 4049, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 4); __PYX_ERR(0, 4049, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 5); __PYX_ERR(0, 4049, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, 6); __PYX_ERR(0, 4049, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_float4") < 0)) __PYX_ERR(0, 4049, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4051, __pyx_L3_error)
    __pyx_v_value1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_value1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4051, __pyx_L3_error)
    __pyx_v_value2 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4051, __pyx_L3_error)
    __pyx_v_value3 = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_value3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4051, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4052, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4053, __pyx_L3_error)
    __pyx_v_display_format = ((PyObject*)values[7]);
    if (values[8]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4055, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_float4", 0, 7, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4049, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4050, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 4054, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_188slider_float4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_display_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_188slider_float4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_value0, float __pyx_v_value1, float __pyx_v_value2, float __pyx_v_value3, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_display_format, float __pyx_v_power) {
  float __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("slider_float4", 0);

  /* "imgui/core.pyx":4101
 *         )
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderFloat4(
 *         _bytes(label), <float*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "imgui/core.pyx":4102
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(display_format), power
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4103
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderFloat4(
 *         _bytes(label), <float*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(display_format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4103, __pyx_L1_error)

  /* "imgui/core.pyx":4104
 *     return cimgui.SliderFloat4(
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(display_format), power             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4104, __pyx_L1_error)

  /* "imgui/core.pyx":4102
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(display_format), power
 */
  try {
    __pyx_t_6 = ImGui::SliderFloat4(__pyx_t_3, ((float *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4102, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":4105
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(display_format), power
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "imgui/core.pyx":4102
 *     """
 *     cdef float[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderFloat4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <float*>&inout_values,
 *         min_value, max_value, _bytes(display_format), power
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_4 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4049
 * 
 * 
 * def slider_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("imgui.core.slider_float4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4108
 * 
 * 
 * def slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_191slider_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_190slider_int[] = "slider_int(str label, int value, int min_value, int max_value, str display_format='%.f')\nDisplay int slider widget\n\n    For a int slider example see :func:`slider_int4()`.\n\n    Args:\n        label (str): widget label.\n        value (int): slider value.\n        min_value (int): min value allowed by widget.\n        max_value (int): max value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_int()`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        widget state change and the slider value.\n\n    .. wraps::\n        bool SliderInt(\n            const char* label,\n            int v,\n            int v_min,\n            int v_max,\n            const char* display_format = \"%.3f\"\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_191slider_int = {"slider_int", (PyCFunction)__pyx_pw_5imgui_4core_191slider_int, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_190slider_int};
static PyObject *__pyx_pw_5imgui_4core_191slider_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_display_format = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_int (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_display_format,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int", 0, 4, 5, 1); __PYX_ERR(0, 4108, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int", 0, 4, 5, 2); __PYX_ERR(0, 4108, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int", 0, 4, 5, 3); __PYX_ERR(0, 4108, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_int") < 0)) __PYX_ERR(0, 4108, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4110, __pyx_L3_error)
    __pyx_v_min_value = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4111, __pyx_L3_error)
    __pyx_v_max_value = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4112, __pyx_L3_error)
    __pyx_v_display_format = ((PyObject*)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_int", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4108, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4109, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 4113, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_190slider_int(__pyx_self, __pyx_v_label, __pyx_v_value, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_display_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_190slider_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_display_format) {
  int __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("slider_int", 0);

  /* "imgui/core.pyx":4141
 *         )
 *     """
 *     cdef int inout_value = value             # <<<<<<<<<<<<<<
 *     return cimgui.SliderInt(
 *         _bytes(label), <int*>&inout_value,
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":4142
 *     """
 *     cdef int inout_value = value
 *     return cimgui.SliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_value,
 *         min_value, max_value, _bytes(display_format)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4143
 *     cdef int inout_value = value
 *     return cimgui.SliderInt(
 *         _bytes(label), <int*>&inout_value,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(display_format)
 *     ), inout_value
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4143, __pyx_L1_error)

  /* "imgui/core.pyx":4144
 *     return cimgui.SliderInt(
 *         _bytes(label), <int*>&inout_value,
 *         min_value, max_value, _bytes(display_format)             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 4144, __pyx_L1_error)

  /* "imgui/core.pyx":4142
 *     """
 *     cdef int inout_value = value
 *     return cimgui.SliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_value,
 *         min_value, max_value, _bytes(display_format)
 */
  try {
    __pyx_t_5 = ImGui::SliderInt(__pyx_t_2, ((int *)(&__pyx_v_inout_value)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4142, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "imgui/core.pyx":4145
 *         _bytes(label), <int*>&inout_value,
 *         min_value, max_value, _bytes(display_format)
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":4142
 *     """
 *     cdef int inout_value = value
 *     return cimgui.SliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_value,
 *         min_value, max_value, _bytes(display_format)
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4108
 * 
 * 
 * def slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("imgui.core.slider_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4148
 * 
 * 
 * def slider_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_193slider_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_192slider_int2[] = "slider_int2(str label, int value0, int value1, int min_value, int max_value, str display_format='%.f')\nDisplay int slider widget with 2 values.\n\n    For a int slider example see :func:`slider_int4()`.\n\n    Args:\n        label (str): widget label.\n        value0, value1 (int): slider values.\n        min_value (int): min value allowed by widget.\n        max_value (int): max value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_int()`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current slider values.\n\n    .. wraps::\n        bool SliderInt2(\n            const char* label,\n            int v[2],\n            int v_min,\n            int v_max,\n            const char* display_format = \"%.3f\"\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_193slider_int2 = {"slider_int2", (PyCFunction)__pyx_pw_5imgui_4core_193slider_int2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_192slider_int2};
static PyObject *__pyx_pw_5imgui_4core_193slider_int2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_display_format = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_int2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_display_format,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int2", 0, 5, 6, 1); __PYX_ERR(0, 4148, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int2", 0, 5, 6, 2); __PYX_ERR(0, 4148, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int2", 0, 5, 6, 3); __PYX_ERR(0, 4148, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int2", 0, 5, 6, 4); __PYX_ERR(0, 4148, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_int2") < 0)) __PYX_ERR(0, 4148, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4150, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4150, __pyx_L3_error)
    __pyx_v_min_value = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4151, __pyx_L3_error)
    __pyx_v_max_value = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4152, __pyx_L3_error)
    __pyx_v_display_format = ((PyObject*)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_int2", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4148, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4149, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 4153, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_192slider_int2(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_display_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_192slider_int2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_display_format) {
  int __pyx_v_inout_values[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[2];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("slider_int2", 0);

  /* "imgui/core.pyx":4181
 *         )
 *     """
 *     cdef int[2] inout_values = [value0, value1]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderInt2(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (2));

  /* "imgui/core.pyx":4182
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.SliderInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(display_format)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4183
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.SliderInt2(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(display_format)
 *     ), (inout_values[0], inout_values[1])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4183, __pyx_L1_error)

  /* "imgui/core.pyx":4184
 *     return cimgui.SliderInt2(
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(display_format)             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4184, __pyx_L1_error)

  /* "imgui/core.pyx":4182
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.SliderInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(display_format)
 */
  try {
    __pyx_t_6 = ImGui::SliderInt2(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4182, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":4185
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(display_format)
 *     ), (inout_values[0], inout_values[1])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;

  /* "imgui/core.pyx":4182
 *     """
 *     cdef int[2] inout_values = [value0, value1]
 *     return cimgui.SliderInt2(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(display_format)
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4148
 * 
 * 
 * def slider_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("imgui.core.slider_int2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4188
 * 
 * 
 * def slider_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_195slider_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_194slider_int3[] = "slider_int3(str label, int value0, int value1, int value2, int min_value, int max_value, str display_format='%.f')\nDisplay int slider widget with 3 values.\n\n    For a int slider example see :func:`slider_int4()`.\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2 (int): slider values.\n        min_value (int): min value allowed by widget.\n        max_value (int): max value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_int()`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current slider values.\n\n    .. wraps::\n        bool SliderInt3(\n            const char* label,\n            int v[3],\n            int v_min,\n            int v_max,\n            const char* display_format = \"%.3f\"\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_195slider_int3 = {"slider_int3", (PyCFunction)__pyx_pw_5imgui_4core_195slider_int3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_194slider_int3};
static PyObject *__pyx_pw_5imgui_4core_195slider_int3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_display_format = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_int3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_display_format,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, 1); __PYX_ERR(0, 4188, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, 2); __PYX_ERR(0, 4188, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, 3); __PYX_ERR(0, 4188, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, 4); __PYX_ERR(0, 4188, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, 5); __PYX_ERR(0, 4188, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_int3") < 0)) __PYX_ERR(0, 4188, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4190, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4190, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4190, __pyx_L3_error)
    __pyx_v_min_value = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4191, __pyx_L3_error)
    __pyx_v_max_value = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4192, __pyx_L3_error)
    __pyx_v_display_format = ((PyObject*)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_int3", 0, 6, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4188, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4189, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 4193, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_194slider_int3(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_display_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_194slider_int3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_display_format) {
  int __pyx_v_inout_values[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[3];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("slider_int3", 0);

  /* "imgui/core.pyx":4221
 *         )
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderInt3(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (3));

  /* "imgui/core.pyx":4222
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(display_format)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4223
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderInt3(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(display_format)
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4223, __pyx_L1_error)

  /* "imgui/core.pyx":4224
 *     return cimgui.SliderInt3(
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(display_format)             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4224, __pyx_L1_error)

  /* "imgui/core.pyx":4222
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(display_format)
 */
  try {
    __pyx_t_6 = ImGui::SliderInt3(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4222, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":4225
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(display_format)
 *     ), (inout_values[0], inout_values[1], inout_values[2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":4222
 *     """
 *     cdef int[3] inout_values = [value0, value1, value2]
 *     return cimgui.SliderInt3(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(display_format)
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4188
 * 
 * 
 * def slider_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("imgui.core.slider_int3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4228
 * 
 * 
 * def slider_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_197slider_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_196slider_int4[] = "slider_int4(str label, int value0, int value1, int value2, int value3, int min_value, int max_value, str display_format='%.f')\nDisplay float slider widget with 4 values.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 400\n        :height: 130\n\n        values = 88, 42, 69, 0\n\n        imgui.begin(\"Example: slider int\")\n        changed, values = imgui.slider_int4(\n            \"slide ints\", *values,\n            min_value=0, max_value=100, display_format=\"%.3f\"\n        )\n        imgui.text(\"Changed: %s, Values: %s\" % (changed, values))\n        imgui.end()\n\n    Args:\n        label (str): widget label.\n        value0, value1, value2, value3 (int): slider values.\n        min_value (int): min value allowed by widget.\n        max_value (int): max value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_int()`.\n\n    Returns:\n        tuple: a ``(changed, values)`` tuple that contains indicator of\n        widget state change and the tuple of current slider values.\n\n    .. wraps::\n        bool SliderInt4(\n            const char* label,\n            int v[4],\n            int v_min,\n            int v_max,\n            const char* display_format = \"%.3f\"\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_197slider_int4 = {"slider_int4", (PyCFunction)__pyx_pw_5imgui_4core_197slider_int4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_196slider_int4};
static PyObject *__pyx_pw_5imgui_4core_197slider_int4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_v_value0;
  int __pyx_v_value1;
  int __pyx_v_value2;
  int __pyx_v_value3;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_display_format = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slider_int4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_value0,&__pyx_n_s_value1,&__pyx_n_s_value2,&__pyx_n_s_value3,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_display_format,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[7] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 1); __PYX_ERR(0, 4228, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 2); __PYX_ERR(0, 4228, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 3); __PYX_ERR(0, 4228, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 4); __PYX_ERR(0, 4228, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 5); __PYX_ERR(0, 4228, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, 6); __PYX_ERR(0, 4228, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slider_int4") < 0)) __PYX_ERR(0, 4228, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_value0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_value0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4230, __pyx_L3_error)
    __pyx_v_value1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_value1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4230, __pyx_L3_error)
    __pyx_v_value2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4230, __pyx_L3_error)
    __pyx_v_value3 = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_value3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4230, __pyx_L3_error)
    __pyx_v_min_value = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4231, __pyx_L3_error)
    __pyx_v_max_value = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4232, __pyx_L3_error)
    __pyx_v_display_format = ((PyObject*)values[7]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slider_int4", 0, 7, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4228, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.slider_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4229, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 4233, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_196slider_int4(__pyx_self, __pyx_v_label, __pyx_v_value0, __pyx_v_value1, __pyx_v_value2, __pyx_v_value3, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_display_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_196slider_int4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, int __pyx_v_value0, int __pyx_v_value1, int __pyx_v_value2, int __pyx_v_value3, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_display_format) {
  int __pyx_v_inout_values[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[4];
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("slider_int4", 0);

  /* "imgui/core.pyx":4274
 *         )
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]             # <<<<<<<<<<<<<<
 *     return cimgui.SliderInt4(
 *         _bytes(label), <int*>&inout_values,
 */
  __pyx_t_1[0] = __pyx_v_value0;
  __pyx_t_1[1] = __pyx_v_value1;
  __pyx_t_1[2] = __pyx_v_value2;
  __pyx_t_1[3] = __pyx_v_value3;
  memcpy(&(__pyx_v_inout_values[0]), __pyx_t_1, sizeof(__pyx_v_inout_values[0]) * (4));

  /* "imgui/core.pyx":4275
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(display_format)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4276
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderInt4(
 *         _bytes(label), <int*>&inout_values,             # <<<<<<<<<<<<<<
 *         min_value, max_value, _bytes(display_format)
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 4276, __pyx_L1_error)

  /* "imgui/core.pyx":4277
 *     return cimgui.SliderInt4(
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(display_format)             # <<<<<<<<<<<<<<
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4277, __pyx_L1_error)

  /* "imgui/core.pyx":4275
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(display_format)
 */
  try {
    __pyx_t_6 = ImGui::SliderInt4(__pyx_t_3, ((int *)(&__pyx_v_inout_values)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4275, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":4278
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(display_format)
 *     ), (inout_values[0], inout_values[1], inout_values[2], inout_values[3])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_inout_values[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_v_inout_values[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_v_inout_values[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyInt_From_int((__pyx_v_inout_values[3])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "imgui/core.pyx":4275
 *     """
 *     cdef int[4] inout_values = [value0, value1, value2, value3]
 *     return cimgui.SliderInt4(             # <<<<<<<<<<<<<<
 *         _bytes(label), <int*>&inout_values,
 *         min_value, max_value, _bytes(display_format)
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_4 = 0;
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4228
 * 
 * 
 * def slider_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("imgui.core.slider_int4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4281
 * 
 * 
 * def v_slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_199v_slider_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_198v_slider_float[] = "v_slider_float(str label, float width, float height, float value, float min_value, float max_value, str display_format='%.f', float power=0.0)\nDisplay vertical float slider widget with the specified width and\n    height.\n\n    For a float slider example see :func:`slider_float4()`.\n\n    Args:\n        label (str): widget label.\n        value (float): slider value.\n        min_value (float): min value allowed by widget.\n        max_value (float): max value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_float()`.\n        power (float): how fast values changes on slide.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        widget state change and the slider value.\n\n    .. wraps::\n        bool VSliderFloat(\n            const char* label,\n            const ImVec2& size,\n            float v,\n            float v_min,\n            floatint v_max,\n            const char* display_format = \"%.3f\",\n            float power=1.0\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_199v_slider_float = {"v_slider_float", (PyCFunction)__pyx_pw_5imgui_4core_199v_slider_float, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_198v_slider_float};
static PyObject *__pyx_pw_5imgui_4core_199v_slider_float(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  float __pyx_v_value;
  float __pyx_v_min_value;
  float __pyx_v_max_value;
  PyObject *__pyx_v_display_format = 0;
  float __pyx_v_power;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("v_slider_float (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_value,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_display_format,&__pyx_n_s_power,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, 1); __PYX_ERR(0, 4281, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, 2); __PYX_ERR(0, 4281, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, 3); __PYX_ERR(0, 4281, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, 4); __PYX_ERR(0, 4281, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, 5); __PYX_ERR(0, 4281, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_power);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "v_slider_float") < 0)) __PYX_ERR(0, 4281, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4283, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4284, __pyx_L3_error)
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4285, __pyx_L3_error)
    __pyx_v_min_value = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_min_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4286, __pyx_L3_error)
    __pyx_v_max_value = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_max_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4287, __pyx_L3_error)
    __pyx_v_display_format = ((PyObject*)values[6]);
    if (values[7]) {
      __pyx_v_power = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_power == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4289, __pyx_L3_error)
    } else {
      __pyx_v_power = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("v_slider_float", 0, 6, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4281, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.v_slider_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4282, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 4288, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_198v_slider_float(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height, __pyx_v_value, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_display_format, __pyx_v_power);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_198v_slider_float(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, float __pyx_v_value, float __pyx_v_min_value, float __pyx_v_max_value, PyObject *__pyx_v_display_format, float __pyx_v_power) {
  float __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImVec2 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("v_slider_float", 0);

  /* "imgui/core.pyx":4321
 *         )
 *     """
 *     cdef float inout_value = value             # <<<<<<<<<<<<<<
 *     return cimgui.VSliderFloat(
 *         _bytes(label), _cast_args_ImVec2(width, height),
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":4322
 *     """
 *     cdef float inout_value = value
 *     return cimgui.VSliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <float*>&inout_value,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4323
 *     cdef float inout_value = value
 *     return cimgui.VSliderFloat(
 *         _bytes(label), _cast_args_ImVec2(width, height),             # <<<<<<<<<<<<<<
 *         <float*>&inout_value,
 *         min_value, max_value, _bytes(display_format), power
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4323, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4323, __pyx_L1_error)

  /* "imgui/core.pyx":4325
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <float*>&inout_value,
 *         min_value, max_value, _bytes(display_format), power             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4325, __pyx_L1_error)

  /* "imgui/core.pyx":4322
 *     """
 *     cdef float inout_value = value
 *     return cimgui.VSliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <float*>&inout_value,
 */
  try {
    __pyx_t_6 = ImGui::VSliderFloat(__pyx_t_2, __pyx_t_3, ((float *)(&__pyx_v_inout_value)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5, __pyx_v_power);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4322, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":4326
 *         <float*>&inout_value,
 *         min_value, max_value, _bytes(display_format), power
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":4322
 *     """
 *     cdef float inout_value = value
 *     return cimgui.VSliderFloat(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <float*>&inout_value,
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4281
 * 
 * 
 * def v_slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("imgui.core.v_slider_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4329
 * 
 * 
 * def v_slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_201v_slider_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_200v_slider_int[] = "v_slider_int(str label, float width, float height, int value, int min_value, int max_value, str display_format='%.f')\nDisplay vertical int slider widget with the specified width and height.\n\n    For a int slider example see :func:`slider_int4()`.\n\n    Args:\n        label (str): widget label.\n        value (int): slider value.\n        min_value (int): min value allowed by widget.\n        max_value (int): max value allowed by widget.\n        display_format (str): display format string as C-style ``printf``\n            format string. **Warning:** highly unsafe.\n            See :any:`slider_int()`.\n\n    Returns:\n        tuple: a ``(changed, value)`` tuple that contains indicator of\n        widget state change and the slider value.\n\n    .. wraps::\n        bool VSliderInt(\n            const char* label,\n            const ImVec2& size,\n            int v,\n            int v_min,\n            int v_max,\n            const char* display_format = \"%.3f\"\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_201v_slider_int = {"v_slider_int", (PyCFunction)__pyx_pw_5imgui_4core_201v_slider_int, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_200v_slider_int};
static PyObject *__pyx_pw_5imgui_4core_201v_slider_int(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  float __pyx_v_width;
  float __pyx_v_height;
  int __pyx_v_value;
  int __pyx_v_min_value;
  int __pyx_v_max_value;
  PyObject *__pyx_v_display_format = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("v_slider_int (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_value,&__pyx_n_s_min_value,&__pyx_n_s_max_value,&__pyx_n_s_display_format,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[6] = ((PyObject*)__pyx_kp_s_f);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, 1); __PYX_ERR(0, 4329, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, 2); __PYX_ERR(0, 4329, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, 3); __PYX_ERR(0, 4329, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, 4); __PYX_ERR(0, 4329, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, 5); __PYX_ERR(0, 4329, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_display_format);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "v_slider_int") < 0)) __PYX_ERR(0, 4329, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = ((PyObject*)values[0]);
    __pyx_v_width = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4331, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4332, __pyx_L3_error)
    __pyx_v_value = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4333, __pyx_L3_error)
    __pyx_v_min_value = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_min_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4334, __pyx_L3_error)
    __pyx_v_max_value = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_max_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4335, __pyx_L3_error)
    __pyx_v_display_format = ((PyObject*)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("v_slider_int", 0, 6, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4329, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.v_slider_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_label), (&PyString_Type), 1, "label", 1))) __PYX_ERR(0, 4330, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_display_format), (&PyString_Type), 1, "display_format", 1))) __PYX_ERR(0, 4336, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_200v_slider_int(__pyx_self, __pyx_v_label, __pyx_v_width, __pyx_v_height, __pyx_v_value, __pyx_v_min_value, __pyx_v_max_value, __pyx_v_display_format);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_200v_slider_int(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_label, float __pyx_v_width, float __pyx_v_height, int __pyx_v_value, int __pyx_v_min_value, int __pyx_v_max_value, PyObject *__pyx_v_display_format) {
  int __pyx_v_inout_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImVec2 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("v_slider_int", 0);

  /* "imgui/core.pyx":4365
 *         )
 *     """
 *     cdef int inout_value = value             # <<<<<<<<<<<<<<
 *     return cimgui.VSliderInt(
 *         _bytes(label), _cast_args_ImVec2(width, height),
 */
  __pyx_v_inout_value = __pyx_v_value;

  /* "imgui/core.pyx":4366
 *     """
 *     cdef int inout_value = value
 *     return cimgui.VSliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <int*>&inout_value,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4367
 *     cdef int inout_value = value
 *     return cimgui.VSliderInt(
 *         _bytes(label), _cast_args_ImVec2(width, height),             # <<<<<<<<<<<<<<
 *         <int*>&inout_value,
 *         min_value, max_value, _bytes(display_format)
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__bytes(__pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 4367, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_width, __pyx_v_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4367, __pyx_L1_error)

  /* "imgui/core.pyx":4369
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <int*>&inout_value,
 *         min_value, max_value, _bytes(display_format)             # <<<<<<<<<<<<<<
 *     ), inout_value
 * 
 */
  __pyx_t_4 = __pyx_f_5imgui_4core__bytes(__pyx_v_display_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_t_4); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 4369, __pyx_L1_error)

  /* "imgui/core.pyx":4366
 *     """
 *     cdef int inout_value = value
 *     return cimgui.VSliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <int*>&inout_value,
 */
  try {
    __pyx_t_6 = ImGui::VSliderInt(__pyx_t_2, __pyx_t_3, ((int *)(&__pyx_v_inout_value)), __pyx_v_min_value, __pyx_v_max_value, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4366, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "imgui/core.pyx":4370
 *         <int*>&inout_value,
 *         min_value, max_value, _bytes(display_format)
 *     ), inout_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_inout_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":4366
 *     """
 *     cdef int inout_value = value
 *     return cimgui.VSliderInt(             # <<<<<<<<<<<<<<
 *         _bytes(label), _cast_args_ImVec2(width, height),
 *         <int*>&inout_value,
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4329
 * 
 * 
 * def v_slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("imgui.core.v_slider_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4373
 * 
 * 
 * def is_item_hovered():             # <<<<<<<<<<<<<<
 *     """Check if the last item is hovered by mouse.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_203is_item_hovered(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_202is_item_hovered[] = "is_item_hovered()\nCheck if the last item is hovered by mouse.\n\n    Returns:\n        bool: True if item is hovered by mouse, otherwise False.\n\n    .. wraps::\n        bool IsItemHovered()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_203is_item_hovered = {"is_item_hovered", (PyCFunction)__pyx_pw_5imgui_4core_203is_item_hovered, METH_NOARGS, __pyx_doc_5imgui_4core_202is_item_hovered};
static PyObject *__pyx_pw_5imgui_4core_203is_item_hovered(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_item_hovered (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_202is_item_hovered(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_202is_item_hovered(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_item_hovered", 0);

  /* "imgui/core.pyx":4382
 *         bool IsItemHovered()
 *     """
 *     return cimgui.IsItemHovered()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsItemHovered();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4382, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4373
 * 
 * 
 * def is_item_hovered():             # <<<<<<<<<<<<<<
 *     """Check if the last item is hovered by mouse.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_item_hovered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4385
 * 
 * 
 * def is_item_hovered_rect():             # <<<<<<<<<<<<<<
 *     """Was the last item hovered by mouse? Even if
 *     another item is active or window is blocked by popup
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_205is_item_hovered_rect(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_204is_item_hovered_rect[] = "is_item_hovered_rect()\nWas the last item hovered by mouse? Even if\n    another item is active or window is blocked by popup\n    while we are hovering this.\n\n    Returns:\n        bool: True if item is hovered by mouse, otherwise False.\n\n    .. wraps::\n        bool IsItemHoveredRect()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_205is_item_hovered_rect = {"is_item_hovered_rect", (PyCFunction)__pyx_pw_5imgui_4core_205is_item_hovered_rect, METH_NOARGS, __pyx_doc_5imgui_4core_204is_item_hovered_rect};
static PyObject *__pyx_pw_5imgui_4core_205is_item_hovered_rect(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_item_hovered_rect (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_204is_item_hovered_rect(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_204is_item_hovered_rect(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_item_hovered_rect", 0);

  /* "imgui/core.pyx":4396
 *         bool IsItemHoveredRect()
 *     """
 *     return cimgui.IsItemHoveredRect()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsItemHoveredRect();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4396, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4385
 * 
 * 
 * def is_item_hovered_rect():             # <<<<<<<<<<<<<<
 *     """Was the last item hovered by mouse? Even if
 *     another item is active or window is blocked by popup
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_item_hovered_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4399
 * 
 * 
 * def is_item_active():             # <<<<<<<<<<<<<<
 *     """Was the last item active? For ex. button being held or text field
 *     being edited. Items that don't interact will always return false.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_207is_item_active(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_206is_item_active[] = "is_item_active()\nWas the last item active? For ex. button being held or text field\n    being edited. Items that don't interact will always return false.\n\n    Returns:\n        bool: True if item is active, otherwise False.\n\n    .. wraps::\n        bool IsItemActive()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_207is_item_active = {"is_item_active", (PyCFunction)__pyx_pw_5imgui_4core_207is_item_active, METH_NOARGS, __pyx_doc_5imgui_4core_206is_item_active};
static PyObject *__pyx_pw_5imgui_4core_207is_item_active(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_item_active (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_206is_item_active(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_206is_item_active(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_item_active", 0);

  /* "imgui/core.pyx":4409
 *         bool IsItemActive()
 *     """
 *     return cimgui.IsItemActive()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsItemActive();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4409, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4399
 * 
 * 
 * def is_item_active():             # <<<<<<<<<<<<<<
 *     """Was the last item active? For ex. button being held or text field
 *     being edited. Items that don't interact will always return false.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_item_active", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4412
 * 
 * 
 * def is_item_clicked(int mouse_button = 0):             # <<<<<<<<<<<<<<
 *     """Was the last item clicked? For ex. button or node that was
 *     just being clicked on.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_209is_item_clicked(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_208is_item_clicked[] = "is_item_clicked(int mouse_button=0)\nWas the last item clicked? For ex. button or node that was\n    just being clicked on.\n\n    Returns:\n        bool: True if item is clicked, otherwise False.\n\n    .. wraps::\n        bool IsItemClicked(int mouse_button = 0)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_209is_item_clicked = {"is_item_clicked", (PyCFunction)__pyx_pw_5imgui_4core_209is_item_clicked, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_208is_item_clicked};
static PyObject *__pyx_pw_5imgui_4core_209is_item_clicked(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_mouse_button;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_item_clicked (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mouse_button,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mouse_button);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_item_clicked") < 0)) __PYX_ERR(0, 4412, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_mouse_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_mouse_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4412, __pyx_L3_error)
    } else {
      __pyx_v_mouse_button = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_item_clicked", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4412, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_item_clicked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_208is_item_clicked(__pyx_self, __pyx_v_mouse_button);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_208is_item_clicked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_mouse_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_item_clicked", 0);

  /* "imgui/core.pyx":4422
 *         bool IsItemClicked(int mouse_button = 0)
 *     """
 *     return cimgui.IsItemClicked(mouse_button)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsItemClicked(__pyx_v_mouse_button);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4422, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4412
 * 
 * 
 * def is_item_clicked(int mouse_button = 0):             # <<<<<<<<<<<<<<
 *     """Was the last item clicked? For ex. button or node that was
 *     just being clicked on.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_item_clicked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4425
 * 
 * 
 * def is_item_visible():             # <<<<<<<<<<<<<<
 *     """Was the last item visible? Aka not out of sight due to
 *     clipping/scrolling.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_211is_item_visible(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_210is_item_visible[] = "is_item_visible()\nWas the last item visible? Aka not out of sight due to\n    clipping/scrolling.\n\n    Returns:\n        bool: True if item is visible, otherwise False.\n\n    .. wraps::\n        bool IsItemVisible()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_211is_item_visible = {"is_item_visible", (PyCFunction)__pyx_pw_5imgui_4core_211is_item_visible, METH_NOARGS, __pyx_doc_5imgui_4core_210is_item_visible};
static PyObject *__pyx_pw_5imgui_4core_211is_item_visible(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_item_visible (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_210is_item_visible(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_210is_item_visible(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_item_visible", 0);

  /* "imgui/core.pyx":4435
 *         bool IsItemVisible()
 *     """
 *     return cimgui.IsItemVisible()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsItemVisible();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4435, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4425
 * 
 * 
 * def is_item_visible():             # <<<<<<<<<<<<<<
 *     """Was the last item visible? Aka not out of sight due to
 *     clipping/scrolling.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_item_visible", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4438
 * 
 * 
 * def is_any_item_hovered():             # <<<<<<<<<<<<<<
 *     """Was any of the items hovered.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_213is_any_item_hovered(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_212is_any_item_hovered[] = "is_any_item_hovered()\nWas any of the items hovered.\n\n    Returns:\n        bool: True if any item is hovered, otherwise False.\n\n    .. wraps::\n        bool IsAnyItemHovered()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_213is_any_item_hovered = {"is_any_item_hovered", (PyCFunction)__pyx_pw_5imgui_4core_213is_any_item_hovered, METH_NOARGS, __pyx_doc_5imgui_4core_212is_any_item_hovered};
static PyObject *__pyx_pw_5imgui_4core_213is_any_item_hovered(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_any_item_hovered (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_212is_any_item_hovered(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_212is_any_item_hovered(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_any_item_hovered", 0);

  /* "imgui/core.pyx":4447
 *         bool IsAnyItemHovered()
 *     """
 *     return cimgui.IsAnyItemHovered()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsAnyItemHovered();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4447, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4438
 * 
 * 
 * def is_any_item_hovered():             # <<<<<<<<<<<<<<
 *     """Was any of the items hovered.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_any_item_hovered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4450
 * 
 * 
 * def is_any_item_active():             # <<<<<<<<<<<<<<
 *     """Was any of the items active.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_215is_any_item_active(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_214is_any_item_active[] = "is_any_item_active()\nWas any of the items active.\n\n    Returns:\n        bool: True if any item is active, otherwise False.\n\n    .. wraps::\n        bool IsAnyItemActive()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_215is_any_item_active = {"is_any_item_active", (PyCFunction)__pyx_pw_5imgui_4core_215is_any_item_active, METH_NOARGS, __pyx_doc_5imgui_4core_214is_any_item_active};
static PyObject *__pyx_pw_5imgui_4core_215is_any_item_active(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_any_item_active (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_214is_any_item_active(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_214is_any_item_active(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_any_item_active", 0);

  /* "imgui/core.pyx":4459
 *         bool IsAnyItemActive()
 *     """
 *     return cimgui.IsAnyItemActive()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsAnyItemActive();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4459, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4450
 * 
 * 
 * def is_any_item_active():             # <<<<<<<<<<<<<<
 *     """Was any of the items active.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_any_item_active", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4462
 * 
 * 
 * def get_item_rect_min():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_217get_item_rect_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_216get_item_rect_min[] = "get_item_rect_min()\nGet bounding rect of the last item in screen space.\n\n    Returns:\n        Vec2: item minimum boundaries two-tuple ``(width, height)``\n\n    .. wraps::\n        ImVec2 GetItemRectMin()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_217get_item_rect_min = {"get_item_rect_min", (PyCFunction)__pyx_pw_5imgui_4core_217get_item_rect_min, METH_NOARGS, __pyx_doc_5imgui_4core_216get_item_rect_min};
static PyObject *__pyx_pw_5imgui_4core_217get_item_rect_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_item_rect_min (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_216get_item_rect_min(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_216get_item_rect_min(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_item_rect_min", 0);

  /* "imgui/core.pyx":4471
 *         ImVec2 GetItemRectMin()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetItemRectMin())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetItemRectMin();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4471, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4462
 * 
 * 
 * def get_item_rect_min():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_item_rect_min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4474
 * 
 * 
 * def get_item_rect_max():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_219get_item_rect_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_218get_item_rect_max[] = "get_item_rect_max()\nGet bounding rect of the last item in screen space.\n\n    Returns:\n        Vec2: item maximum boundaries two-tuple ``(width, height)``\n\n    .. wraps::\n        ImVec2 GetItemRectMax()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_219get_item_rect_max = {"get_item_rect_max", (PyCFunction)__pyx_pw_5imgui_4core_219get_item_rect_max, METH_NOARGS, __pyx_doc_5imgui_4core_218get_item_rect_max};
static PyObject *__pyx_pw_5imgui_4core_219get_item_rect_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_item_rect_max (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_218get_item_rect_max(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_218get_item_rect_max(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_item_rect_max", 0);

  /* "imgui/core.pyx":4483
 *         ImVec2 GetItemRectMax()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetItemRectMax())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetItemRectMax();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4483, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4474
 * 
 * 
 * def get_item_rect_max():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_item_rect_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4486
 * 
 * 
 * def get_item_rect_size():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_221get_item_rect_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_220get_item_rect_size[] = "get_item_rect_size()\nGet bounding rect of the last item in screen space.\n\n    Returns:\n        Vec2: item boundaries two-tuple ``(width, height)``\n\n    .. wraps::\n        ImVec2 GetItemRectSize()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_221get_item_rect_size = {"get_item_rect_size", (PyCFunction)__pyx_pw_5imgui_4core_221get_item_rect_size, METH_NOARGS, __pyx_doc_5imgui_4core_220get_item_rect_size};
static PyObject *__pyx_pw_5imgui_4core_221get_item_rect_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_item_rect_size (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_220get_item_rect_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_220get_item_rect_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_item_rect_size", 0);

  /* "imgui/core.pyx":4495
 *         ImVec2 GetItemRectSize()
 *     """
 *     return _cast_ImVec2_tuple(cimgui.GetItemRectSize())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetItemRectSize();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4495, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4486
 * 
 * 
 * def get_item_rect_size():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_item_rect_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4498
 * 
 * 
 * def set_item_allow_overlap():             # <<<<<<<<<<<<<<
 *     """Allow last item to be overlapped by a subsequent item.
 *     Sometimes useful with invisible buttons, selectables, etc.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_223set_item_allow_overlap(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_222set_item_allow_overlap[] = "set_item_allow_overlap()\nAllow last item to be overlapped by a subsequent item.\n    Sometimes useful with invisible buttons, selectables, etc.\n    to catch unused area.\n\n    .. wraps::\n        void SetItemAllowOverlap()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_223set_item_allow_overlap = {"set_item_allow_overlap", (PyCFunction)__pyx_pw_5imgui_4core_223set_item_allow_overlap, METH_NOARGS, __pyx_doc_5imgui_4core_222set_item_allow_overlap};
static PyObject *__pyx_pw_5imgui_4core_223set_item_allow_overlap(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_item_allow_overlap (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_222set_item_allow_overlap(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_222set_item_allow_overlap(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_item_allow_overlap", 0);

  /* "imgui/core.pyx":4506
 *         void SetItemAllowOverlap()
 *     """
 *     cimgui.SetItemAllowOverlap()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetItemAllowOverlap();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4506, __pyx_L1_error)
  }

  /* "imgui/core.pyx":4498
 * 
 * 
 * def set_item_allow_overlap():             # <<<<<<<<<<<<<<
 *     """Allow last item to be overlapped by a subsequent item.
 *     Sometimes useful with invisible buttons, selectables, etc.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_item_allow_overlap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4509
 * 
 * 
 * def is_window_hovered():             # <<<<<<<<<<<<<<
 *     """Is current window hovered and hoverable (not blocked by a popup).
 *     Differentiate child windows from each others.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_225is_window_hovered(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_224is_window_hovered[] = "is_window_hovered()\nIs current window hovered and hoverable (not blocked by a popup).\n    Differentiate child windows from each others.\n\n    Returns:\n        bool: True if current window is hovered, otherwise False.\n\n    .. wraps::\n        bool IsWindowHovered()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_225is_window_hovered = {"is_window_hovered", (PyCFunction)__pyx_pw_5imgui_4core_225is_window_hovered, METH_NOARGS, __pyx_doc_5imgui_4core_224is_window_hovered};
static PyObject *__pyx_pw_5imgui_4core_225is_window_hovered(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_window_hovered (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_224is_window_hovered(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_224is_window_hovered(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_window_hovered", 0);

  /* "imgui/core.pyx":4519
 *         bool IsWindowHovered()
 *     """
 *     return cimgui.IsWindowHovered()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsWindowHovered();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4519, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4509
 * 
 * 
 * def is_window_hovered():             # <<<<<<<<<<<<<<
 *     """Is current window hovered and hoverable (not blocked by a popup).
 *     Differentiate child windows from each others.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_window_hovered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4522
 * 
 * 
 * def is_window_focused():             # <<<<<<<<<<<<<<
 *     """Is current window focused.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_227is_window_focused(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_226is_window_focused[] = "is_window_focused()\nIs current window focused.\n\n    Returns:\n        bool: True if current window is on focus, otherwise False.\n\n    .. wraps::\n        bool IsWindowFocused()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_227is_window_focused = {"is_window_focused", (PyCFunction)__pyx_pw_5imgui_4core_227is_window_focused, METH_NOARGS, __pyx_doc_5imgui_4core_226is_window_focused};
static PyObject *__pyx_pw_5imgui_4core_227is_window_focused(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_window_focused (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_226is_window_focused(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_226is_window_focused(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_window_focused", 0);

  /* "imgui/core.pyx":4531
 *         bool IsWindowFocused()
 *     """
 *     return cimgui.IsWindowFocused()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsWindowFocused();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4531, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4522
 * 
 * 
 * def is_window_focused():             # <<<<<<<<<<<<<<
 *     """Is current window focused.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_window_focused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4534
 * 
 * 
 * def is_root_window_focused():             # <<<<<<<<<<<<<<
 *     """Is root window focused.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_229is_root_window_focused(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_228is_root_window_focused[] = "is_root_window_focused()\nIs root window focused.\n\n    Returns:\n        bool: True if root window is on focus, otherwise False.\n\n    .. wraps::\n        bool IsRootWindowFocused()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_229is_root_window_focused = {"is_root_window_focused", (PyCFunction)__pyx_pw_5imgui_4core_229is_root_window_focused, METH_NOARGS, __pyx_doc_5imgui_4core_228is_root_window_focused};
static PyObject *__pyx_pw_5imgui_4core_229is_root_window_focused(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_root_window_focused (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_228is_root_window_focused(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_228is_root_window_focused(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_root_window_focused", 0);

  /* "imgui/core.pyx":4543
 *         bool IsRootWindowFocused()
 *     """
 *     return cimgui.IsRootWindowFocused()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsRootWindowFocused();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4543, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4534
 * 
 * 
 * def is_root_window_focused():             # <<<<<<<<<<<<<<
 *     """Is root window focused.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_root_window_focused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4546
 * 
 * 
 * def is_root_window_or_any_child_focused():             # <<<<<<<<<<<<<<
 *     """Is the current root window or any of its children on focus.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_231is_root_window_or_any_child_focused(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_230is_root_window_or_any_child_focused[] = "is_root_window_or_any_child_focused()\nIs the current root window or any of its children on focus.\n\n    Returns:\n        bool: True if any of the windows is on focus, otherwise False.\n\n    .. wraps::\n        bool IsRootWindowOrAnyChildFocused()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_231is_root_window_or_any_child_focused = {"is_root_window_or_any_child_focused", (PyCFunction)__pyx_pw_5imgui_4core_231is_root_window_or_any_child_focused, METH_NOARGS, __pyx_doc_5imgui_4core_230is_root_window_or_any_child_focused};
static PyObject *__pyx_pw_5imgui_4core_231is_root_window_or_any_child_focused(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_root_window_or_any_child_focused (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_230is_root_window_or_any_child_focused(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_230is_root_window_or_any_child_focused(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_root_window_or_any_child_focused", 0);

  /* "imgui/core.pyx":4555
 *         bool IsRootWindowOrAnyChildFocused()
 *     """
 *     return cimgui.IsRootWindowOrAnyChildFocused()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsRootWindowOrAnyChildFocused();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4555, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4546
 * 
 * 
 * def is_root_window_or_any_child_focused():             # <<<<<<<<<<<<<<
 *     """Is the current root window or any of its children on focus.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_root_window_or_any_child_focused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4558
 * 
 * 
 * def is_root_window_or_any_child_hovered():             # <<<<<<<<<<<<<<
 *     """Is the current root window or any of its children
 *     hovered with the mouse.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_233is_root_window_or_any_child_hovered(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_232is_root_window_or_any_child_hovered[] = "is_root_window_or_any_child_hovered()\nIs the current root window or any of its children\n    hovered with the mouse.\n\n    Returns:\n        bool: True if any of the windows is hovered, otherwise False.\n\n    .. wraps::\n        bool IsRootWindowOrAnyChildHovered()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_233is_root_window_or_any_child_hovered = {"is_root_window_or_any_child_hovered", (PyCFunction)__pyx_pw_5imgui_4core_233is_root_window_or_any_child_hovered, METH_NOARGS, __pyx_doc_5imgui_4core_232is_root_window_or_any_child_hovered};
static PyObject *__pyx_pw_5imgui_4core_233is_root_window_or_any_child_hovered(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_root_window_or_any_child_hovered (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_232is_root_window_or_any_child_hovered(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_232is_root_window_or_any_child_hovered(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_root_window_or_any_child_hovered", 0);

  /* "imgui/core.pyx":4568
 *         bool IsRootWindowOrAnyChildHovered()
 *     """
 *     return cimgui.IsRootWindowOrAnyChildHovered()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsRootWindowOrAnyChildHovered();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4568, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4558
 * 
 * 
 * def is_root_window_or_any_child_hovered():             # <<<<<<<<<<<<<<
 *     """Is the current root window or any of its children
 *     hovered with the mouse.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_root_window_or_any_child_hovered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4571
 * 
 * 
 * def is_rect_visible(float size_width, float size_height):             # <<<<<<<<<<<<<<
 *     """Test if a rectangle of the given size, starting from the cursor
 *     position is visible (not clipped).
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_235is_rect_visible(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_234is_rect_visible[] = "is_rect_visible(float size_width, float size_height)\nTest if a rectangle of the given size, starting from the cursor\n    position is visible (not clipped).\n\n    Args:\n        size_width (float): width of the rect\n        size_height (float): height of the rect\n\n    Returns:\n        bool: True if rect is visible, otherwise False.\n\n    .. wraps::\n        bool IsRectVisible(const ImVec2& size)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_235is_rect_visible = {"is_rect_visible", (PyCFunction)__pyx_pw_5imgui_4core_235is_rect_visible, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_234is_rect_visible};
static PyObject *__pyx_pw_5imgui_4core_235is_rect_visible(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_size_width;
  float __pyx_v_size_height;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_rect_visible (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size_width,&__pyx_n_s_size_height,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_rect_visible", 1, 2, 2, 1); __PYX_ERR(0, 4571, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_rect_visible") < 0)) __PYX_ERR(0, 4571, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_size_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_size_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4571, __pyx_L3_error)
    __pyx_v_size_height = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_size_height == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4571, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_rect_visible", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4571, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_rect_visible", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_234is_rect_visible(__pyx_self, __pyx_v_size_width, __pyx_v_size_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_234is_rect_visible(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_size_width, float __pyx_v_size_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("is_rect_visible", 0);

  /* "imgui/core.pyx":4585
 *         bool IsRectVisible(const ImVec2& size)
 *     """
 *     return cimgui.IsRectVisible(_cast_args_ImVec2(size_width, size_height))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_size_width, __pyx_v_size_height); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4585, __pyx_L1_error)
  try {
    __pyx_t_2 = ImGui::IsRectVisible(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4585, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4571
 * 
 * 
 * def is_rect_visible(float size_width, float size_height):             # <<<<<<<<<<<<<<
 *     """Test if a rectangle of the given size, starting from the cursor
 *     position is visible (not clipped).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core.is_rect_visible", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4588
 * 
 * 
 * def is_pos_hovering_any_window(float position_x, float position_y):             # <<<<<<<<<<<<<<
 *     """Test if position is hovering any active ImGui window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_237is_pos_hovering_any_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_236is_pos_hovering_any_window[] = "is_pos_hovering_any_window(float position_x, float position_y)\nTest if position is hovering any active ImGui window.\n\n    Args:\n        position_x (float): width of the rect\n        position_y (float): height of the rect\n\n    Returns:\n        bool: True if rect is visible, otherwise False.\n\n    .. wraps::\n        bool IsPosHoveringAnyWindow(const ImVec2& size)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_237is_pos_hovering_any_window = {"is_pos_hovering_any_window", (PyCFunction)__pyx_pw_5imgui_4core_237is_pos_hovering_any_window, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_236is_pos_hovering_any_window};
static PyObject *__pyx_pw_5imgui_4core_237is_pos_hovering_any_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_position_x;
  float __pyx_v_position_y;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_pos_hovering_any_window (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_position_x,&__pyx_n_s_position_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_position_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_position_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_pos_hovering_any_window", 1, 2, 2, 1); __PYX_ERR(0, 4588, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_pos_hovering_any_window") < 0)) __PYX_ERR(0, 4588, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_position_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_position_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4588, __pyx_L3_error)
    __pyx_v_position_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_position_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4588, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_pos_hovering_any_window", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4588, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_pos_hovering_any_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_236is_pos_hovering_any_window(__pyx_self, __pyx_v_position_x, __pyx_v_position_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_236is_pos_hovering_any_window(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_position_x, float __pyx_v_position_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("is_pos_hovering_any_window", 0);

  /* "imgui/core.pyx":4601
 *         bool IsPosHoveringAnyWindow(const ImVec2& size)
 *     """
 *     return cimgui.IsPosHoveringAnyWindow(             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(position_x, position_y)
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4602
 *     """
 *     return cimgui.IsPosHoveringAnyWindow(
 *         _cast_args_ImVec2(position_x, position_y)             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_position_x, __pyx_v_position_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4602, __pyx_L1_error)

  /* "imgui/core.pyx":4601
 *         bool IsPosHoveringAnyWindow(const ImVec2& size)
 *     """
 *     return cimgui.IsPosHoveringAnyWindow(             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(position_x, position_y)
 *     )
 */
  try {
    __pyx_t_2 = ImGui::IsPosHoveringAnyWindow(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4601, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4588
 * 
 * 
 * def is_pos_hovering_any_window(float position_x, float position_y):             # <<<<<<<<<<<<<<
 *     """Test if position is hovering any active ImGui window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core.is_pos_hovering_any_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4606
 * 
 * 
 * def is_mouse_hovering_window():             # <<<<<<<<<<<<<<
 *     """Test if mouse is hovering the current window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_239is_mouse_hovering_window(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_238is_mouse_hovering_window[] = "is_mouse_hovering_window()\nTest if mouse is hovering the current window.\n\n    Returns:\n        bool: True if the window is hovered, otherwise False.\n\n    .. wraps::\n        bool IsMouseHoveringWindow()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_239is_mouse_hovering_window = {"is_mouse_hovering_window", (PyCFunction)__pyx_pw_5imgui_4core_239is_mouse_hovering_window, METH_NOARGS, __pyx_doc_5imgui_4core_238is_mouse_hovering_window};
static PyObject *__pyx_pw_5imgui_4core_239is_mouse_hovering_window(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_hovering_window (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_238is_mouse_hovering_window(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_238is_mouse_hovering_window(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_mouse_hovering_window", 0);

  /* "imgui/core.pyx":4615
 *         bool IsMouseHoveringWindow()
 *     """
 *     return cimgui.IsMouseHoveringWindow()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsMouseHoveringWindow();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4615, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4606
 * 
 * 
 * def is_mouse_hovering_window():             # <<<<<<<<<<<<<<
 *     """Test if mouse is hovering the current window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_mouse_hovering_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4618
 * 
 * 
 * def is_mouse_hovering_any_window():             # <<<<<<<<<<<<<<
 *     """Test if mouse is hovering any visible window.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_241is_mouse_hovering_any_window(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_240is_mouse_hovering_any_window[] = "is_mouse_hovering_any_window()\nTest if mouse is hovering any visible window.\n\n    Returns:\n        bool: True if any item is hovered, otherwise False.\n\n    .. wraps::\n        bool IsMouseHoveringAnyWindow()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_241is_mouse_hovering_any_window = {"is_mouse_hovering_any_window", (PyCFunction)__pyx_pw_5imgui_4core_241is_mouse_hovering_any_window, METH_NOARGS, __pyx_doc_5imgui_4core_240is_mouse_hovering_any_window};
static PyObject *__pyx_pw_5imgui_4core_241is_mouse_hovering_any_window(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_hovering_any_window (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_240is_mouse_hovering_any_window(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_240is_mouse_hovering_any_window(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_mouse_hovering_any_window", 0);

  /* "imgui/core.pyx":4627
 *         bool IsMouseHoveringAnyWindow()
 *     """
 *     return cimgui.IsMouseHoveringAnyWindow()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsMouseHoveringAnyWindow();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4627, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4618
 * 
 * 
 * def is_mouse_hovering_any_window():             # <<<<<<<<<<<<<<
 *     """Test if mouse is hovering any visible window.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_mouse_hovering_any_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4630
 * 
 * 
 * def is_mouse_hovering_rect(             # <<<<<<<<<<<<<<
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_243is_mouse_hovering_rect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_242is_mouse_hovering_rect[] = "is_mouse_hovering_rect(float r_min_x, float r_min_y, float r_max_x, float r_max_y, bool clip=True)\nTest if mouse is hovering rectangle with given coordinates.\n\n    Args:\n        r_min_x, r_min_y (float): x,y coordinate of the upper-left corner\n        r_max_x, r_max_y (float): x,y coordinate of the lower-right corner\n\n    Returns:\n        bool: True if mouse is hovering the rectangle.\n\n    .. wraps::\n        bool IsMouseHoveringRect(\n            const ImVec2& r_min,\n            const ImVec2& r_max,\n            bool clip = true\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_243is_mouse_hovering_rect = {"is_mouse_hovering_rect", (PyCFunction)__pyx_pw_5imgui_4core_243is_mouse_hovering_rect, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_242is_mouse_hovering_rect};
static PyObject *__pyx_pw_5imgui_4core_243is_mouse_hovering_rect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_r_min_x;
  float __pyx_v_r_min_y;
  float __pyx_v_r_max_x;
  float __pyx_v_r_max_y;
  bool __pyx_v_clip;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_hovering_rect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r_min_x,&__pyx_n_s_r_min_y,&__pyx_n_s_r_max_x,&__pyx_n_s_r_max_y,&__pyx_n_s_clip,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r_min_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r_min_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_mouse_hovering_rect", 0, 4, 5, 1); __PYX_ERR(0, 4630, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r_max_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_mouse_hovering_rect", 0, 4, 5, 2); __PYX_ERR(0, 4630, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r_max_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_mouse_hovering_rect", 0, 4, 5, 3); __PYX_ERR(0, 4630, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_clip);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_mouse_hovering_rect") < 0)) __PYX_ERR(0, 4630, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_r_min_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_r_min_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4631, __pyx_L3_error)
    __pyx_v_r_min_y = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r_min_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4631, __pyx_L3_error)
    __pyx_v_r_max_x = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_r_max_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4632, __pyx_L3_error)
    __pyx_v_r_max_y = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_r_max_y == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4632, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_clip = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_clip == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4633, __pyx_L3_error)
    } else {

      /* "imgui/core.pyx":4633
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 *     bool clip=True             # <<<<<<<<<<<<<<
 * ):
 *     """Test if mouse is hovering rectangle with given coordinates.
 */
      __pyx_v_clip = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_mouse_hovering_rect", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4630, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_mouse_hovering_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_242is_mouse_hovering_rect(__pyx_self, __pyx_v_r_min_x, __pyx_v_r_min_y, __pyx_v_r_max_x, __pyx_v_r_max_y, __pyx_v_clip);

  /* "imgui/core.pyx":4630
 * 
 * 
 * def is_mouse_hovering_rect(             # <<<<<<<<<<<<<<
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_242is_mouse_hovering_rect(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_r_min_x, float __pyx_v_r_min_y, float __pyx_v_r_max_x, float __pyx_v_r_max_y, bool __pyx_v_clip) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  ImVec2 __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("is_mouse_hovering_rect", 0);

  /* "imgui/core.pyx":4651
 *         )
 *     """
 *     return cimgui.IsMouseHoveringRect(             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(r_min_x, r_min_y),
 *         _cast_args_ImVec2(r_max_x, r_max_y),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4652
 *     """
 *     return cimgui.IsMouseHoveringRect(
 *         _cast_args_ImVec2(r_min_x, r_min_y),             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(r_max_x, r_max_y),
 *         clip
 */
  __pyx_t_1 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_r_min_x, __pyx_v_r_min_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4652, __pyx_L1_error)

  /* "imgui/core.pyx":4653
 *     return cimgui.IsMouseHoveringRect(
 *         _cast_args_ImVec2(r_min_x, r_min_y),
 *         _cast_args_ImVec2(r_max_x, r_max_y),             # <<<<<<<<<<<<<<
 *         clip
 *     )
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_v_r_max_x, __pyx_v_r_max_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4653, __pyx_L1_error)

  /* "imgui/core.pyx":4651
 *         )
 *     """
 *     return cimgui.IsMouseHoveringRect(             # <<<<<<<<<<<<<<
 *         _cast_args_ImVec2(r_min_x, r_min_y),
 *         _cast_args_ImVec2(r_max_x, r_max_y),
 */
  try {
    __pyx_t_3 = ImGui::IsMouseHoveringRect(__pyx_t_1, __pyx_t_2, __pyx_v_clip);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4651, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4630
 * 
 * 
 * def is_mouse_hovering_rect(             # <<<<<<<<<<<<<<
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("imgui.core.is_mouse_hovering_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4658
 * 
 * 
 * def is_mouse_dragging(int button = 0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Returns if mouse is dragging.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_245is_mouse_dragging(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_244is_mouse_dragging[] = "is_mouse_dragging(int button=0, float lock_threshold=-1.0)\nReturns if mouse is dragging.\n\n    Args:\n        button (int): mouse button index.\n        lock_threshold (float): if less than -1.0\n            uses io.MouseDraggingThreshold.\n\n    Returns:\n        bool: if mouse is dragging.\n\n    .. wraps::\n        bool IsMouseDragging(int button = 0, float lock_threshold = -1.0f)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_245is_mouse_dragging = {"is_mouse_dragging", (PyCFunction)__pyx_pw_5imgui_4core_245is_mouse_dragging, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_244is_mouse_dragging};
static PyObject *__pyx_pw_5imgui_4core_245is_mouse_dragging(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  float __pyx_v_lock_threshold;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_mouse_dragging (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,&__pyx_n_s_lock_threshold,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lock_threshold);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_mouse_dragging") < 0)) __PYX_ERR(0, 4658, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4658, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
    if (values[1]) {
      __pyx_v_lock_threshold = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_lock_threshold == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4658, __pyx_L3_error)
    } else {
      __pyx_v_lock_threshold = ((float)-1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_mouse_dragging", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4658, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.is_mouse_dragging", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_244is_mouse_dragging(__pyx_self, __pyx_v_button, __pyx_v_lock_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_244is_mouse_dragging(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, float __pyx_v_lock_threshold) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_mouse_dragging", 0);

  /* "imgui/core.pyx":4672
 *         bool IsMouseDragging(int button = 0, float lock_threshold = -1.0f)
 *     """
 *     return cimgui.IsMouseDragging(button, lock_threshold)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::IsMouseDragging(__pyx_v_button, __pyx_v_lock_threshold);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4672, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4658
 * 
 * 
 * def is_mouse_dragging(int button = 0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Returns if mouse is dragging.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.is_mouse_dragging", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4675
 * 
 * 
 * def get_mouse_drag_delta(int button=0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Dragging amount since clicking.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_247get_mouse_drag_delta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_246get_mouse_drag_delta[] = "get_mouse_drag_delta(int button=0, float lock_threshold=-1.0)\nDragging amount since clicking.\n\n    Args:\n        button (int): mouse button index.\n        lock_threshold (float): if less than -1.0\n            uses io.MouseDraggingThreshold.\n\n    Returns:\n        Vec2: mouse position two-tuple ``(x, y)``\n\n    .. wraps::\n        ImVec2 GetMouseDragDelta(int button = 0, float lock_threshold = -1.0f)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_247get_mouse_drag_delta = {"get_mouse_drag_delta", (PyCFunction)__pyx_pw_5imgui_4core_247get_mouse_drag_delta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_246get_mouse_drag_delta};
static PyObject *__pyx_pw_5imgui_4core_247get_mouse_drag_delta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  float __pyx_v_lock_threshold;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mouse_drag_delta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,&__pyx_n_s_lock_threshold,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lock_threshold);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_mouse_drag_delta") < 0)) __PYX_ERR(0, 4675, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4675, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
    if (values[1]) {
      __pyx_v_lock_threshold = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_lock_threshold == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4675, __pyx_L3_error)
    } else {
      __pyx_v_lock_threshold = ((float)-1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_mouse_drag_delta", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4675, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.get_mouse_drag_delta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_246get_mouse_drag_delta(__pyx_self, __pyx_v_button, __pyx_v_lock_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_246get_mouse_drag_delta(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button, float __pyx_v_lock_threshold) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_mouse_drag_delta", 0);

  /* "imgui/core.pyx":4689
 *         ImVec2 GetMouseDragDelta(int button = 0, float lock_threshold = -1.0f)
 *     """
 *     return _cast_ImVec2_tuple(             # <<<<<<<<<<<<<<
 *         cimgui.GetMouseDragDelta(button, lock_threshold)
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "imgui/core.pyx":4690
 *     """
 *     return _cast_ImVec2_tuple(
 *         cimgui.GetMouseDragDelta(button, lock_threshold)             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  try {
    __pyx_t_1 = ImGui::GetMouseDragDelta(__pyx_v_button, __pyx_v_lock_threshold);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4690, __pyx_L1_error)
  }

  /* "imgui/core.pyx":4689
 *         ImVec2 GetMouseDragDelta(int button = 0, float lock_threshold = -1.0f)
 *     """
 *     return _cast_ImVec2_tuple(             # <<<<<<<<<<<<<<
 *         cimgui.GetMouseDragDelta(button, lock_threshold)
 *     )
 */
  __pyx_t_2 = __pyx_f_5imgui_4core__cast_ImVec2_tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4675
 * 
 * 
 * def get_mouse_drag_delta(int button=0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Dragging amount since clicking.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_mouse_drag_delta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4694
 * 
 * 
 * def reset_mouse_drag_delta(int button = 0):             # <<<<<<<<<<<<<<
 *     """Reset the mouse dragging delta.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_249reset_mouse_drag_delta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_248reset_mouse_drag_delta[] = "reset_mouse_drag_delta(int button=0)\nReset the mouse dragging delta.\n\n    Args:\n        button (int): mouse button index.\n\n    .. wraps::\n        void ResetMouseDragDelta(int button = 0)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_249reset_mouse_drag_delta = {"reset_mouse_drag_delta", (PyCFunction)__pyx_pw_5imgui_4core_249reset_mouse_drag_delta, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_248reset_mouse_drag_delta};
static PyObject *__pyx_pw_5imgui_4core_249reset_mouse_drag_delta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_button;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_mouse_drag_delta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_button);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reset_mouse_drag_delta") < 0)) __PYX_ERR(0, 4694, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_button = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4694, __pyx_L3_error)
    } else {
      __pyx_v_button = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reset_mouse_drag_delta", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4694, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.reset_mouse_drag_delta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_248reset_mouse_drag_delta(__pyx_self, __pyx_v_button);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_248reset_mouse_drag_delta(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_button) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_mouse_drag_delta", 0);

  /* "imgui/core.pyx":4703
 *         void ResetMouseDragDelta(int button = 0)
 *     """
 *     cimgui.ResetMouseDragDelta(button)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::ResetMouseDragDelta(__pyx_v_button);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4703, __pyx_L1_error)
  }

  /* "imgui/core.pyx":4694
 * 
 * 
 * def reset_mouse_drag_delta(int button = 0):             # <<<<<<<<<<<<<<
 *     """Reset the mouse dragging delta.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.reset_mouse_drag_delta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4706
 * 
 * 
 * def get_mouse_cursor():             # <<<<<<<<<<<<<<
 *     """Return the mouse cursor id.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_251get_mouse_cursor(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_250get_mouse_cursor[] = "get_mouse_cursor()\nReturn the mouse cursor id.\n\n    .. wraps::\n        ImGuiMouseCursor GetMouseCursor()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_251get_mouse_cursor = {"get_mouse_cursor", (PyCFunction)__pyx_pw_5imgui_4core_251get_mouse_cursor, METH_NOARGS, __pyx_doc_5imgui_4core_250get_mouse_cursor};
static PyObject *__pyx_pw_5imgui_4core_251get_mouse_cursor(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mouse_cursor (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_250get_mouse_cursor(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_250get_mouse_cursor(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImGuiMouseCursor __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_mouse_cursor", 0);

  /* "imgui/core.pyx":4712
 *         ImGuiMouseCursor GetMouseCursor()
 *     """
 *     return cimgui.GetMouseCursor()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetMouseCursor();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4712, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiMouseCursor(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4706
 * 
 * 
 * def get_mouse_cursor():             # <<<<<<<<<<<<<<
 *     """Return the mouse cursor id.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_mouse_cursor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4715
 * 
 * 
 * def set_mouse_cursor(cimgui.ImGuiMouseCursor mouse_cursor_type):             # <<<<<<<<<<<<<<
 *     """Set the mouse cursor id.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_253set_mouse_cursor(PyObject *__pyx_self, PyObject *__pyx_arg_mouse_cursor_type); /*proto*/
static char __pyx_doc_5imgui_4core_252set_mouse_cursor[] = "set_mouse_cursor(ImGuiMouseCursor mouse_cursor_type)\nSet the mouse cursor id.\n\n    Args:\n        mouse_cursor_type (ImGuiMouseCursor): mouse cursor type.\n\n    .. wraps::\n        void SetMouseCursor(ImGuiMouseCursor type)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_253set_mouse_cursor = {"set_mouse_cursor", (PyCFunction)__pyx_pw_5imgui_4core_253set_mouse_cursor, METH_O, __pyx_doc_5imgui_4core_252set_mouse_cursor};
static PyObject *__pyx_pw_5imgui_4core_253set_mouse_cursor(PyObject *__pyx_self, PyObject *__pyx_arg_mouse_cursor_type) {
  ImGuiMouseCursor __pyx_v_mouse_cursor_type;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_mouse_cursor (wrapper)", 0);
  assert(__pyx_arg_mouse_cursor_type); {
    __pyx_v_mouse_cursor_type = __Pyx_PyInt_As_ImGuiMouseCursor(__pyx_arg_mouse_cursor_type); if (unlikely((__pyx_v_mouse_cursor_type == ((ImGuiMouseCursor)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4715, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_mouse_cursor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_252set_mouse_cursor(__pyx_self, ((ImGuiMouseCursor)__pyx_v_mouse_cursor_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_252set_mouse_cursor(CYTHON_UNUSED PyObject *__pyx_self, ImGuiMouseCursor __pyx_v_mouse_cursor_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_mouse_cursor", 0);

  /* "imgui/core.pyx":4724
 *         void SetMouseCursor(ImGuiMouseCursor type)
 *     """
 *     return cimgui.SetMouseCursor(mouse_cursor_type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    ImGui::SetMouseCursor(__pyx_v_mouse_cursor_type);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4724, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4715
 * 
 * 
 * def set_mouse_cursor(cimgui.ImGuiMouseCursor mouse_cursor_type):             # <<<<<<<<<<<<<<
 *     """Set the mouse cursor id.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.set_mouse_cursor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4727
 * 
 * 
 * def push_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Push font on a stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_255push_font(PyObject *__pyx_self, PyObject *__pyx_v_font); /*proto*/
static char __pyx_doc_5imgui_4core_254push_font[] = "push_font(_Font font)\nPush font on a stack.\n\n    Example:\n\n    .. code-block: python\n\n        ...\n        font_extra = io.fonts.add_font_from_file_ttf(\n            \"CODE2000.TTF\", 30, io.fonts.get_glyph_ranges_latin()\n        )\n        ...\n\n        # later in application loop\n        while True:\n            ...\n            imgui.push_font(font_extra)\n            imgui.text(\"My text with custom font\")\n            imgui.pop_font()\n\n    **Note:** Pushed fonts should be poped with :func:`pop_font()` within the\n    same frame. In order to avoid manual push/pop functions you can use the\n    :func:`font()` context manager.\n\n    Args:\n        font (_Font): font object retrieved from :any:`add_font_from_file_ttf`.\n\n    .. wraps::\n        void PushFont(ImFont*)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_255push_font = {"push_font", (PyCFunction)__pyx_pw_5imgui_4core_255push_font, METH_O, __pyx_doc_5imgui_4core_254push_font};
static PyObject *__pyx_pw_5imgui_4core_255push_font(PyObject *__pyx_self, PyObject *__pyx_v_font) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_font (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_font), __pyx_ptype_5imgui_4core__Font, 1, "font", 0))) __PYX_ERR(0, 4727, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_254push_font(__pyx_self, ((struct __pyx_obj_5imgui_4core__Font *)__pyx_v_font));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_254push_font(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core__Font *__pyx_v_font) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_font", 0);

  /* "imgui/core.pyx":4757
 *         void PushFont(ImFont*)
 *     """
 *     cimgui.PushFont(font._ptr)             # <<<<<<<<<<<<<<
 * 
 * def pop_font():
 */
  try {
    ImGui::PushFont(__pyx_v_font->_ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4757, __pyx_L1_error)
  }

  /* "imgui/core.pyx":4727
 * 
 * 
 * def push_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Push font on a stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.push_font", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4759
 *     cimgui.PushFont(font._ptr)
 * 
 * def pop_font():             # <<<<<<<<<<<<<<
 *     """Pop font on a stack.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_257pop_font(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_256pop_font[] = "pop_font()\nPop font on a stack.\n\n    For example usage see :func:`push_font()`.\n\n    Args:\n        font (_Font): font object retrieved from :any:`add_font_from_file_ttf`.\n\n    .. wraps::\n        void PopFont()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_257pop_font = {"pop_font", (PyCFunction)__pyx_pw_5imgui_4core_257pop_font, METH_NOARGS, __pyx_doc_5imgui_4core_256pop_font};
static PyObject *__pyx_pw_5imgui_4core_257pop_font(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_font (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_256pop_font(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_256pop_font(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_font", 0);

  /* "imgui/core.pyx":4770
 *         void PopFont()
 *     """
 *     cimgui.PopFont()             # <<<<<<<<<<<<<<
 * 
 * cpdef push_style_var(cimgui.ImGuiStyleVar variable, value):
 */
  try {
    ImGui::PopFont();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4770, __pyx_L1_error)
  }

  /* "imgui/core.pyx":4759
 *     cimgui.PushFont(font._ptr)
 * 
 * def pop_font():             # <<<<<<<<<<<<<<
 *     """Pop font on a stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.pop_font", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4772
 *     cimgui.PopFont()
 * 
 * cpdef push_style_var(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     """Push style variable on stack.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_259push_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_style_var(ImGuiStyleVar __pyx_v_variable, PyObject *__pyx_v_value, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  ImVec2 __pyx_t_7;
  double __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("push_style_var", 0);

  /* "imgui/core.pyx":4811
 *             return False
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if isinstance(value, (tuple, list)):
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "imgui/core.pyx":4812
 * 
 *     try:
 *         if isinstance(value, (tuple, list)):             # <<<<<<<<<<<<<<
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 *         else:
 */
      __pyx_t_5 = PyTuple_Check(__pyx_v_value); 
      __pyx_t_6 = (__pyx_t_5 != 0);
      if (!__pyx_t_6) {
      } else {
        __pyx_t_4 = __pyx_t_6;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_6 = PyList_Check(__pyx_v_value); 
      __pyx_t_5 = (__pyx_t_6 != 0);
      __pyx_t_4 = __pyx_t_5;
      __pyx_L10_bool_binop_done:;
      __pyx_t_5 = (__pyx_t_4 != 0);
      if (__pyx_t_5) {

        /* "imgui/core.pyx":4813
 *     try:
 *         if isinstance(value, (tuple, list)):
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))             # <<<<<<<<<<<<<<
 *         else:
 *             cimgui.PushStyleVar(variable, float(value))
 */
        __pyx_t_7 = __pyx_f_5imgui_4core__cast_tuple_ImVec2(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 4813, __pyx_L3_error)
        try {
          ImGui::PushStyleVar(__pyx_v_variable, __pyx_t_7);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 4813, __pyx_L3_error)
        }

        /* "imgui/core.pyx":4812
 * 
 *     try:
 *         if isinstance(value, (tuple, list)):             # <<<<<<<<<<<<<<
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 *         else:
 */
        goto __pyx_L9;
      }

      /* "imgui/core.pyx":4815
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 *         else:
 *             cimgui.PushStyleVar(variable, float(value))             # <<<<<<<<<<<<<<
 *     except ValueError:
 *         raise ValueError(
 */
      /*else*/ {
        __pyx_t_8 = __Pyx_PyObject_AsDouble(__pyx_v_value); if (unlikely(__pyx_t_8 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 4815, __pyx_L3_error)
        try {
          ImGui::PushStyleVar(__pyx_v_variable, __pyx_t_8);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 4815, __pyx_L3_error)
        }
      }
      __pyx_L9:;

      /* "imgui/core.pyx":4811
 *             return False
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if isinstance(value, (tuple, list)):
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 */
    }

    /* "imgui/core.pyx":4821
 *         )
 *     else:
 *         return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else:*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "imgui/core.pyx":4816
 *         else:
 *             cimgui.PushStyleVar(variable, float(value))
 *     except ValueError:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "Style value must be float or two-elements list/tuple"
 */
    __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_9) {
      __Pyx_AddTraceback("imgui.core.push_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0) __PYX_ERR(0, 4816, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GOTREF(__pyx_t_12);

      /* "imgui/core.pyx":4817
 *             cimgui.PushStyleVar(variable, float(value))
 *     except ValueError:
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "Style value must be float or two-elements list/tuple"
 *         )
 */
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 4817, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_Raise(__pyx_t_13, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __PYX_ERR(0, 4817, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "imgui/core.pyx":4811
 *             return False
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if isinstance(value, (tuple, list)):
 *             cimgui.PushStyleVar(variable, _cast_tuple_ImVec2(value))
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "imgui/core.pyx":4772
 *     cimgui.PopFont()
 * 
 * cpdef push_style_var(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     """Push style variable on stack.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("imgui.core.push_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_259push_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_258push_style_var[] = "push_style_var(ImGuiStyleVar variable, value)\nPush style variable on stack.\n\n    This function accepts both float and float two-tuples as ``value``\n    argument. ImGui core implementation will verify if passed value has\n    type compatibile with given style variable. If not, it will raise\n    exception.\n\n    **Note:** variables pushed on stack need to be poped using\n    :func:`pop_style_var()` until the end of current frame. This\n    implementation guards you from segfaults caused by redundant stack pops\n    (raises exception if this happens) but generally it is safer and easier to\n    use :func:`styled` or :func:`istyled` context managers.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 200\n        :height: 80\n\n        imgui.begin(\"Example: style variables\")\n        imgui.push_style_var(imgui.STYLE_ALPHA, 0.2)\n        imgui.text(\"Alpha text\")\n        imgui.pop_style_var(1)\n        imgui.end()\n\n    Args:\n        variable: imgui style variable constant\n        value (float or two-tuple): style variable value\n\n\n    .. wraps::\n        PushStyleVar(ImGuiStyleVar idx, float val)\n    ";
static PyObject *__pyx_pw_5imgui_4core_259push_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiStyleVar __pyx_v_variable;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_style_var (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variable)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_style_var", 1, 2, 2, 1); __PYX_ERR(0, 4772, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "push_style_var") < 0)) __PYX_ERR(0, 4772, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiStyleVar(values[0]); if (unlikely((__pyx_v_variable == ((ImGuiStyleVar)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4772, __pyx_L3_error)
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("push_style_var", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4772, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.push_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_258push_style_var(__pyx_self, __pyx_v_variable, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_258push_style_var(CYTHON_UNUSED PyObject *__pyx_self, ImGuiStyleVar __pyx_v_variable, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("push_style_var", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_push_style_var(__pyx_v_variable, __pyx_v_value, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.push_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4824
 * 
 * 
 * cpdef push_style_color(             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiCol variable,
 *     float r,
 */

static PyObject *__pyx_pw_5imgui_4core_261push_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_style_color(ImGuiCol __pyx_v_variable, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_push_style_color *__pyx_optional_args) {
  float __pyx_v_a = ((float)1.);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_style_color", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_a = __pyx_optional_args->a;
    }
  }

  /* "imgui/core.pyx":4866
 *             return False
 * 
 *     cimgui.PushStyleColor(variable, _cast_args_ImVec4(r, g, b, a))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PushStyleColor(__pyx_v_variable, __pyx_f_5imgui_4core__cast_args_ImVec4(__pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4866, __pyx_L1_error)
  }

  /* "imgui/core.pyx":4824
 * 
 * 
 * cpdef push_style_color(             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiCol variable,
 *     float r,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.push_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_261push_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_260push_style_color[] = "push_style_color(ImGuiCol variable, float r, float g, float b, float a=1.0)\nPush style color on stack.\n\n    **Note:** variables pushed on stack need to be poped using\n    :func:`pop_style_color()` until the end of current frame. This\n    implementation guards you from segfaults caused by redundant stack pops\n    (raises exception if this happens) but generally it is safer and easier to\n    use :func:`styled` or :func:`istyled` context managers.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 200\n        :height: 80\n\n        imgui.begin(\"Example: Color variables\")\n        imgui.push_style_color(imgui.COLOR_TEXT, 1.0, 0.0, 0.0)\n        imgui.text(\"Colored text\")\n        imgui.pop_style_color(1)\n        imgui.end()\n\n    Args:\n        variable: imgui style color constant\n        r (float): red color intensity.\n        g (float): green color intensity.\n        b (float): blue color instensity.\n        a (float): alpha intensity.\n\n    .. wraps::\n        PushStyleColor(ImGuiCol idx, const ImVec4& col)\n    ";
static PyObject *__pyx_pw_5imgui_4core_261push_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiCol __pyx_v_variable;
  float __pyx_v_r;
  float __pyx_v_g;
  float __pyx_v_b;
  float __pyx_v_a;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_style_color (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,&__pyx_n_s_a,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variable)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_style_color", 0, 4, 5, 1); __PYX_ERR(0, 4824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_style_color", 0, 4, 5, 2); __PYX_ERR(0, 4824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("push_style_color", 0, 4, 5, 3); __PYX_ERR(0, 4824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "push_style_color") < 0)) __PYX_ERR(0, 4824, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiCol(values[0]); if (unlikely((__pyx_v_variable == ((ImGuiCol)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4825, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_r == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4826, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_g == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4827, __pyx_L3_error)
    __pyx_v_b = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4828, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_a = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_a == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4829, __pyx_L3_error)
    } else {
      __pyx_v_a = ((float)1.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("push_style_color", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4824, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.push_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_260push_style_color(__pyx_self, __pyx_v_variable, __pyx_v_r, __pyx_v_g, __pyx_v_b, __pyx_v_a);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_260push_style_color(CYTHON_UNUSED PyObject *__pyx_self, ImGuiCol __pyx_v_variable, float __pyx_v_r, float __pyx_v_g, float __pyx_v_b, float __pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5imgui_4core_push_style_color __pyx_t_2;
  __Pyx_RefNannySetupContext("push_style_color", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.a = __pyx_v_a;
  __pyx_t_1 = __pyx_f_5imgui_4core_push_style_color(__pyx_v_variable, __pyx_v_r, __pyx_v_g, __pyx_v_b, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.push_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4869
 * 
 * 
 * cpdef pop_style_var(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style variables from stack.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_263pop_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_style_var(CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_pop_style_var *__pyx_optional_args) {
  unsigned int __pyx_v_count = ((unsigned int)1);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_style_var", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_count = __pyx_optional_args->count;
    }
  }

  /* "imgui/core.pyx":4883
 *         void PopStyleVar(int count = 1)
 *     """
 *     cimgui.PopStyleVar(count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PopStyleVar(__pyx_v_count);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4883, __pyx_L1_error)
  }

  /* "imgui/core.pyx":4869
 * 
 * 
 * cpdef pop_style_var(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style variables from stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.pop_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_263pop_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_262pop_style_var[] = "pop_style_var(unsigned int count=1)\nPop style variables from stack.\n\n    **Note:** This implementation guards you from segfaults caused by\n    redundant stack pops (raises exception if this happens) but generally\n    it is safer and easier to use :func:`styled` or :func:`istyled` context\n    managers. See: :any:`push_style_var()`.\n\n    Args:\n        count (int): number of variables to pop from style variable stack.\n\n    .. wraps::\n        void PopStyleVar(int count = 1)\n    ";
static PyObject *__pyx_pw_5imgui_4core_263pop_style_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_count;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_style_var (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pop_style_var") < 0)) __PYX_ERR(0, 4869, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_count = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_count == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4869, __pyx_L3_error)
    } else {
      __pyx_v_count = ((unsigned int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pop_style_var", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4869, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.pop_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_262pop_style_var(__pyx_self, __pyx_v_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_262pop_style_var(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5imgui_4core_pop_style_var __pyx_t_2;
  __Pyx_RefNannySetupContext("pop_style_var", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.count = __pyx_v_count;
  __pyx_t_1 = __pyx_f_5imgui_4core_pop_style_var(0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.pop_style_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4886
 * 
 * 
 * cpdef push_item_width(float item_width):             # <<<<<<<<<<<<<<
 *     """Push item width in the stack.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_265push_item_width(PyObject *__pyx_self, PyObject *__pyx_arg_item_width); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_item_width(float __pyx_v_item_width, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_item_width", 0);

  /* "imgui/core.pyx":4925
 *         void PushItemWidth(float item_width)
 *     """
 *     cimgui.PushItemWidth(item_width)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PushItemWidth(__pyx_v_item_width);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4925, __pyx_L1_error)
  }

  /* "imgui/core.pyx":4886
 * 
 * 
 * cpdef push_item_width(float item_width):             # <<<<<<<<<<<<<<
 *     """Push item width in the stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.push_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_265push_item_width(PyObject *__pyx_self, PyObject *__pyx_arg_item_width); /*proto*/
static char __pyx_doc_5imgui_4core_264push_item_width[] = "push_item_width(float item_width)\nPush item width in the stack.\n\n    **Note:** sizing of child region allows for three modes:\n\n    * ``0.0`` - default to ~2/3 of windows width\n    * ``>0.0`` - width in pixels\n    * ``<0.0`` - align xx pixels to the right of window\n      (so -1.0f always align width to the right side)\n\n    **Note:** width pushed on stack need to be poped using\n    :func:`pop_item_width()` or it will be applied to all subsequent\n    children components.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 200\n        :height: 200\n\n        imgui.begin(\"Example: item width\")\n\n        # custom width\n        imgui.push_item_width(imgui.get_window_width() * 0.33)\n        imgui.text('Lorem Ipsum ...')\n        imgui.slider_float('float slider', 10.2, 0.0, 20.0, '%.2f', 1.0)\n        imgui.pop_item_width()\n\n        # default width\n        imgui.text('Lorem Ipsum ...')\n        imgui.slider_float('float slider', 10.2, 0.0, 20.0, '%.2f', 1.0)\n\n        imgui.end()\n\n    Args:\n        item_width (float): width of the component\n\n    .. wraps::\n        void PushItemWidth(float item_width)\n    ";
static PyObject *__pyx_pw_5imgui_4core_265push_item_width(PyObject *__pyx_self, PyObject *__pyx_arg_item_width) {
  float __pyx_v_item_width;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_item_width (wrapper)", 0);
  assert(__pyx_arg_item_width); {
    __pyx_v_item_width = __pyx_PyFloat_AsFloat(__pyx_arg_item_width); if (unlikely((__pyx_v_item_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4886, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.push_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_264push_item_width(__pyx_self, ((float)__pyx_v_item_width));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_264push_item_width(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_item_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("push_item_width", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_push_item_width(__pyx_v_item_width, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.push_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4928
 * 
 * 
 * cpdef pop_item_width():             # <<<<<<<<<<<<<<
 *     """Reset width back to the default width.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_267pop_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_item_width(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_item_width", 0);

  /* "imgui/core.pyx":4939
 *         void PopItemWidth()
 *     """
 *     cimgui.PopItemWidth()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PopItemWidth();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4939, __pyx_L1_error)
  }

  /* "imgui/core.pyx":4928
 * 
 * 
 * cpdef pop_item_width():             # <<<<<<<<<<<<<<
 *     """Reset width back to the default width.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.pop_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_267pop_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_266pop_item_width[] = "pop_item_width()\nReset width back to the default width.\n\n    **Note:** This implementation guards you from segfaults caused by\n    redundant stack pops (raises exception if this happens) but generally\n    it is safer and easier to use :func:`styled` or :func:`istyled` context\n    managers. See: :any:`push_item_width()`.\n\n    .. wraps::\n        void PopItemWidth()\n    ";
static PyObject *__pyx_pw_5imgui_4core_267pop_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_item_width (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_266pop_item_width(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_266pop_item_width(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("pop_item_width", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_pop_item_width(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.pop_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4942
 * 
 * 
 * cpdef calculate_item_width():             # <<<<<<<<<<<<<<
 *     """Calculate and return the current item width.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_269calculate_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5imgui_4core_calculate_item_width(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("calculate_item_width", 0);

  /* "imgui/core.pyx":4951
 *         float CalcItemWidth()
 *     """
 *     return cimgui.CalcItemWidth()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::CalcItemWidth();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4951, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":4942
 * 
 * 
 * cpdef calculate_item_width():             # <<<<<<<<<<<<<<
 *     """Calculate and return the current item width.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.calculate_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_269calculate_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_268calculate_item_width[] = "calculate_item_width()\nCalculate and return the current item width.\n\n    Returns:\n        float: calculated item width.\n\n    .. wraps::\n        float CalcItemWidth()\n    ";
static PyObject *__pyx_pw_5imgui_4core_269calculate_item_width(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_item_width (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_268calculate_item_width(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_268calculate_item_width(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("calculate_item_width", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_calculate_item_width(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.calculate_item_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4954
 * 
 * 
 * cpdef push_text_wrap_pos(float wrap_pos_x = 0.0):             # <<<<<<<<<<<<<<
 *     """Word-wrapping function for text*() commands.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_271push_text_wrap_pos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5imgui_4core_push_text_wrap_pos(CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_push_text_wrap_pos *__pyx_optional_args) {
  float __pyx_v_wrap_pos_x = ((float)0.0);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_text_wrap_pos", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_wrap_pos_x = __pyx_optional_args->wrap_pos_x;
    }
  }

  /* "imgui/core.pyx":4968
 *         float PushTextWrapPos(float wrap_pos_x = 0.0f)
 *     """
 *     cimgui.PushTextWrapPos(wrap_pos_x)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PushTextWrapPos(__pyx_v_wrap_pos_x);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4968, __pyx_L1_error)
  }

  /* "imgui/core.pyx":4954
 * 
 * 
 * cpdef push_text_wrap_pos(float wrap_pos_x = 0.0):             # <<<<<<<<<<<<<<
 *     """Word-wrapping function for text*() commands.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.push_text_wrap_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_271push_text_wrap_pos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_270push_text_wrap_pos[] = "push_text_wrap_pos(float wrap_pos_x=0.0)\nWord-wrapping function for text*() commands.\n\n    **Note:** wrapping position allows these modes:\n    * ``0.0`` - wrap to end of window (or column)\n    * ``>0.0`` - wrap at 'wrap_pos_x' position in window local space\n    * ``<0.0`` - no wrapping\n\n    Args:\n        wrap_pos_x (float): calculated item width.\n\n    .. wraps::\n        float PushTextWrapPos(float wrap_pos_x = 0.0f)\n    ";
static PyObject *__pyx_pw_5imgui_4core_271push_text_wrap_pos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_wrap_pos_x;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_text_wrap_pos (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_wrap_pos_x,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wrap_pos_x);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "push_text_wrap_pos") < 0)) __PYX_ERR(0, 4954, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_wrap_pos_x = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_wrap_pos_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4954, __pyx_L3_error)
    } else {
      __pyx_v_wrap_pos_x = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("push_text_wrap_pos", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4954, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.push_text_wrap_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_270push_text_wrap_pos(__pyx_self, __pyx_v_wrap_pos_x);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_270push_text_wrap_pos(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_wrap_pos_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5imgui_4core_push_text_wrap_pos __pyx_t_2;
  __Pyx_RefNannySetupContext("push_text_wrap_pos", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.wrap_pos_x = __pyx_v_wrap_pos_x;
  __pyx_t_1 = __pyx_f_5imgui_4core_push_text_wrap_pos(0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.push_text_wrap_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4971
 * 
 * 
 * cpdef pop_text_wrap_pos():             # <<<<<<<<<<<<<<
 *     """Pop the text wrapping position from the stack.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_273pop_text_wrap_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_text_wrap_pos(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_text_wrap_pos", 0);

  /* "imgui/core.pyx":4982
 *         void PopTextWrapPos()
 *     """
 *     cimgui.PopTextWrapPos()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PopTextWrapPos();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4982, __pyx_L1_error)
  }

  /* "imgui/core.pyx":4971
 * 
 * 
 * cpdef pop_text_wrap_pos():             # <<<<<<<<<<<<<<
 *     """Pop the text wrapping position from the stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.pop_text_wrap_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_273pop_text_wrap_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_272pop_text_wrap_pos[] = "pop_text_wrap_pos()\nPop the text wrapping position from the stack.\n\n    **Note:** This implementation guards you from segfaults caused by\n    redundant stack pops (raises exception if this happens) but generally\n    it is safer and easier to use :func:`styled` or :func:`istyled` context\n    managers. See: :func:`push_text_wrap_pos()`.\n\n    .. wraps::\n        void PopTextWrapPos()\n    ";
static PyObject *__pyx_pw_5imgui_4core_273pop_text_wrap_pos(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_text_wrap_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_272pop_text_wrap_pos(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_272pop_text_wrap_pos(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("pop_text_wrap_pos", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5imgui_4core_pop_text_wrap_pos(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.pop_text_wrap_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":4985
 * 
 * 
 * cpdef pop_style_color(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style color from stack.
 * 
 */

static PyObject *__pyx_pw_5imgui_4core_275pop_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5imgui_4core_pop_style_color(CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5imgui_4core_pop_style_color *__pyx_optional_args) {
  unsigned int __pyx_v_count = ((unsigned int)1);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_style_color", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_count = __pyx_optional_args->count;
    }
  }

  /* "imgui/core.pyx":4999
 *         void PopStyleColor(int count = 1)
 *     """
 *     cimgui.PopStyleColor(count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::PopStyleColor(__pyx_v_count);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4999, __pyx_L1_error)
  }

  /* "imgui/core.pyx":4985
 * 
 * 
 * cpdef pop_style_color(unsigned int count=1):             # <<<<<<<<<<<<<<
 *     """Pop style color from stack.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.pop_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_275pop_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_274pop_style_color[] = "pop_style_color(unsigned int count=1)\nPop style color from stack.\n\n    **Note:** This implementation guards you from segfaults caused by\n    redundant stack pops (raises exception if this happens) but generally\n    it is safer and easier to use :func:`styled` or :func:`istyled` context\n    managers. See: :any:`push_style_color()`.\n\n    Args:\n        count (int): number of variables to pop from style color stack.\n\n    .. wraps::\n        void PopStyleColor(int count = 1)\n    ";
static PyObject *__pyx_pw_5imgui_4core_275pop_style_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_count;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_style_color (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pop_style_color") < 0)) __PYX_ERR(0, 4985, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_count = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_count == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4985, __pyx_L3_error)
    } else {
      __pyx_v_count = ((unsigned int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pop_style_color", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4985, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.pop_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_274pop_style_color(__pyx_self, __pyx_v_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_274pop_style_color(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5imgui_4core_pop_style_color __pyx_t_2;
  __Pyx_RefNannySetupContext("pop_style_color", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.count = __pyx_v_count;
  __pyx_t_1 = __pyx_f_5imgui_4core_pop_style_color(0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.pop_style_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5002
 * 
 * 
 * def separator():             # <<<<<<<<<<<<<<
 *     """Add vertical line as a separator beween elements.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_277separator(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_276separator[] = "separator()\nAdd vertical line as a separator beween elements.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n\n        imgui.begin(\"Example: separators\")\n\n        imgui.text(\"Some text with bullets\")\n        imgui.bullet_text(\"Bullet A\")\n        imgui.bullet_text(\"Bullet A\")\n\n        imgui.separator()\n\n        imgui.text(\"Another text with bullets\")\n        imgui.bullet_text(\"Bullet A\")\n        imgui.bullet_text(\"Bullet A\")\n\n        imgui.end()\n\n    .. wraps::\n        void Separator()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_277separator = {"separator", (PyCFunction)__pyx_pw_5imgui_4core_277separator, METH_NOARGS, __pyx_doc_5imgui_4core_276separator};
static PyObject *__pyx_pw_5imgui_4core_277separator(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("separator (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_276separator(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_276separator(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("separator", 0);

  /* "imgui/core.pyx":5026
 *         void Separator()
 *     """
 *     cimgui.Separator()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Separator();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5026, __pyx_L1_error)
  }

  /* "imgui/core.pyx":5002
 * 
 * 
 * def separator():             # <<<<<<<<<<<<<<
 *     """Add vertical line as a separator beween elements.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.separator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5029
 * 
 * 
 * def same_line(float position=0.0, float spacing=-1.0):             # <<<<<<<<<<<<<<
 *     """Call between widgets or groups to layout them horizontally.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_279same_line(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_278same_line[] = "same_line(float position=0.0, float spacing=-1.0)\nCall between widgets or groups to layout them horizontally.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n\n        imgui.begin(\"Example: same line widgets\")\n\n        imgui.text(\"same_line() with defaults:\")\n        imgui.button(\"yes\"); imgui.same_line()\n        imgui.button(\"no\")\n\n        imgui.text(\"same_line() with fixed position:\")\n        imgui.button(\"yes\"); imgui.same_line(position=50)\n        imgui.button(\"no\")\n\n        imgui.text(\"same_line() with spacing:\")\n        imgui.button(\"yes\"); imgui.same_line(spacing=50)\n        imgui.button(\"no\")\n\n        imgui.end()\n\n    Args:\n        position (float): fixed horizontal position position.\n        spacing (float): spacing between elements.\n\n    .. wraps::\n        void SameLine(float pos_x = 0.0f, float spacing_w = -1.0f)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_279same_line = {"same_line", (PyCFunction)__pyx_pw_5imgui_4core_279same_line, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_278same_line};
static PyObject *__pyx_pw_5imgui_4core_279same_line(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_position;
  float __pyx_v_spacing;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("same_line (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_position,&__pyx_n_s_spacing,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_position);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spacing);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "same_line") < 0)) __PYX_ERR(0, 5029, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_position = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_position == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5029, __pyx_L3_error)
    } else {
      __pyx_v_position = ((float)0.0);
    }
    if (values[1]) {
      __pyx_v_spacing = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_spacing == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5029, __pyx_L3_error)
    } else {
      __pyx_v_spacing = ((float)-1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("same_line", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5029, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.same_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_278same_line(__pyx_self, __pyx_v_position, __pyx_v_spacing);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_278same_line(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_position, float __pyx_v_spacing) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("same_line", 0);

  /* "imgui/core.pyx":5059
 *         void SameLine(float pos_x = 0.0f, float spacing_w = -1.0f)
 *     """
 *     cimgui.SameLine(position, spacing)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ImGui::SameLine(__pyx_v_position, __pyx_v_spacing);

  /* "imgui/core.pyx":5029
 * 
 * 
 * def same_line(float position=0.0, float spacing=-1.0):             # <<<<<<<<<<<<<<
 *     """Call between widgets or groups to layout them horizontally.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5062
 * 
 * 
 * def new_line():             # <<<<<<<<<<<<<<
 *     """Undo :any:`same_line()` call.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_281new_line(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_280new_line[] = "new_line()\nUndo :any:`same_line()` call.\n\n    .. wraps::\n        void NewLine()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_281new_line = {"new_line", (PyCFunction)__pyx_pw_5imgui_4core_281new_line, METH_NOARGS, __pyx_doc_5imgui_4core_280new_line};
static PyObject *__pyx_pw_5imgui_4core_281new_line(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_line (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_280new_line(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_280new_line(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_line", 0);

  /* "imgui/core.pyx":5068
 *         void NewLine()
 *     """
 *     cimgui.NewLine()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::NewLine();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5068, __pyx_L1_error)
  }

  /* "imgui/core.pyx":5062
 * 
 * 
 * def new_line():             # <<<<<<<<<<<<<<
 *     """Undo :any:`same_line()` call.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.new_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5071
 * 
 * 
 * def spacing():             # <<<<<<<<<<<<<<
 *     """Add vertical spacing beween elements.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_283spacing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_282spacing[] = "spacing()\nAdd vertical spacing beween elements.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n\n        imgui.begin(\"Example: vertical spacing\")\n\n        imgui.text(\"Some text with bullets:\")\n        imgui.bullet_text(\"Bullet A\")\n        imgui.bullet_text(\"Bullet A\")\n\n        imgui.spacing(); imgui.spacing()\n\n        imgui.text(\"Another text with bullets:\")\n        imgui.bullet_text(\"Bullet A\")\n        imgui.bullet_text(\"Bullet A\")\n\n        imgui.end()\n\n    .. wraps::\n        void Spacing()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_283spacing = {"spacing", (PyCFunction)__pyx_pw_5imgui_4core_283spacing, METH_NOARGS, __pyx_doc_5imgui_4core_282spacing};
static PyObject *__pyx_pw_5imgui_4core_283spacing(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("spacing (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_282spacing(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_282spacing(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("spacing", 0);

  /* "imgui/core.pyx":5095
 *         void Spacing()
 *     """
 *     cimgui.Spacing()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Spacing();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5095, __pyx_L1_error)
  }

  /* "imgui/core.pyx":5071
 * 
 * 
 * def spacing():             # <<<<<<<<<<<<<<
 *     """Add vertical spacing beween elements.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.spacing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5098
 * 
 * 
 * def dummy(width, height):             # <<<<<<<<<<<<<<
 *     """Add dummy element of given size.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_285dummy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_284dummy[] = "dummy(width, height)\nAdd dummy element of given size.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n\n        imgui.begin(\"Example: dummy elements\")\n\n        imgui.text(\"Some text with bullets:\")\n        imgui.bullet_text(\"Bullet A\")\n        imgui.bullet_text(\"Bullet B\")\n\n        imgui.dummy(0, 50)\n        imgui.bullet_text(\"Text after dummy\")\n\n        imgui.end()\n\n    .. wraps::\n        void Dummy(const ImVec2& size)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_285dummy = {"dummy", (PyCFunction)__pyx_pw_5imgui_4core_285dummy, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_284dummy};
static PyObject *__pyx_pw_5imgui_4core_285dummy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dummy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dummy", 1, 2, 2, 1); __PYX_ERR(0, 5098, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dummy") < 0)) __PYX_ERR(0, 5098, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_width = values[0];
    __pyx_v_height = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dummy", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5098, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.dummy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_284dummy(__pyx_self, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_284dummy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  ImVec2 __pyx_t_3;
  __Pyx_RefNannySetupContext("dummy", 0);

  /* "imgui/core.pyx":5119
 *         void Dummy(const ImVec2& size)
 *     """
 *     cimgui.Dummy(_cast_args_ImVec2(width, height))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_width); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5119, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_height); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5119, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_5imgui_4core__cast_args_ImVec2(__pyx_t_1, __pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 5119, __pyx_L1_error)
  try {
    ImGui::Dummy(__pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5119, __pyx_L1_error)
  }

  /* "imgui/core.pyx":5098
 * 
 * 
 * def dummy(width, height):             # <<<<<<<<<<<<<<
 *     """Add dummy element of given size.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.dummy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5122
 * 
 * 
 * def indent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to right by indent width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_287indent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_286indent[] = "indent(float width=0.0)\nMove content to right by indent width.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n\n        imgui.begin(\"Example: item indenting\")\n\n        imgui.text(\"Some text with bullets:\")\n\n        imgui.bullet_text(\"Bullet A\")\n        imgui.indent()\n        imgui.bullet_text(\"Bullet B (first indented)\")\n        imgui.bullet_text(\"Bullet C (indent continues)\")\n        imgui.unindent()\n        imgui.bullet_text(\"Bullet D (indent cleared)\")\n\n        imgui.end()\n\n    Args:\n        width (float): fixed width of indent. If less or equal 0 it defaults\n            to global indent spacing or value set using style value  stack\n            (see :any:`push_style_var`).\n\n    .. wraps::\n        void Indent(float indent_w = 0.0f)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_287indent = {"indent", (PyCFunction)__pyx_pw_5imgui_4core_287indent, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_286indent};
static PyObject *__pyx_pw_5imgui_4core_287indent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_width;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("indent (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "indent") < 0)) __PYX_ERR(0, 5122, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5122, __pyx_L3_error)
    } else {
      __pyx_v_width = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("indent", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.indent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_286indent(__pyx_self, __pyx_v_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_286indent(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("indent", 0);

  /* "imgui/core.pyx":5150
 *         void Indent(float indent_w = 0.0f)
 *     """
 *     cimgui.Indent(width)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Indent(__pyx_v_width);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5150, __pyx_L1_error)
  }

  /* "imgui/core.pyx":5122
 * 
 * 
 * def indent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to right by indent width.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.indent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5153
 * 
 * 
 * def unindent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to left by indent width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_289unindent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_288unindent[] = "unindent(float width=0.0)\nMove content to left by indent width.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 300\n\n        imgui.begin(\"Example: item unindenting\")\n\n        imgui.text(\"Some text with bullets:\")\n\n        imgui.bullet_text(\"Bullet A\")\n        imgui.unindent(10)\n        imgui.bullet_text(\"Bullet B (first unindented)\")\n        imgui.bullet_text(\"Bullet C (unindent continues)\")\n        imgui.indent(10)\n        imgui.bullet_text(\"Bullet C (unindent cleared)\")\n\n        imgui.end()\n\n    Args:\n        width (float): fixed width of indent. If less or equal 0 it defaults\n            to global indent spacing or value set using style value stack\n            (see :any:`push_style_var`).\n\n    .. wraps::\n        void Unindent(float indent_w = 0.0f)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_289unindent = {"unindent", (PyCFunction)__pyx_pw_5imgui_4core_289unindent, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_288unindent};
static PyObject *__pyx_pw_5imgui_4core_289unindent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_width;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unindent (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "unindent") < 0)) __PYX_ERR(0, 5153, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_width = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_width == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5153, __pyx_L3_error)
    } else {
      __pyx_v_width = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unindent", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5153, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.unindent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_288unindent(__pyx_self, __pyx_v_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_288unindent(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unindent", 0);

  /* "imgui/core.pyx":5181
 *         void Unindent(float indent_w = 0.0f)
 *     """
 *     cimgui.Unindent(width)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::Unindent(__pyx_v_width);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5181, __pyx_L1_error)
  }

  /* "imgui/core.pyx":5153
 * 
 * 
 * def unindent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to left by indent width.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.unindent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5184
 * 
 * 
 * def columns(int count=1, str identifier=None, bool border=True):             # <<<<<<<<<<<<<<
 *     """Setup number of columns. Use an identifier to distinguish multiple
 *     column sets. close with ``columns(1)``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_291columns(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_290columns[] = "columns(int count=1, str identifier=None, bool border=True)\nSetup number of columns. Use an identifier to distinguish multiple\n    column sets. close with ``columns(1)``.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 500\n        :height: 300\n\n        imgui.begin(\"Example: Columns - File list\")\n        imgui.columns(4, 'fileLlist')\n        imgui.separator()\n        imgui.text(\"ID\")\n        imgui.next_column()\n        imgui.text(\"File\")\n        imgui.next_column()\n        imgui.text(\"Size\")\n        imgui.next_column()\n        imgui.text(\"Last Modified\")\n        imgui.next_column()\n        imgui.separator()\n        imgui.set_column_offset(1, 40)\n\n        imgui.next_column()\n        imgui.text('FileA.txt')\n        imgui.next_column()\n        imgui.text('57 Kb')\n        imgui.next_column()\n        imgui.text('12th Feb, 2016 12:19:01')\n        imgui.next_column()\n\n        imgui.next_column()\n        imgui.text('ImageQ.png')\n        imgui.next_column()\n        imgui.text('349 Kb')\n        imgui.next_column()\n        imgui.text('1st Mar, 2016 06:38:22')\n        imgui.next_column()\n\n        imgui.columns(1)\n        imgui.end()\n\n    Args:\n        count (int): Columns count.\n        identifier (str): Table identifier.\n        border (bool): Display border, defaults to ``True``.\n\n    .. wraps::\n        void Columns(\n            int count = 1,\n            const char* id = NULL,\n            bool border = true\n        )\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_291columns = {"columns", (PyCFunction)__pyx_pw_5imgui_4core_291columns, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_290columns};
static PyObject *__pyx_pw_5imgui_4core_291columns(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_count;
  PyObject *__pyx_v_identifier = 0;
  bool __pyx_v_border;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("columns (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,&__pyx_n_s_identifier,&__pyx_n_s_border,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_identifier);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_border);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "columns") < 0)) __PYX_ERR(0, 5184, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_count = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5184, __pyx_L3_error)
    } else {
      __pyx_v_count = ((int)1);
    }
    __pyx_v_identifier = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_border = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_border == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5184, __pyx_L3_error)
    } else {
      __pyx_v_border = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("columns", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5184, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.columns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_identifier), (&PyString_Type), 1, "identifier", 1))) __PYX_ERR(0, 5184, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_290columns(__pyx_self, __pyx_v_count, __pyx_v_identifier, __pyx_v_border);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_290columns(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_count, PyObject *__pyx_v_identifier, bool __pyx_v_border) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  __Pyx_RefNannySetupContext("columns", 0);

  /* "imgui/core.pyx":5238
 *         )
 *     """
 *     if identifier is None:             # <<<<<<<<<<<<<<
 *         cimgui.Columns(count, NULL, border)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_identifier == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "imgui/core.pyx":5239
 *     """
 *     if identifier is None:
 *         cimgui.Columns(count, NULL, border)             # <<<<<<<<<<<<<<
 *     else:
 *         cimgui.Columns(count, _bytes(identifier), border)
 */
    try {
      ImGui::Columns(__pyx_v_count, NULL, __pyx_v_border);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 5239, __pyx_L1_error)
    }

    /* "imgui/core.pyx":5238
 *         )
 *     """
 *     if identifier is None:             # <<<<<<<<<<<<<<
 *         cimgui.Columns(count, NULL, border)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "imgui/core.pyx":5241
 *         cimgui.Columns(count, NULL, border)
 *     else:
 *         cimgui.Columns(count, _bytes(identifier), border)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_3 = __pyx_f_5imgui_4core__bytes(__pyx_v_identifier); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_3); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 5241, __pyx_L1_error)
    try {
      ImGui::Columns(__pyx_v_count, __pyx_t_4, __pyx_v_border);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 5241, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "imgui/core.pyx":5184
 * 
 * 
 * def columns(int count=1, str identifier=None, bool border=True):             # <<<<<<<<<<<<<<
 *     """Setup number of columns. Use an identifier to distinguish multiple
 *     column sets. close with ``columns(1)``.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("imgui.core.columns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5244
 * 
 * 
 * def next_column():             # <<<<<<<<<<<<<<
 *     """Move to the next column drawing.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_293next_column(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_292next_column[] = "next_column()\nMove to the next column drawing.\n\n    For a complete example see :func:`columns()`.\n\n    .. wraps::\n        void NextColumn()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_293next_column = {"next_column", (PyCFunction)__pyx_pw_5imgui_4core_293next_column, METH_NOARGS, __pyx_doc_5imgui_4core_292next_column};
static PyObject *__pyx_pw_5imgui_4core_293next_column(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("next_column (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_292next_column(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_292next_column(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("next_column", 0);

  /* "imgui/core.pyx":5252
 *         void NextColumn()
 *     """
 *     cimgui.NextColumn()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::NextColumn();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5252, __pyx_L1_error)
  }

  /* "imgui/core.pyx":5244
 * 
 * 
 * def next_column():             # <<<<<<<<<<<<<<
 *     """Move to the next column drawing.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.next_column", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5255
 * 
 * 
 * def get_column_index():             # <<<<<<<<<<<<<<
 *     """Returns the current column index.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_295get_column_index(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_294get_column_index[] = "get_column_index()\nReturns the current column index.\n\n    For a complete example see :func:`columns()`.\n\n    Returns:\n        int: the current column index.\n\n    .. wraps::\n        int GetColumnIndex()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_295get_column_index = {"get_column_index", (PyCFunction)__pyx_pw_5imgui_4core_295get_column_index, METH_NOARGS, __pyx_doc_5imgui_4core_294get_column_index};
static PyObject *__pyx_pw_5imgui_4core_295get_column_index(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_column_index (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_294get_column_index(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_294get_column_index(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_column_index", 0);

  /* "imgui/core.pyx":5266
 *         int GetColumnIndex()
 *     """
 *     return cimgui.GetColumnIndex()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColumnIndex();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5266, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5255
 * 
 * 
 * def get_column_index():             # <<<<<<<<<<<<<<
 *     """Returns the current column index.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_column_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5269
 * 
 * 
 * def get_column_offset(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Returns position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column, otherwise 0 to
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_297get_column_offset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_296get_column_offset[] = "get_column_offset(int column_index=-1)\nReturns position of column line (in pixels, from the left side of the\n    contents region). Pass -1 to use current column, otherwise 0 to\n    :func:`get_columns_count()`. Column 0 is usually 0.0f and not resizable\n    unless you call this method.\n\n    For a complete example see :func:`columns()`.\n\n    Args:\n        column_index (int): index of the column to get the offset for.\n\n    Returns:\n        float: the position in pixels from the left side.\n\n    .. wraps::\n        float GetColumnOffset(int column_index = -1)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_297get_column_offset = {"get_column_offset", (PyCFunction)__pyx_pw_5imgui_4core_297get_column_offset, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_296get_column_offset};
static PyObject *__pyx_pw_5imgui_4core_297get_column_offset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_column_index;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_column_offset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_index,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_column_index);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_column_offset") < 0)) __PYX_ERR(0, 5269, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_column_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_column_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5269, __pyx_L3_error)
    } else {
      __pyx_v_column_index = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_column_offset", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5269, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.get_column_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_296get_column_offset(__pyx_self, __pyx_v_column_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_296get_column_offset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_column_offset", 0);

  /* "imgui/core.pyx":5286
 *         float GetColumnOffset(int column_index = -1)
 *     """
 *     return cimgui.GetColumnOffset(column_index)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColumnOffset(__pyx_v_column_index);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5286, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5269
 * 
 * 
 * def get_column_offset(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Returns position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column, otherwise 0 to
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_column_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5289
 * 
 * 
 * def set_column_offset(int column_index, float offset_x):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_299set_column_offset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_298set_column_offset[] = "set_column_offset(int column_index, float offset_x)\nSet the position of column line (in pixels, from the left side of the\n    contents region). Pass -1 to use current column.\n\n    For a complete example see :func:`columns()`.\n\n    Args:\n        column_index (int): index of the column to get the offset for.\n        offset_x (float): offset in pixels.\n\n    .. wraps::\n        void SetColumnOffset(int column_index, float offset_x)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_299set_column_offset = {"set_column_offset", (PyCFunction)__pyx_pw_5imgui_4core_299set_column_offset, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_298set_column_offset};
static PyObject *__pyx_pw_5imgui_4core_299set_column_offset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_column_index;
  float __pyx_v_offset_x;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_column_offset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_index,&__pyx_n_s_offset_x,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_column_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_offset_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_column_offset", 1, 2, 2, 1); __PYX_ERR(0, 5289, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_column_offset") < 0)) __PYX_ERR(0, 5289, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_column_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_column_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5289, __pyx_L3_error)
    __pyx_v_offset_x = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_offset_x == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 5289, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_column_offset", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5289, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.set_column_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_298set_column_offset(__pyx_self, __pyx_v_column_index, __pyx_v_offset_x);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_298set_column_offset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index, float __pyx_v_offset_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_column_offset", 0);

  /* "imgui/core.pyx":5302
 *         void SetColumnOffset(int column_index, float offset_x)
 *     """
 *     cimgui.SetColumnOffset(column_index, offset_x)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::SetColumnOffset(__pyx_v_column_index, __pyx_v_offset_x);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5302, __pyx_L1_error)
  }

  /* "imgui/core.pyx":5289
 * 
 * 
 * def set_column_offset(int column_index, float offset_x):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.set_column_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5305
 * 
 * 
 * def get_column_width(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Return the column width.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_301get_column_width(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_300get_column_width[] = "get_column_width(int column_index=-1)\nReturn the column width.\n\n    For a complete example see :func:`columns()`.\n\n    Args:\n        column_index (int): index of the column to get the width for.\n\n    .. wraps::\n        void GetColumnWidth(int column_index = -1)\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_301get_column_width = {"get_column_width", (PyCFunction)__pyx_pw_5imgui_4core_301get_column_width, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_300get_column_width};
static PyObject *__pyx_pw_5imgui_4core_301get_column_width(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_column_index;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_column_width (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_index,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_column_index);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_column_width") < 0)) __PYX_ERR(0, 5305, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_column_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_column_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5305, __pyx_L3_error)
    } else {
      __pyx_v_column_index = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_column_width", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5305, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.get_column_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_300get_column_width(__pyx_self, __pyx_v_column_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_300get_column_width(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_column_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_column_width", 0);

  /* "imgui/core.pyx":5316
 *         void GetColumnWidth(int column_index = -1)
 *     """
 *     cimgui.GetColumnWidth(column_index)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::GetColumnWidth(__pyx_v_column_index);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5316, __pyx_L1_error)
  }

  /* "imgui/core.pyx":5305
 * 
 * 
 * def get_column_width(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Return the column width.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.get_column_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5319
 * 
 * 
 * def get_columns_count():             # <<<<<<<<<<<<<<
 *     """Get count of the columns in the current table.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_303get_columns_count(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_302get_columns_count[] = "get_columns_count()\nGet count of the columns in the current table.\n\n    For a complete example see :func:`columns()`.\n\n    Returns:\n        int: columns count.\n\n    .. wraps::\n        int GetColumnsCount()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_303get_columns_count = {"get_columns_count", (PyCFunction)__pyx_pw_5imgui_4core_303get_columns_count, METH_NOARGS, __pyx_doc_5imgui_4core_302get_columns_count};
static PyObject *__pyx_pw_5imgui_4core_303get_columns_count(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_columns_count (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_302get_columns_count(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_302get_columns_count(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_columns_count", 0);

  /* "imgui/core.pyx":5330
 *         int GetColumnsCount()
 *     """
 *     return cimgui.GetColumnsCount()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ImGui::GetColumnsCount();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5330, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5319
 * 
 * 
 * def get_columns_count():             # <<<<<<<<<<<<<<
 *     """Get count of the columns in the current table.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("imgui.core.get_columns_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5333
 * 
 * 
 * def begin_group():             # <<<<<<<<<<<<<<
 *     """Start item group and lock its horizontal starting position.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_305begin_group(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_304begin_group[] = "begin_group()\nStart item group and lock its horizontal starting position.\n\n    Captures group bounding box into one \"item\". Thanks to this you can use\n    :any:`is_item_hovered()` or layout primitives such as :any:`same_line()`\n    on whole group, etc.\n\n    .. visual-example::\n        :auto_layout:\n        :width: 500\n\n        imgui.begin(\"Example: item groups\")\n\n        imgui.begin_group()\n        imgui.text(\"First group (buttons):\")\n        imgui.button(\"Button A\")\n        imgui.button(\"Button B\")\n        imgui.end_group()\n\n        imgui.same_line(spacing=50)\n\n        imgui.begin_group()\n        imgui.text(\"Second group (text and bullet texts):\")\n        imgui.bullet_text(\"Bullet A\")\n        imgui.bullet_text(\"Bullet B\")\n        imgui.end_group()\n\n        imgui.end()\n\n    .. wraps::\n        void BeginGroup()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_305begin_group = {"begin_group", (PyCFunction)__pyx_pw_5imgui_4core_305begin_group, METH_NOARGS, __pyx_doc_5imgui_4core_304begin_group};
static PyObject *__pyx_pw_5imgui_4core_305begin_group(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_group (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_304begin_group(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_304begin_group(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_group", 0);

  /* "imgui/core.pyx":5365
 *         void BeginGroup()
 *     """
 *     cimgui.BeginGroup()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    ImGui::BeginGroup();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5365, __pyx_L1_error)
  }

  /* "imgui/core.pyx":5333
 * 
 * 
 * def begin_group():             # <<<<<<<<<<<<<<
 *     """Start item group and lock its horizontal starting position.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.begin_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5368
 * 
 * 
 * def end_group():             # <<<<<<<<<<<<<<
 *     """End group (see: :any:`begin_group`).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_307end_group(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_306end_group[] = "end_group()\nEnd group (see: :any:`begin_group`).\n\n    .. wraps::\n        void EndGroup()\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_307end_group = {"end_group", (PyCFunction)__pyx_pw_5imgui_4core_307end_group, METH_NOARGS, __pyx_doc_5imgui_4core_306end_group};
static PyObject *__pyx_pw_5imgui_4core_307end_group(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_group (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_306end_group(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_306end_group(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_group", 0);

  /* "imgui/core.pyx":5374
 *         void EndGroup()
 *     """
 *     cimgui.EndGroup()             # <<<<<<<<<<<<<<
 * 
 * # additional helpers
 */
  try {
    ImGui::EndGroup();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5374, __pyx_L1_error)
  }

  /* "imgui/core.pyx":5368
 * 
 * 
 * def end_group():             # <<<<<<<<<<<<<<
 *     """End group (see: :any:`begin_group`).
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.end_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5imgui_4core_310generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "imgui/core.pyx":5380
 * 
 * @contextmanager
 * def font(_Font font):             # <<<<<<<<<<<<<<
 *     """Use specified font in given context.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_309font(PyObject *__pyx_self, PyObject *__pyx_v_font); /*proto*/
static char __pyx_doc_5imgui_4core_308font[] = "font(_Font font)\nUse specified font in given context.\n\n    Example:\n\n    .. code-block: python\n\n        ...\n        font_extra = io.fonts.add_font_from_file_ttf(\n            \"CODE2000.TTF\", 30, io.fonts.get_glyph_ranges_latin()\n        )\n        ...\n\n        # later in application loop\n        while True:\n            ...\n            with imgui.font(font_extra):\n                imgui.text(\"My text with custom font\")\n            ...\n\n    Args:\n        font (_Font): font object retrieved from :any:`add_font_from_file_ttf`.\n    ";
static PyMethodDef __pyx_mdef_5imgui_4core_309font = {"font", (PyCFunction)__pyx_pw_5imgui_4core_309font, METH_O, __pyx_doc_5imgui_4core_308font};
static PyObject *__pyx_pw_5imgui_4core_309font(PyObject *__pyx_self, PyObject *__pyx_v_font) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("font (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_font), __pyx_ptype_5imgui_4core__Font, 1, "font", 0))) __PYX_ERR(0, 5380, __pyx_L1_error)
  __pyx_r = __pyx_pf_5imgui_4core_308font(__pyx_self, ((struct __pyx_obj_5imgui_4core__Font *)__pyx_v_font));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_308font(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5imgui_4core__Font *__pyx_v_font) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct__font *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("font", 0);
  __pyx_cur_scope = (struct __pyx_obj_5imgui_4core___pyx_scope_struct__font *)__pyx_tp_new_5imgui_4core___pyx_scope_struct__font(__pyx_ptype_5imgui_4core___pyx_scope_struct__font, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct__font *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 5380, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_font = __pyx_v_font;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_font);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_font);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5imgui_4core_310generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_font, __pyx_n_s_font, __pyx_n_s_imgui_core); if (unlikely(!gen)) __PYX_ERR(0, 5380, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.font", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5imgui_4core_310generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5imgui_4core___pyx_scope_struct__font *__pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct__font *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 5380, __pyx_L1_error)

  /* "imgui/core.pyx":5403
 *         font (_Font): font object retrieved from :any:`add_font_from_file_ttf`.
 *     """
 *     push_font(font)             # <<<<<<<<<<<<<<
 *     yield
 *     pop_font()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_push_font); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_cur_scope->__pyx_v_font)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, ((PyObject *)__pyx_cur_scope->__pyx_v_font)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5403, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, ((PyObject *)__pyx_cur_scope->__pyx_v_font)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5403, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_font));
      __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_font));
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_cur_scope->__pyx_v_font));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5404
 *     """
 *     push_font(font)
 *     yield             # <<<<<<<<<<<<<<
 *     pop_font()
 * 
 */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 5404, __pyx_L1_error)

  /* "imgui/core.pyx":5405
 *     push_font(font)
 *     yield
 *     pop_font()             # <<<<<<<<<<<<<<
 * 
 * @contextmanager
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pop_font); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5405, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5405, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "imgui/core.pyx":5380
 * 
 * @contextmanager
 * def font(_Font font):             # <<<<<<<<<<<<<<
 *     """Use specified font in given context.
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("font", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5imgui_4core_313generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "imgui/core.pyx":5408
 * 
 * @contextmanager
 * def styled(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_312styled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_311styled[] = "styled(ImGuiStyleVar variable, value)";
static PyMethodDef __pyx_mdef_5imgui_4core_312styled = {"styled", (PyCFunction)__pyx_pw_5imgui_4core_312styled, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_311styled};
static PyObject *__pyx_pw_5imgui_4core_312styled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  ImGuiStyleVar __pyx_v_variable;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("styled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variable)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("styled", 1, 2, 2, 1); __PYX_ERR(0, 5408, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "styled") < 0)) __PYX_ERR(0, 5408, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_variable = __Pyx_PyInt_As_ImGuiStyleVar(values[0]); if (unlikely((__pyx_v_variable == ((ImGuiStyleVar)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5408, __pyx_L3_error)
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("styled", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 5408, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imgui.core.styled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imgui_4core_311styled(__pyx_self, __pyx_v_variable, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_311styled(CYTHON_UNUSED PyObject *__pyx_self, ImGuiStyleVar __pyx_v_variable, PyObject *__pyx_v_value) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("styled", 0);
  __pyx_cur_scope = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled *)__pyx_tp_new_5imgui_4core___pyx_scope_struct_1_styled(__pyx_ptype_5imgui_4core___pyx_scope_struct_1_styled, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 5408, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_variable = __pyx_v_variable;
  __pyx_cur_scope->__pyx_v_value = __pyx_v_value;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_value);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_value);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5imgui_4core_313generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_styled, __pyx_n_s_styled, __pyx_n_s_imgui_core); if (unlikely(!gen)) __PYX_ERR(0, 5408, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.styled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5imgui_4core_313generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled *__pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  struct __pyx_opt_args_5imgui_4core_pop_style_var __pyx_t_3;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 5408, __pyx_L1_error)

  /* "imgui/core.pyx":5411
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 *     count = push_style_var(variable, value)             # <<<<<<<<<<<<<<
 *     yield
 *     pop_style_var(count)
 */
  __pyx_t_1 = __pyx_f_5imgui_4core_push_style_var(__pyx_cur_scope->__pyx_v_variable, __pyx_cur_scope->__pyx_v_value, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_count = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":5412
 *     #       anything because IMGUI may simply skip pushing
 *     count = push_style_var(variable, value)
 *     yield             # <<<<<<<<<<<<<<
 *     pop_style_var(count)
 * 
 */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 5412, __pyx_L1_error)

  /* "imgui/core.pyx":5413
 *     count = push_style_var(variable, value)
 *     yield
 *     pop_style_var(count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_cur_scope->__pyx_v_count); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5413, __pyx_L1_error)
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.count = __pyx_t_2;
  __pyx_t_1 = __pyx_f_5imgui_4core_pop_style_var(0, &__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "imgui/core.pyx":5408
 * 
 * @contextmanager
 * def styled(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("styled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5imgui_4core_316generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "imgui/core.pyx":5417
 * 
 * @contextmanager
 * def istyled(*variables_and_values):             # <<<<<<<<<<<<<<
 *     # todo: rename to nstyled?
 *     count = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_315istyled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imgui_4core_314istyled[] = "istyled(*variables_and_values)";
static PyMethodDef __pyx_mdef_5imgui_4core_315istyled = {"istyled", (PyCFunction)__pyx_pw_5imgui_4core_315istyled, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_314istyled};
static PyObject *__pyx_pw_5imgui_4core_315istyled(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_variables_and_values = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("istyled (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "istyled", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_variables_and_values = __pyx_args;
  __pyx_r = __pyx_pf_5imgui_4core_314istyled(__pyx_self, __pyx_v_variables_and_values);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_variables_and_values);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_314istyled(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_variables_and_values) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("istyled", 0);
  __pyx_cur_scope = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled *)__pyx_tp_new_5imgui_4core___pyx_scope_struct_2_istyled(__pyx_ptype_5imgui_4core___pyx_scope_struct_2_istyled, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 5417, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_variables_and_values = __pyx_v_variables_and_values;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_variables_and_values);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_variables_and_values);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5imgui_4core_316generator2, (PyObject *) __pyx_cur_scope, __pyx_n_s_istyled, __pyx_n_s_istyled, __pyx_n_s_imgui_core); if (unlikely(!gen)) __PYX_ERR(0, 5417, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("imgui.core.istyled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5imgui_4core_316generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled *__pyx_cur_scope = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_t_13;
  ImGuiStyleVar __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_t_21;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L18_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 5417, __pyx_L1_error)

  /* "imgui/core.pyx":5419
 * def istyled(*variables_and_values):
 *     # todo: rename to nstyled?
 *     count = 0             # <<<<<<<<<<<<<<
 *     iterator = iter(variables_and_values)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_cur_scope->__pyx_v_count = __pyx_int_0;

  /* "imgui/core.pyx":5420
 *     # todo: rename to nstyled?
 *     count = 0
 *     iterator = iter(variables_and_values)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
  __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_variables_and_values); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_iterator = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imgui/core.pyx":5422
 *     iterator = iter(variables_and_values)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # note: this is a trick that allows us convert flat list to pairs
 *         for var, val in izip_longest(iterator, iterator, fillvalue=None):
 */
  /*try:*/ {
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      /*try:*/ {

        /* "imgui/core.pyx":5424
 *     try:
 *         # note: this is a trick that allows us convert flat list to pairs
 *         for var, val in izip_longest(iterator, iterator, fillvalue=None):             # <<<<<<<<<<<<<<
 *             # note: since we group into pairs it is impossible to have
 *             #       var equal to None
 */
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_izip_longest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5424, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 5424, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_iterator);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_iterator);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_cur_scope->__pyx_v_iterator);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_iterator);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_iterator);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_cur_scope->__pyx_v_iterator);
        __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5424, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_fillvalue, Py_None) < 0) __PYX_ERR(0, 5424, __pyx_L7_error)
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5424, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
          __pyx_t_6 = __pyx_t_7; __Pyx_INCREF(__pyx_t_6); __pyx_t_8 = 0;
          __pyx_t_9 = NULL;
        } else {
          __pyx_t_8 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5424, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 5424, __pyx_L7_error)
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        for (;;) {
          if (likely(!__pyx_t_9)) {
            if (likely(PyList_CheckExact(__pyx_t_6))) {
              if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_7 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 5424, __pyx_L7_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5424, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            } else {
              if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 5424, __pyx_L7_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5424, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            }
          } else {
            __pyx_t_7 = __pyx_t_9(__pyx_t_6);
            if (unlikely(!__pyx_t_7)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 5424, __pyx_L7_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_7);
          }
          if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
            PyObject* sequence = __pyx_t_7;
            #if !CYTHON_COMPILING_IN_PYPY
            Py_ssize_t size = Py_SIZE(sequence);
            #else
            Py_ssize_t size = PySequence_Size(sequence);
            #endif
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 5424, __pyx_L7_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_1);
            #else
            __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 5424, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5424, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_10 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 5424, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
            index = 0; __pyx_t_5 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_5)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_5);
            index = 1; __pyx_t_1 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_1)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_1);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(0, 5424, __pyx_L7_error)
            __pyx_t_11 = NULL;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L16_unpacking_done;
            __pyx_L15_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_11 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 5424, __pyx_L7_error)
            __pyx_L16_unpacking_done:;
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_var);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_var, __pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_5);
          __pyx_t_5 = 0;
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_val);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_val, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "imgui/core.pyx":5427
 *             # note: since we group into pairs it is impossible to have
 *             #       var equal to None
 *             if val is not None:             # <<<<<<<<<<<<<<
 *                 count += push_style_var(var, val)
 *             else:
 */
          __pyx_t_12 = (__pyx_cur_scope->__pyx_v_val != Py_None);
          __pyx_t_13 = (__pyx_t_12 != 0);
          if (__pyx_t_13) {

            /* "imgui/core.pyx":5428
 *             #       var equal to None
 *             if val is not None:
 *                 count += push_style_var(var, val)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(
 */
            __pyx_t_14 = __Pyx_PyInt_As_ImGuiStyleVar(__pyx_cur_scope->__pyx_v_var); if (unlikely((__pyx_t_14 == ((ImGuiStyleVar)-1)) && PyErr_Occurred())) __PYX_ERR(0, 5428, __pyx_L7_error)
            __pyx_t_7 = __pyx_f_5imgui_4core_push_style_var(__pyx_t_14, __pyx_cur_scope->__pyx_v_val, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5428, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_cur_scope->__pyx_v_count, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5428, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_count);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_count, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;

            /* "imgui/core.pyx":5427
 *             # note: since we group into pairs it is impossible to have
 *             #       var equal to None
 *             if val is not None:             # <<<<<<<<<<<<<<
 *                 count += push_style_var(var, val)
 *             else:
 */
            goto __pyx_L17;
          }

          /* "imgui/core.pyx":5430
 *                 count += push_style_var(var, val)
 *             else:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "Unsufficient style info: {} variable lacks a value"
 *                     "".format(var)
 */
          /*else*/ {

            /* "imgui/core.pyx":5432
 *                 raise ValueError(
 *                     "Unsufficient style info: {} variable lacks a value"
 *                     "".format(var)             # <<<<<<<<<<<<<<
 *                 )
 *     except:
 */
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unsufficient_style_info_variable, __pyx_n_s_format); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5432, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_7, function);
              }
            }
            if (!__pyx_t_5) {
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_cur_scope->__pyx_v_var); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5432, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_1);
            } else {
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_7)) {
                PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_var};
                __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5432, __pyx_L7_error)
                __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_GOTREF(__pyx_t_1);
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
                PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_var};
                __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5432, __pyx_L7_error)
                __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_GOTREF(__pyx_t_1);
              } else
              #endif
              {
                __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 5432, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5); __pyx_t_5 = NULL;
                __Pyx_INCREF(__pyx_cur_scope->__pyx_v_var);
                __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_var);
                PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_cur_scope->__pyx_v_var);
                __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5432, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              }
            }
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "imgui/core.pyx":5430
 *                 count += push_style_var(var, val)
 *             else:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "Unsufficient style info: {} variable lacks a value"
 *                     "".format(var)
 */
            __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5430, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5430, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_Raise(__pyx_t_1, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __PYX_ERR(0, 5430, __pyx_L7_error)
          }
          __pyx_L17:;

          /* "imgui/core.pyx":5424
 *     try:
 *         # note: this is a trick that allows us convert flat list to pairs
 *         for var, val in izip_longest(iterator, iterator, fillvalue=None):             # <<<<<<<<<<<<<<
 *             # note: since we group into pairs it is impossible to have
 *             #       var equal to None
 */
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "imgui/core.pyx":5422
 *     iterator = iter(variables_and_values)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # note: this is a trick that allows us convert flat list to pairs
 *         for var, val in izip_longest(iterator, iterator, fillvalue=None):
 */
      }

      /* "imgui/core.pyx":5437
 *         raise
 *     else:
 *         yield             # <<<<<<<<<<<<<<
 * 
 *     finally:
 */
      /*else:*/ {
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
        __Pyx_XGIVEREF(__pyx_t_3);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_t_4);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L18_resume_from_yield:;
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_3);
        __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_4);
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 5437, __pyx_L9_except_error)
      }
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L12_try_end;
      __pyx_L7_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "imgui/core.pyx":5434
 *                     "".format(var)
 *                 )
 *     except:             # <<<<<<<<<<<<<<
 *         raise
 *     else:
 */
      /*except:*/ {
        __Pyx_AddTraceback("imgui.core.istyled", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_1, &__pyx_t_7) < 0) __PYX_ERR(0, 5434, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_7);

        /* "imgui/core.pyx":5435
 *                 )
 *     except:
 *         raise             # <<<<<<<<<<<<<<
 *     else:
 *         yield
 */
        __Pyx_GIVEREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_1);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_1, __pyx_t_7);
        __pyx_t_6 = 0; __pyx_t_1 = 0; __pyx_t_7 = 0; 
        __PYX_ERR(0, 5435, __pyx_L9_except_error)
      }
      __pyx_L9_except_error:;

      /* "imgui/core.pyx":5422
 *     iterator = iter(variables_and_values)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # note: this is a trick that allows us convert flat list to pairs
 *         for var, val in izip_longest(iterator, iterator, fillvalue=None):
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      goto __pyx_L5_error;
      __pyx_L12_try_end:;
    }
  }

  /* "imgui/core.pyx":5441
 *     finally:
 *         # perf: short wiring despite we have a wrapper for this
 *         cimgui.PopStyleVar(count)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_cur_scope->__pyx_v_count); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5441, __pyx_L1_error)
      try {
        ImGui::PopStyleVar(__pyx_t_15);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 5441, __pyx_L1_error)
      }
      goto __pyx_L6;
    }
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __pyx_L5_error:;
      __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_4, &__pyx_t_3, &__pyx_t_2) < 0)) __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_3, &__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __pyx_t_15 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
      {
        __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_cur_scope->__pyx_v_count); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 5441, __pyx_L22_error)
        try {
          ImGui::PopStyleVar(__pyx_t_21);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 5441, __pyx_L22_error)
        }
      }
      __Pyx_PyThreadState_assign
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
      }
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_ErrRestore(__pyx_t_4, __pyx_t_3, __pyx_t_2);
      __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
      __pyx_lineno = __pyx_t_15; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
      goto __pyx_L1_error;
      __pyx_L22_error:;
      __Pyx_PyThreadState_assign
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L6:;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "imgui/core.pyx":5417
 * 
 * @contextmanager
 * def istyled(*variables_and_values):             # <<<<<<<<<<<<<<
 *     # todo: rename to nstyled?
 *     count = 0
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("istyled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5444
 * 
 * 
 * def vertex_buffer_vertex_pos_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_318vertex_buffer_vertex_pos_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_317vertex_buffer_vertex_pos_offset[] = "vertex_buffer_vertex_pos_offset()";
static PyMethodDef __pyx_mdef_5imgui_4core_318vertex_buffer_vertex_pos_offset = {"vertex_buffer_vertex_pos_offset", (PyCFunction)__pyx_pw_5imgui_4core_318vertex_buffer_vertex_pos_offset, METH_NOARGS, __pyx_doc_5imgui_4core_317vertex_buffer_vertex_pos_offset};
static PyObject *__pyx_pw_5imgui_4core_318vertex_buffer_vertex_pos_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("vertex_buffer_vertex_pos_offset (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_317vertex_buffer_vertex_pos_offset(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_317vertex_buffer_vertex_pos_offset(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("vertex_buffer_vertex_pos_offset", 0);

  /* "imgui/core.pyx":5445
 * 
 * def vertex_buffer_vertex_pos_offset():
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos             # <<<<<<<<<<<<<<
 * 
 * def vertex_buffer_vertex_uv_offset():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)((size_t)(&((ImDrawVert *)NULL)->pos)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5444
 * 
 * 
 * def vertex_buffer_vertex_pos_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.vertex_buffer_vertex_pos_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5447
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 * def vertex_buffer_vertex_uv_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_320vertex_buffer_vertex_uv_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_319vertex_buffer_vertex_uv_offset[] = "vertex_buffer_vertex_uv_offset()";
static PyMethodDef __pyx_mdef_5imgui_4core_320vertex_buffer_vertex_uv_offset = {"vertex_buffer_vertex_uv_offset", (PyCFunction)__pyx_pw_5imgui_4core_320vertex_buffer_vertex_uv_offset, METH_NOARGS, __pyx_doc_5imgui_4core_319vertex_buffer_vertex_uv_offset};
static PyObject *__pyx_pw_5imgui_4core_320vertex_buffer_vertex_uv_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("vertex_buffer_vertex_uv_offset (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_319vertex_buffer_vertex_uv_offset(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_319vertex_buffer_vertex_uv_offset(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("vertex_buffer_vertex_uv_offset", 0);

  /* "imgui/core.pyx":5448
 * 
 * def vertex_buffer_vertex_uv_offset():
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv             # <<<<<<<<<<<<<<
 * 
 * def vertex_buffer_vertex_col_offset():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)((size_t)(&((ImDrawVert *)NULL)->uv)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5447
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 * def vertex_buffer_vertex_uv_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.vertex_buffer_vertex_uv_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5450
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 * def vertex_buffer_vertex_col_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_322vertex_buffer_vertex_col_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_321vertex_buffer_vertex_col_offset[] = "vertex_buffer_vertex_col_offset()";
static PyMethodDef __pyx_mdef_5imgui_4core_322vertex_buffer_vertex_col_offset = {"vertex_buffer_vertex_col_offset", (PyCFunction)__pyx_pw_5imgui_4core_322vertex_buffer_vertex_col_offset, METH_NOARGS, __pyx_doc_5imgui_4core_321vertex_buffer_vertex_col_offset};
static PyObject *__pyx_pw_5imgui_4core_322vertex_buffer_vertex_col_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("vertex_buffer_vertex_col_offset (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_321vertex_buffer_vertex_col_offset(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_321vertex_buffer_vertex_col_offset(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("vertex_buffer_vertex_col_offset", 0);

  /* "imgui/core.pyx":5451
 * 
 * def vertex_buffer_vertex_col_offset():
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col             # <<<<<<<<<<<<<<
 * 
 * def vertex_buffer_vertex_size():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)((size_t)(&((ImDrawVert *)NULL)->col)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5450
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 * def vertex_buffer_vertex_col_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.vertex_buffer_vertex_col_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5453
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 * def vertex_buffer_vertex_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawVert)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_324vertex_buffer_vertex_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_323vertex_buffer_vertex_size[] = "vertex_buffer_vertex_size()";
static PyMethodDef __pyx_mdef_5imgui_4core_324vertex_buffer_vertex_size = {"vertex_buffer_vertex_size", (PyCFunction)__pyx_pw_5imgui_4core_324vertex_buffer_vertex_size, METH_NOARGS, __pyx_doc_5imgui_4core_323vertex_buffer_vertex_size};
static PyObject *__pyx_pw_5imgui_4core_324vertex_buffer_vertex_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("vertex_buffer_vertex_size (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_323vertex_buffer_vertex_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_323vertex_buffer_vertex_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("vertex_buffer_vertex_size", 0);

  /* "imgui/core.pyx":5454
 * 
 * def vertex_buffer_vertex_size():
 *     return sizeof(cimgui.ImDrawVert)             # <<<<<<<<<<<<<<
 * 
 * def index_buffer_index_size():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((sizeof(ImDrawVert))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5453
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 * def vertex_buffer_vertex_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawVert)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.vertex_buffer_vertex_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imgui/core.pyx":5456
 *     return sizeof(cimgui.ImDrawVert)
 * 
 * def index_buffer_index_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawIdx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imgui_4core_326index_buffer_index_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5imgui_4core_325index_buffer_index_size[] = "index_buffer_index_size()";
static PyMethodDef __pyx_mdef_5imgui_4core_326index_buffer_index_size = {"index_buffer_index_size", (PyCFunction)__pyx_pw_5imgui_4core_326index_buffer_index_size, METH_NOARGS, __pyx_doc_5imgui_4core_325index_buffer_index_size};
static PyObject *__pyx_pw_5imgui_4core_326index_buffer_index_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("index_buffer_index_size (wrapper)", 0);
  __pyx_r = __pyx_pf_5imgui_4core_325index_buffer_index_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imgui_4core_325index_buffer_index_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("index_buffer_index_size", 0);

  /* "imgui/core.pyx":5457
 * 
 * def index_buffer_index_size():
 *     return sizeof(cimgui.ImDrawIdx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((sizeof(ImDrawIdx))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "imgui/core.pyx":5456
 *     return sizeof(cimgui.ImDrawVert)
 * 
 * def index_buffer_index_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawIdx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("imgui.core.index_buffer_index_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":120
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(1, 120, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(1, 120, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 120, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 120, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 121, __pyx_L3_error)
    } else {

      /* "View.MemoryView":121
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 120, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(1, 120, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(1, 120, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":120
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":127
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 127, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(1, 127, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":128
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":130
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":131
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 131, __pyx_L1_error)

    /* "View.MemoryView":130
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":133
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":134
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 134, __pyx_L1_error)

    /* "View.MemoryView":133
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":136
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":137
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":136
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":138
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(1, 138, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "View.MemoryView":139
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 139, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_6;

  /* "View.MemoryView":142
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":143
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":145
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":146
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 146, __pyx_L1_error)

    /* "View.MemoryView":145
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":149
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_7 = 0;
  __pyx_t_5 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 149, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_dim = __pyx_t_8;
    __pyx_v_idx = __pyx_t_7;
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "View.MemoryView":150
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":151
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
      __pyx_t_3 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 151, __pyx_L1_error)

      /* "View.MemoryView":150
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":152
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":149
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "View.MemoryView":155
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 155, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":156
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":157
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":155
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":158
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 158, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":159
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":160
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":158
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":162
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 162, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":164
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":167
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":168
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 168, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":169
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":172
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":173
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":174
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 174, __pyx_L1_error)

      /* "View.MemoryView":173
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":176
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":177
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":178
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 178, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(1, 178, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_1; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "View.MemoryView":179
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":180
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":176
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":169
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":120
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":183
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "View.MemoryView":184
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":185
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 185, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":186
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":185
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":187
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 187, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":188
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":187
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":189
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":190
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 190, __pyx_L1_error)

    /* "View.MemoryView":189
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":191
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":192
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":193
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":194
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":195
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":196
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":197
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":198
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":200
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":201
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":200
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":203
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":205
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":183
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":209
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":210
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":211
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":210
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":212
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":213
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":214
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":213
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":216
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":212
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":217
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":209
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":220
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":221
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":220
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":224
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":225
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":226
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":224
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":229
 * 
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":230
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":229
 * 
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":232
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":233
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":232
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":235
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":236
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(1, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":235
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":240
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":244
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":245
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":244
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":247
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":248
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(1, 248, __pyx_L1_error)

    /* "View.MemoryView":247
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":249
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":251
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":240
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":277
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name_2,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 277, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 277, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":278
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":277
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":279
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":280
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":279
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = (self.name,)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  int __pyx_v_use_setstate;
  PyObject *__pyx_v_state = NULL;
  PyObject *__pyx_v__dict = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":4
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += _dict,
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":5
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += _dict,
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":6
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += _dict,             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":7
 *     if _dict is not None:
 *         state += _dict,
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":5
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += _dict,
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":9
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":10
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":11
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":10
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":13
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = (self.name,)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":294
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":296
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":300
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":302
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":303
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":302
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":305
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":294
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":341
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(1, 341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 341, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 341, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 341, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 341, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":342
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":343
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":344
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":345
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 345, __pyx_L1_error)

    /* "View.MemoryView":346
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":347
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":348
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         global __pyx_memoryview_thread_locks_used
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":346
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":344
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":351
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":352
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 */
    __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

    /* "View.MemoryView":353
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 */
    __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

    /* "View.MemoryView":351
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  }

  /* "View.MemoryView":354
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":355
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 raise MemoryError
 */
    __pyx_v_self->lock = PyThread_allocate_lock();

    /* "View.MemoryView":356
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":357
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 357, __pyx_L1_error)

      /* "View.MemoryView":356
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    }

    /* "View.MemoryView":354
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  }

  /* "View.MemoryView":359
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":360
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":359
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":362
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L10:;

  /* "View.MemoryView":364
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":366
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":341
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":368
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyThread_type_lock __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":369
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":370
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":369
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 */
  }

  /* "View.MemoryView":374
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":375
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":376
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":377
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":378
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":380
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_5 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":379
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_5;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_6;

          /* "View.MemoryView":378
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":381
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":376
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":383
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":374
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":368
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":385
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":387
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":389
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 389, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 389, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 389, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 389, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 389, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 389, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":390
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 390, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(1, 390, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":389
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":392
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":385
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":395
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":396
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":397
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":396
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":399
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 399, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 399, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":402
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 402, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":403
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":402
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":405
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == NULL)) __PYX_ERR(1, 405, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":406
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":395
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":408
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":409
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_1 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 409, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 409, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":411
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 411, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":412
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_obj = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "View.MemoryView":413
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 413, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "View.MemoryView":414
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 414, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_1, __pyx_v_obj); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 414, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":413
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":416
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 416, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 416, __pyx_L1_error)
      __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_3), __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 416, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L4:;

    /* "View.MemoryView":411
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":418
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":408
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":420
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":421
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":422
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":423
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->flags | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 423, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":424
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 424, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":423
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 423, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 423, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":422
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "View.MemoryView":425
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(1, 425, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":426
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_None);
        __pyx_r = Py_None;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":422
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":421
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":428
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":420
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":430
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":434
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(1, 434, __pyx_L1_error)

  /* "View.MemoryView":435
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(1, 435, __pyx_L1_error)

  /* "View.MemoryView":436
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":434
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_4 = __pyx_memoryview_copy_contents((__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice))[0]), (__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice))[0]), __pyx_t_2, __pyx_t_3, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 434, __pyx_L1_error)

  /* "View.MemoryView":430
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":438
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":440
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_v_dst_slice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice));

  /* "View.MemoryView":447
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_1 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":448
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":449
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":450
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 450, __pyx_L1_error)

      /* "View.MemoryView":449
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":451
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":447
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":453
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":455
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":456
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":457
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":456
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":459
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 459, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":463
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_1 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":464
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_2 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 464, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "View.MemoryView":463
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":465
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":468
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __pyx_L6_error:;
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __pyx_t_3 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_5 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      __Pyx_PyThreadState_assign
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ErrRestore(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_5;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":438
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":470
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":471
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(1, 471, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":472
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":470
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":474
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":477
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":480
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":481
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":482
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 482, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 482, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 482, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 482, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 482, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 482, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":481
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":486
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":487
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 487, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":486
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":488
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "View.MemoryView":483
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 483, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9) < 0) __PYX_ERR(1, 483, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_9);

      /* "View.MemoryView":484
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 484, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 484, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":481
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":474
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":490
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":493
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":498
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":499
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 499, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":498
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":501
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 501, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 501, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 501, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":503
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(1, 503, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":504
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":503
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":504
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":490
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":507
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  char *__pyx_t_3;
  void *__pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "View.MemoryView":508
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":509
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_2;

    /* "View.MemoryView":508
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":511
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":513
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":514
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_2;

    /* "View.MemoryView":513
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":516
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L4:;

  /* "View.MemoryView":518
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":519
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_2;

    /* "View.MemoryView":518
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":521
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":523
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":524
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_3 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_3;

    /* "View.MemoryView":523
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":526
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":528
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_4 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":529
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_5 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_5;

  /* "View.MemoryView":530
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = 0
 */
  __pyx_t_6 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_6;

  /* "View.MemoryView":531
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 *         info.obj = self
 */
  __pyx_t_6 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_6;

  /* "View.MemoryView":532
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":533
 *         info.len = self.view.len
 *         info.readonly = 0
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":507
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape
 */

  /* function exit code */
  __pyx_r = 0;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":539
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":540
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(1, 540, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":541
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == 0)) __PYX_ERR(1, 541, __pyx_L1_error)

  /* "View.MemoryView":542
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":539
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":545
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":546
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":545
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":549
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":550
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 550, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":549
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":553
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":554
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":556
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 556, __pyx_L1_error)

    /* "View.MemoryView":554
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":558
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 558, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":553
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":561
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":562
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":563
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__57, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":562
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":565
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 565, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":561
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":568
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":569
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":568
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":572
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":573
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":572
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":576
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":577
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":576
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":580
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":581
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":582
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":584
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":585
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 585, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":587
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":581
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":589
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":580
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":591
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":592
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":593
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":592
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":595
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":591
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":597
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":598
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":599
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":598
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":597
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":601
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":602
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":601
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":605
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":608
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":609
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":605
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":611
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":614
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":615
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":611
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":617
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":619
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":621
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":622
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 622, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":627
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":617
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":629
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":631
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":633
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":634
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 634, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":639
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":629
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":643
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":644
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":645
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":646
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":643
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":649
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":650
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":649
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":652
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":657
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":658
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":657
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":660
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":662
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":663
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":664
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":665
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 665, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 665, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 665, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 665, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 665, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 665, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":666
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":667
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":668
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(1, 668, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 668, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__60);
            __Pyx_GIVEREF(__pyx_slice__60);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__60);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(1, 668, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":669
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":667
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":671
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__61); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(1, 671, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":672
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":666
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":674
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_1) {

        /* "View.MemoryView":675
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 675, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 675, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_11, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 675, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __PYX_ERR(1, 675, __pyx_L1_error)

        /* "View.MemoryView":674
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":677
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":678
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(1, 678, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":665
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":680
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(1, 680, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":681
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":682
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 682, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__62);
        __Pyx_GIVEREF(__pyx_slice__62);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__62);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(1, 682, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":681
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":684
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":652
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":686
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":687
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":688
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":689
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 689, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 689, __pyx_L1_error)

      /* "View.MemoryView":688
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":686
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":696
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":697
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":704
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst)));

  /* "View.MemoryView":708
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 708, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":710
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":711
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 711, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":712
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":710
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":714
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":715
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":721
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":722
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":727
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":728
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":732
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 732, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 732, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 732, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 732, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 732, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 732, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":733
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":737
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 737, __pyx_L1_error)

      /* "View.MemoryView":734
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(1, 734, __pyx_L1_error)

      /* "View.MemoryView":733
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":740
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":741
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":742
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":743
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":744
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":740
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":746
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 746, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 746, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 746, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":747
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 747, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 747, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 747, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":748
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 748, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 748, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 748, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":750
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":751
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":752
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":754
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(1, 754, __pyx_L1_error)

      /* "View.MemoryView":760
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":732
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":762
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":763
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":764
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 764, __pyx_L1_error) }

    /* "View.MemoryView":765
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 765, __pyx_L1_error) }

    /* "View.MemoryView":763
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 763, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":762
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":768
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":769
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":768
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 768, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":696
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":793
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":813
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":815
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":816
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":815
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":817
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":818
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(1, 818, __pyx_L1_error)

      /* "View.MemoryView":817
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":813
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":821
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":823
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":824
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(1, 824, __pyx_L1_error)

      /* "View.MemoryView":823
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":827
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":828
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":829
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":830
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":831
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":830
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":828
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":832
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":833
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":834
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":833
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":836
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":832
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":827
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":838
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":839
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":838
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":841
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":843
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":844
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":845
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":846
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":847
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":846
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":844
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":848
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":849
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":848
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":843
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":851
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":852
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":851
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":854
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":856
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":857
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":856
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":861
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":863
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":864
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":863
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":866
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":867
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":866
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":870
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":871
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":872
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":875
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":876
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":875
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":878
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":880
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":881
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":882
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":883
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":882
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":885
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":886
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(1, 885, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":881
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":888
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":880
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":890
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":793
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":896
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":898
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":899
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":902
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":903
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 903, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(1, 903, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":904
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":902
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":906
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":907
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":908
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":909
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":908
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":911
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":912
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":913
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":914
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 914, __pyx_L1_error)

      /* "View.MemoryView":913
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":911
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":916
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":917
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 917, __pyx_L1_error)

    /* "View.MemoryView":916
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":919
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":920
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":921
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":920
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":923
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":896
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":929
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;

  /* "View.MemoryView":930
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":932
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":933
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":937
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":938
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":939
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_4 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_4;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":940
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_4 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_4;

    /* "View.MemoryView":942
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_7 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "View.MemoryView":943
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_8 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(1, 943, __pyx_L1_error)

      /* "View.MemoryView":942
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":945
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":929
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":962
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":963
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":962
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":965
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":966
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":967
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":966
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":969
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":965
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":971
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":972
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":973
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == 0)) __PYX_ERR(1, 973, __pyx_L1_error)

    /* "View.MemoryView":972
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":975
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":971
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":978
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":979
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":978
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":985
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":993
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":994
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "View.MemoryView":993
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":999
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1001
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1002
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1004
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1005
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1007
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1008
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1009
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1010
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1011
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     result.flags = PyBUF_RECORDS
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1013
 *     Py_INCREF(Py_None)
 * 
 *     result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

  /* "View.MemoryView":1015
 *     result.flags = PyBUF_RECORDS
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1016
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1019
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1020
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1021
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1022
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1023
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L5_break;

      /* "View.MemoryView":1021
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L5_break:;

  /* "View.MemoryView":1025
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1026
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1027
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1027, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1029
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1030
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1032
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":985
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1035
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1038
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1039
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 1039, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1040
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1038
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1042
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1043
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1035
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1046
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1050
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1051
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1052
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1054
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1055
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1057
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_dim = __pyx_t_3;

    /* "View.MemoryView":1058
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1059
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1060
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_4 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_4 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_4;
  }

  /* "View.MemoryView":1046
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1066
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1067
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1070
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1077
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1078
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1079
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1077
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1081
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1082
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1084
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1086
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1070
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1092
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1093
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1094
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1093
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1096
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1092
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1099
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1104
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1105
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1107
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1L; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1108
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1109
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1110
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1108
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1112
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1113
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1114
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1115
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1113
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1117
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1118
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1117
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1120
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1099
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1123
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;

  /* "View.MemoryView":1130
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1131
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1132
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1133
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1135
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1136
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1137
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1136
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1138
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent));

      /* "View.MemoryView":1136
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1140
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "View.MemoryView":1141
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize);

        /* "View.MemoryView":1142
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1143
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1135
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1145
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":1146
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1150
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1151
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1123
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1153
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1156
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1153
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1160
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1163
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 *     cdef Py_ssize_t size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1165
 *     cdef Py_ssize_t size = src.memview.view.itemsize
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         size *= src.shape[i]
 * 
 */
  __pyx_t_2 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1166
 * 
 *     for i in range(ndim):
 *         size *= src.shape[i]             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * (__pyx_v_src->shape[__pyx_v_i]));
  }

  /* "View.MemoryView":1168
 *         size *= src.shape[i]
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1160
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1171
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1180
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1181
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_idx = __pyx_t_3;

      /* "View.MemoryView":1182
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1183
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1180
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1185
 *             stride = stride * shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1L; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1186
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1187
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1189
 *             stride = stride * shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1171
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1192
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;

  /* "View.MemoryView":1203
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1204
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1206
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1207
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1208
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(1, 1208, __pyx_L1_error)

    /* "View.MemoryView":1207
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1211
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1212
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1213
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "View.MemoryView":1214
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1215
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1217
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  __pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order);

  /* "View.MemoryView":1221
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "View.MemoryView":1222
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1223
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1222
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1225
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1226
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size);

    /* "View.MemoryView":1225
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1228
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1230
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1192
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1235
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1238
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1237
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(1, 1237, __pyx_L1_error)

  /* "View.MemoryView":1235
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1241
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1242
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1242, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1242, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1242, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 1242, __pyx_L1_error)

  /* "View.MemoryView":1241
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1245
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1246
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1247
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1247, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1247, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1247, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1247, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1247, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1247, __pyx_L1_error)

    /* "View.MemoryView":1246
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1249
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(1, 1249, __pyx_L1_error)
  }

  /* "View.MemoryView":1245
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1252
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;

  /* "View.MemoryView":1260
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1261
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1263
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1264
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1265
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1268
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1269
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1268
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1270
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1271
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1270
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1273
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1275
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_5; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1276
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1277
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1278
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1279
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1277
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1281
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_4 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 1281, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1276
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1283
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1284
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_4 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 1284, __pyx_L1_error)

      /* "View.MemoryView":1283
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1286
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1288
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1289
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1288
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1291
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_6 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_6 == NULL)) __PYX_ERR(1, 1291, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_6;

    /* "View.MemoryView":1292
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1286
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1294
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1297
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1298
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1297
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1299
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1300
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1299
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1302
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1304
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1305
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim));

      /* "View.MemoryView":1306
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1307
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1308
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1302
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1294
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1310
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (__pyx_t_7) {

    /* "View.MemoryView":1313
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == 0)) __PYX_ERR(1, 1313, __pyx_L1_error)

    /* "View.MemoryView":1314
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == 0)) __PYX_ERR(1, 1314, __pyx_L1_error)

    /* "View.MemoryView":1310
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1316
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1317
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1318
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1320
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1321
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1252
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1324
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "View.MemoryView":1328
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1330
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1L; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1331
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1332
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1333
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1335
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "View.MemoryView":1336
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1337
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1338
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1324
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1346
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1350
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1351
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1350
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1346
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1355
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1358
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1355
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1361
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1365
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "View.MemoryView":1366
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_3 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_3) {

      /* "View.MemoryView":1367
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_3 = (__pyx_v_inc != 0);
      if (__pyx_t_3) {

        /* "View.MemoryView":1368
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1367
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1370
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1366
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1372
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1373
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1375
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1361
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1381
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1384
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1385
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1387
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1381
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1391
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;

  /* "View.MemoryView":1395
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1396
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1398
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1399
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "View.MemoryView":1400
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize);

      /* "View.MemoryView":1401
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1398
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1403
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "View.MemoryView":1404
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1406
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1391
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v_PickleError = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":2
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError
 *         raise PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xb068931) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":3
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError             # <<<<<<<<<<<<<<
 *         raise PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     result = Enum.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":4
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError
 *         raise PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v_PickleError);
    __pyx_t_2 = __pyx_v_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 4, __pyx_L1_error)

    /* "(tree fragment)":2
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError
 *         raise PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":5
 *         from pickle import PickleError
 *         raise PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v___pyx_type);
      __Pyx_GIVEREF(__pyx_v___pyx_type);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v___pyx_type);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *         raise PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> result, __pyx_state)
 *     return result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":7
 *     result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return result
 * cdef __pyx_unpickle_Enum__set_state(Enum result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 7, __pyx_L1_error)
    __pyx_t_3 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *         raise PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> result, __pyx_state)
 *     return result
 */
  }

  /* "(tree fragment)":8
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> result, __pyx_state)
 *     return result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum result, tuple __pyx_state):
 *     result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_PickleError);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":9
 *         __pyx_unpickle_Enum__set_state(<Enum> result, __pyx_state)
 *     return result
 * cdef __pyx_unpickle_Enum__set_state(Enum result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     result.name = __pyx_state[0]
 *     if hasattr(result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":10
 *     return result
 * cdef __pyx_unpickle_Enum__set_state(Enum result, tuple __pyx_state):
 *     result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if hasattr(result, '__dict__'):
 *         result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_result->name);
  __Pyx_DECREF(__pyx_v_result->name);
  __pyx_v_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":11
 * cdef __pyx_unpickle_Enum__set_state(Enum result, tuple __pyx_state):
 *     result.name = __pyx_state[0]
 *     if hasattr(result, '__dict__'):             # <<<<<<<<<<<<<<
 *         result.__dict__.update(__pyx_state[1])
 */
  __pyx_t_2 = __Pyx_HasAttr(((PyObject *)__pyx_v_result), __pyx_n_s_dict); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":12
 *     result.name = __pyx_state[0]
 *     if hasattr(result, '__dict__'):
 *         result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_update); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 12, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":11
 * cdef __pyx_unpickle_Enum__set_state(Enum result, tuple __pyx_state):
 *     result.name = __pyx_state[0]
 *     if hasattr(result, '__dict__'):             # <<<<<<<<<<<<<<
 *         result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":9
 *         __pyx_unpickle_Enum__set_state(<Enum> result, __pyx_state)
 *     return result
 * cdef __pyx_unpickle_Enum__set_state(Enum result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     result.name = __pyx_state[0]
 *     if hasattr(result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5imgui_4core__DrawCmd __pyx_vtable_5imgui_4core__DrawCmd;

static PyObject *__pyx_tp_new_5imgui_4core__DrawCmd(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__DrawCmd *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__DrawCmd *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__DrawCmd;
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core__DrawCmd(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5imgui_4core_8_DrawCmd_texture_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8_DrawCmd_10texture_id_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_8_DrawCmd_clip_rect(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8_DrawCmd_9clip_rect_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_8_DrawCmd_elem_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8_DrawCmd_10elem_count_1__get__(o);
}

static PyMethodDef __pyx_methods_5imgui_4core__DrawCmd[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_8_DrawCmd_1__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_8_DrawCmd___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_8_DrawCmd_3__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_8_DrawCmd_2__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5imgui_4core__DrawCmd[] = {
  {(char *)"texture_id", __pyx_getprop_5imgui_4core_8_DrawCmd_texture_id, 0, (char *)0, 0},
  {(char *)"clip_rect", __pyx_getprop_5imgui_4core_8_DrawCmd_clip_rect, 0, (char *)0, 0},
  {(char *)"elem_count", __pyx_getprop_5imgui_4core_8_DrawCmd_elem_count, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core__DrawCmd = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._DrawCmd", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__DrawCmd), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__DrawCmd, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__DrawCmd, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5imgui_4core__DrawCmd, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__DrawCmd, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5imgui_4core__DrawList __pyx_vtable_5imgui_4core__DrawList;

static PyObject *__pyx_tp_new_5imgui_4core__DrawList(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__DrawList *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__DrawList *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__DrawList;
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core__DrawList(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawList_cmd_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawList_15cmd_buffer_size_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawList_cmd_buffer_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawList_15cmd_buffer_data_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawList_vtx_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawList_15vtx_buffer_size_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawList_vtx_buffer_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawList_15vtx_buffer_data_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawList_idx_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawList_15idx_buffer_size_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawList_idx_buffer_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawList_15idx_buffer_data_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawList_commands(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawList_8commands_1__get__(o);
}

static PyMethodDef __pyx_methods_5imgui_4core__DrawList[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawList_1__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_9_DrawList___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawList_3__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_9_DrawList_2__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5imgui_4core__DrawList[] = {
  {(char *)"cmd_buffer_size", __pyx_getprop_5imgui_4core_9_DrawList_cmd_buffer_size, 0, (char *)0, 0},
  {(char *)"cmd_buffer_data", __pyx_getprop_5imgui_4core_9_DrawList_cmd_buffer_data, 0, (char *)0, 0},
  {(char *)"vtx_buffer_size", __pyx_getprop_5imgui_4core_9_DrawList_vtx_buffer_size, 0, (char *)0, 0},
  {(char *)"vtx_buffer_data", __pyx_getprop_5imgui_4core_9_DrawList_vtx_buffer_data, 0, (char *)0, 0},
  {(char *)"idx_buffer_size", __pyx_getprop_5imgui_4core_9_DrawList_idx_buffer_size, 0, (char *)0, 0},
  {(char *)"idx_buffer_data", __pyx_getprop_5imgui_4core_9_DrawList_idx_buffer_data, 0, (char *)0, 0},
  {(char *)"commands", __pyx_getprop_5imgui_4core_9_DrawList_commands, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core__DrawList = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._DrawList", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__DrawList), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__DrawList, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__DrawList, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5imgui_4core__DrawList, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__DrawList, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5imgui_4core_GuiStyle(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core_GuiStyle *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core_GuiStyle *)o);
  new((void*)&(p->ref)) ImGuiStyle();
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core_GuiStyle(PyObject *o) {
  struct __pyx_obj_5imgui_4core_GuiStyle *p = (struct __pyx_obj_5imgui_4core_GuiStyle *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->ref);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_alpha(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_5alpha_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_alpha(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_5alpha_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_window_padding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_14window_padding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_window_padding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_14window_padding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_window_min_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_15window_min_size_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_window_min_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_15window_min_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_window_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_15window_rounding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_window_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_15window_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_child_window_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_21child_window_rounding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_child_window_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_21child_window_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_frame_padding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_13frame_padding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_frame_padding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_13frame_padding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_frame_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_14frame_rounding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_frame_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_14frame_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_item_spacing(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_12item_spacing_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_item_spacing(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_12item_spacing_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_item_inner_spacing(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_18item_inner_spacing_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_item_inner_spacing(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_18item_inner_spacing_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_touch_extra_padding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_19touch_extra_padding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_touch_extra_padding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_19touch_extra_padding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_indent_spacing(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_14indent_spacing_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_indent_spacing(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_14indent_spacing_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_columns_min_spacing(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_19columns_min_spacing_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_columns_min_spacing(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_19columns_min_spacing_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_scrollbar_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_14scrollbar_size_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_scrollbar_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_14scrollbar_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_scrollbar_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_18scrollbar_rounding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_scrollbar_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_18scrollbar_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_grab_min_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_13grab_min_size_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_grab_min_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_13grab_min_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_grab_rounding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_13grab_rounding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_grab_rounding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_13grab_rounding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_display_window_padding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_22display_window_padding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_display_window_padding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_22display_window_padding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_display_safe_area_padding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_25display_safe_area_padding_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_display_safe_area_padding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_25display_safe_area_padding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_anti_aliased_lines(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_18anti_aliased_lines_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_anti_aliased_lines(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_18anti_aliased_lines_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_anti_aliased_shapes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_19anti_aliased_shapes_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_anti_aliased_shapes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_19anti_aliased_shapes_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_8GuiStyle_curve_tessellation_tolerance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_8GuiStyle_curve_tessellation_tolerance(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_8GuiStyle_28curve_tessellation_tolerance_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5imgui_4core_GuiStyle[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_8GuiStyle_1__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_8GuiStyle___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_8GuiStyle_3__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_8GuiStyle_2__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5imgui_4core_GuiStyle[] = {
  {(char *)"alpha", __pyx_getprop_5imgui_4core_8GuiStyle_alpha, __pyx_setprop_5imgui_4core_8GuiStyle_alpha, (char *)"Global alpha blending parameter for windows\n\n        Returns:\n            float\n        ", 0},
  {(char *)"window_padding", __pyx_getprop_5imgui_4core_8GuiStyle_window_padding, __pyx_setprop_5imgui_4core_8GuiStyle_window_padding, (char *)0, 0},
  {(char *)"window_min_size", __pyx_getprop_5imgui_4core_8GuiStyle_window_min_size, __pyx_setprop_5imgui_4core_8GuiStyle_window_min_size, (char *)0, 0},
  {(char *)"window_rounding", __pyx_getprop_5imgui_4core_8GuiStyle_window_rounding, __pyx_setprop_5imgui_4core_8GuiStyle_window_rounding, (char *)0, 0},
  {(char *)"child_window_rounding", __pyx_getprop_5imgui_4core_8GuiStyle_child_window_rounding, __pyx_setprop_5imgui_4core_8GuiStyle_child_window_rounding, (char *)0, 0},
  {(char *)"frame_padding", __pyx_getprop_5imgui_4core_8GuiStyle_frame_padding, __pyx_setprop_5imgui_4core_8GuiStyle_frame_padding, (char *)0, 0},
  {(char *)"frame_rounding", __pyx_getprop_5imgui_4core_8GuiStyle_frame_rounding, __pyx_setprop_5imgui_4core_8GuiStyle_frame_rounding, (char *)0, 0},
  {(char *)"item_spacing", __pyx_getprop_5imgui_4core_8GuiStyle_item_spacing, __pyx_setprop_5imgui_4core_8GuiStyle_item_spacing, (char *)0, 0},
  {(char *)"item_inner_spacing", __pyx_getprop_5imgui_4core_8GuiStyle_item_inner_spacing, __pyx_setprop_5imgui_4core_8GuiStyle_item_inner_spacing, (char *)0, 0},
  {(char *)"touch_extra_padding", __pyx_getprop_5imgui_4core_8GuiStyle_touch_extra_padding, __pyx_setprop_5imgui_4core_8GuiStyle_touch_extra_padding, (char *)0, 0},
  {(char *)"indent_spacing", __pyx_getprop_5imgui_4core_8GuiStyle_indent_spacing, __pyx_setprop_5imgui_4core_8GuiStyle_indent_spacing, (char *)0, 0},
  {(char *)"columns_min_spacing", __pyx_getprop_5imgui_4core_8GuiStyle_columns_min_spacing, __pyx_setprop_5imgui_4core_8GuiStyle_columns_min_spacing, (char *)0, 0},
  {(char *)"scrollbar_size", __pyx_getprop_5imgui_4core_8GuiStyle_scrollbar_size, __pyx_setprop_5imgui_4core_8GuiStyle_scrollbar_size, (char *)0, 0},
  {(char *)"scrollbar_rounding", __pyx_getprop_5imgui_4core_8GuiStyle_scrollbar_rounding, __pyx_setprop_5imgui_4core_8GuiStyle_scrollbar_rounding, (char *)0, 0},
  {(char *)"grab_min_size", __pyx_getprop_5imgui_4core_8GuiStyle_grab_min_size, __pyx_setprop_5imgui_4core_8GuiStyle_grab_min_size, (char *)0, 0},
  {(char *)"grab_rounding", __pyx_getprop_5imgui_4core_8GuiStyle_grab_rounding, __pyx_setprop_5imgui_4core_8GuiStyle_grab_rounding, (char *)0, 0},
  {(char *)"display_window_padding", __pyx_getprop_5imgui_4core_8GuiStyle_display_window_padding, __pyx_setprop_5imgui_4core_8GuiStyle_display_window_padding, (char *)0, 0},
  {(char *)"display_safe_area_padding", __pyx_getprop_5imgui_4core_8GuiStyle_display_safe_area_padding, __pyx_setprop_5imgui_4core_8GuiStyle_display_safe_area_padding, (char *)0, 0},
  {(char *)"anti_aliased_lines", __pyx_getprop_5imgui_4core_8GuiStyle_anti_aliased_lines, __pyx_setprop_5imgui_4core_8GuiStyle_anti_aliased_lines, (char *)0, 0},
  {(char *)"anti_aliased_shapes", __pyx_getprop_5imgui_4core_8GuiStyle_anti_aliased_shapes, __pyx_setprop_5imgui_4core_8GuiStyle_anti_aliased_shapes, (char *)0, 0},
  {(char *)"curve_tessellation_tolerance", __pyx_getprop_5imgui_4core_8GuiStyle_curve_tessellation_tolerance, __pyx_setprop_5imgui_4core_8GuiStyle_curve_tessellation_tolerance, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core_GuiStyle = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.GuiStyle", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core_GuiStyle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core_GuiStyle, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Container for ImGui style information\n\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core_GuiStyle, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5imgui_4core_GuiStyle, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core_GuiStyle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5imgui_4core__DrawData __pyx_vtable_5imgui_4core__DrawData;

static PyObject *__pyx_tp_new_5imgui_4core__DrawData(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__DrawData *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__DrawData *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__DrawData;
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core__DrawData(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawData_valid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawData_5valid_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawData_cmd_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawData_9cmd_count_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawData_total_vtx_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawData_15total_vtx_count_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawData_total_idx_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawData_15total_idx_count_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_9_DrawData_commands_lists(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_9_DrawData_14commands_lists_1__get__(o);
}

static PyMethodDef __pyx_methods_5imgui_4core__DrawData[] = {
  {"_require_pointer", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawData_3_require_pointer, METH_NOARGS, __pyx_doc_5imgui_4core_9_DrawData_2_require_pointer},
  {"deindex_all_buffers", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawData_5deindex_all_buffers, METH_NOARGS, __pyx_doc_5imgui_4core_9_DrawData_4deindex_all_buffers},
  {"scale_clip_rects", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawData_7scale_clip_rects, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_9_DrawData_6scale_clip_rects},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawData_9__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_9_DrawData_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_9_DrawData_11__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_9_DrawData_10__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5imgui_4core__DrawData[] = {
  {(char *)"valid", __pyx_getprop_5imgui_4core_9_DrawData_valid, 0, (char *)0, 0},
  {(char *)"cmd_count", __pyx_getprop_5imgui_4core_9_DrawData_cmd_count, 0, (char *)0, 0},
  {(char *)"total_vtx_count", __pyx_getprop_5imgui_4core_9_DrawData_total_vtx_count, 0, (char *)0, 0},
  {(char *)"total_idx_count", __pyx_getprop_5imgui_4core_9_DrawData_total_idx_count, 0, (char *)0, 0},
  {(char *)"commands_lists", __pyx_getprop_5imgui_4core_9_DrawData_commands_lists, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core__DrawData = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._DrawData", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__DrawData), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__DrawData, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "_DrawData()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__DrawData, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5imgui_4core__DrawData, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5imgui_4core_9_DrawData_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__DrawData, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5imgui_4core__StaticGlyphRanges __pyx_vtable_5imgui_4core__StaticGlyphRanges;

static PyObject *__pyx_tp_new_5imgui_4core__StaticGlyphRanges(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__StaticGlyphRanges *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__StaticGlyphRanges *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__StaticGlyphRanges;
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core__StaticGlyphRanges(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5imgui_4core__StaticGlyphRanges[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_18_StaticGlyphRanges_1__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_18_StaticGlyphRanges___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_18_StaticGlyphRanges_3__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_18_StaticGlyphRanges_2__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core__StaticGlyphRanges = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._StaticGlyphRanges", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__StaticGlyphRanges), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__StaticGlyphRanges, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__StaticGlyphRanges, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__StaticGlyphRanges, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5imgui_4core__Font __pyx_vtable_5imgui_4core__Font;

static PyObject *__pyx_tp_new_5imgui_4core__Font(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__Font *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__Font *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__Font;
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core__Font(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5imgui_4core__Font[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_5_Font_1__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_5_Font___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_5_Font_3__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_5_Font_2__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core__Font = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._Font", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__Font), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__Font, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__Font, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__Font, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5imgui_4core__FontAtlas __pyx_vtable_5imgui_4core__FontAtlas;

static PyObject *__pyx_tp_new_5imgui_4core__FontAtlas(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__FontAtlas *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__FontAtlas *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__FontAtlas;
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core__FontAtlas(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5imgui_4core_10_FontAtlas_texture_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_10_FontAtlas_10texture_id_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_10_FontAtlas_texture_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_10_FontAtlas_10texture_id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5imgui_4core__FontAtlas[] = {
  {"_require_pointer", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_3_require_pointer, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_2_require_pointer},
  {"add_font_default", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_5add_font_default, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_4add_font_default},
  {"add_font_from_file_ttf", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_7add_font_from_file_ttf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_10_FontAtlas_6add_font_from_file_ttf},
  {"clear_tex_data", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_9clear_tex_data, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_8clear_tex_data},
  {"clear_input_data", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_11clear_input_data, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_10clear_input_data},
  {"clear_fonts", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_13clear_fonts, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_12clear_fonts},
  {"clear", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_15clear, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_14clear},
  {"get_glyph_ranges_default", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_17get_glyph_ranges_default, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_16get_glyph_ranges_default},
  {"get_glyph_ranges_korean", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_19get_glyph_ranges_korean, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_18get_glyph_ranges_korean},
  {"get_glyph_ranges_japanese", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_21get_glyph_ranges_japanese, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_20get_glyph_ranges_japanese},
  {"get_glyph_ranges_chinese", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_23get_glyph_ranges_chinese, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_22get_glyph_ranges_chinese},
  {"get_glyph_ranges_cyrillic", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_25get_glyph_ranges_cyrillic, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_24get_glyph_ranges_cyrillic},
  {"get_glyph_ranges_latin", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_27get_glyph_ranges_latin, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_26get_glyph_ranges_latin},
  {"get_tex_data_as_alpha8", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_29get_tex_data_as_alpha8, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_28get_tex_data_as_alpha8},
  {"get_tex_data_as_rgba32", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_31get_tex_data_as_rgba32, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_30get_tex_data_as_rgba32},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_33__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_10_FontAtlas_32__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_10_FontAtlas_35__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_10_FontAtlas_34__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5imgui_4core__FontAtlas[] = {
  {(char *)"texture_id", __pyx_getprop_5imgui_4core_10_FontAtlas_texture_id, __pyx_setprop_5imgui_4core_10_FontAtlas_texture_id, (char *)"\n        Note: difference in mapping (maps actual TexID and not TextureID)\n\n        Note: texture ID type is implementation dependent. It is usually\n        integer (at least for OpenGL).\n\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core__FontAtlas = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._FontAtlas", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__FontAtlas), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__FontAtlas, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "_FontAtlas()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__FontAtlas, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5imgui_4core__FontAtlas, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5imgui_4core_10_FontAtlas_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__FontAtlas, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5imgui_4core__IO __pyx_vtable_5imgui_4core__IO;

static PyObject *__pyx_tp_new_5imgui_4core__IO(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5imgui_4core__IO *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5imgui_4core__IO *)o);
  p->__pyx_vtab = __pyx_vtabptr_5imgui_4core__IO;
  p->_render_callback = Py_None; Py_INCREF(Py_None);
  p->_fonts = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core__IO(PyObject *o) {
  struct __pyx_obj_5imgui_4core__IO *p = (struct __pyx_obj_5imgui_4core__IO *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_render_callback);
  Py_CLEAR(p->_fonts);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5imgui_4core__IO(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5imgui_4core__IO *p = (struct __pyx_obj_5imgui_4core__IO *)o;
  if (p->_render_callback) {
    e = (*v)(p->_render_callback, a); if (e) return e;
  }
  if (p->_fonts) {
    e = (*v)(p->_fonts, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5imgui_4core__IO(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5imgui_4core__IO *p = (struct __pyx_obj_5imgui_4core__IO *)o;
  tmp = ((PyObject*)p->_render_callback);
  p->_render_callback = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_fonts);
  p->_fonts = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_display_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_12display_size_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_display_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_12display_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_delta_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_10delta_time_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_delta_time(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_10delta_time_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_ini_saving_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_15ini_saving_rate_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_ini_saving_rate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_15ini_saving_rate_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_log_file_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_13log_file_name_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_log_file_name(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_13log_file_name_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_double_click_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_23mouse_double_click_time_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_mouse_double_click_time(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_23mouse_double_click_time_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_double_click_max_distance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_31mouse_double_click_max_distance_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_mouse_double_click_max_distance(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_31mouse_double_click_max_distance_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_drag_threshold(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_20mouse_drag_threshold_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_mouse_drag_threshold(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_20mouse_drag_threshold_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_key_map(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_7key_map_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_key_repeat_delay(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_16key_repeat_delay_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_key_repeat_delay(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_16key_repeat_delay_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_key_repeat_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_15key_repeat_rate_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_key_repeat_rate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_15key_repeat_rate_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_fonts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_5fonts_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_font_global_scale(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_17font_global_scale_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_font_global_scale(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_17font_global_scale_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_font_allow_user_scaling(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_23font_allow_user_scaling_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_font_allow_user_scaling(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_23font_allow_user_scaling_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_render_callback(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_15render_callback_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_render_callback(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_15render_callback_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_display_fb_scale(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_16display_fb_scale_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_display_fb_scale(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_16display_fb_scale_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_display_visible_min(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_19display_visible_min_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_display_visible_min(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_19display_visible_min_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_display_visible_max(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_19display_visible_max_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_display_visible_max(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_19display_visible_max_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_pos(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_9mouse_pos_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_mouse_pos(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_9mouse_pos_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_10mouse_down_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_wheel(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_11mouse_wheel_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_mouse_wheel(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_11mouse_wheel_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_mouse_draw_cursor(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_17mouse_draw_cursor_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_mouse_draw_cursor(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_17mouse_draw_cursor_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_key_ctrl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_8key_ctrl_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_key_ctrl(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_8key_ctrl_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_key_shift(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_9key_shift_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_key_shift(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_9key_shift_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_key_alt(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_7key_alt_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_key_alt(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_7key_alt_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_key_super(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_9key_super_1__get__(o);
}

static int __pyx_setprop_5imgui_4core_3_IO_key_super(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5imgui_4core_3_IO_9key_super_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_keys_down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_9keys_down_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_want_capture_mouse(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_18want_capture_mouse_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_want_capture_keyboard(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_21want_capture_keyboard_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_want_text_input(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_15want_text_input_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_framerate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_9framerate_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_metrics_allocs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_14metrics_allocs_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_metrics_render_vertices(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_23metrics_render_vertices_1__get__(o);
}

static PyObject *__pyx_getprop_5imgui_4core_3_IO_metrics_active_windows(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5imgui_4core_3_IO_22metrics_active_windows_1__get__(o);
}

static PyMethodDef __pyx_methods_5imgui_4core__IO[] = {
  {"add_input_character", (PyCFunction)__pyx_pw_5imgui_4core_3_IO_3add_input_character, METH_O, __pyx_doc_5imgui_4core_3_IO_2add_input_character},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5imgui_4core_3_IO_5__reduce_cython__, METH_NOARGS, __pyx_doc_5imgui_4core_3_IO_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5imgui_4core_3_IO_7__setstate_cython__, METH_O, __pyx_doc_5imgui_4core_3_IO_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5imgui_4core__IO[] = {
  {(char *)"display_size", __pyx_getprop_5imgui_4core_3_IO_display_size, __pyx_setprop_5imgui_4core_3_IO_display_size, (char *)0, 0},
  {(char *)"delta_time", __pyx_getprop_5imgui_4core_3_IO_delta_time, __pyx_setprop_5imgui_4core_3_IO_delta_time, (char *)0, 0},
  {(char *)"ini_saving_rate", __pyx_getprop_5imgui_4core_3_IO_ini_saving_rate, __pyx_setprop_5imgui_4core_3_IO_ini_saving_rate, (char *)0, 0},
  {(char *)"log_file_name", __pyx_getprop_5imgui_4core_3_IO_log_file_name, __pyx_setprop_5imgui_4core_3_IO_log_file_name, (char *)0, 0},
  {(char *)"mouse_double_click_time", __pyx_getprop_5imgui_4core_3_IO_mouse_double_click_time, __pyx_setprop_5imgui_4core_3_IO_mouse_double_click_time, (char *)0, 0},
  {(char *)"mouse_double_click_max_distance", __pyx_getprop_5imgui_4core_3_IO_mouse_double_click_max_distance, __pyx_setprop_5imgui_4core_3_IO_mouse_double_click_max_distance, (char *)0, 0},
  {(char *)"mouse_drag_threshold", __pyx_getprop_5imgui_4core_3_IO_mouse_drag_threshold, __pyx_setprop_5imgui_4core_3_IO_mouse_drag_threshold, (char *)0, 0},
  {(char *)"key_map", __pyx_getprop_5imgui_4core_3_IO_key_map, 0, (char *)0, 0},
  {(char *)"key_repeat_delay", __pyx_getprop_5imgui_4core_3_IO_key_repeat_delay, __pyx_setprop_5imgui_4core_3_IO_key_repeat_delay, (char *)0, 0},
  {(char *)"key_repeat_rate", __pyx_getprop_5imgui_4core_3_IO_key_repeat_rate, __pyx_setprop_5imgui_4core_3_IO_key_repeat_rate, (char *)0, 0},
  {(char *)"fonts", __pyx_getprop_5imgui_4core_3_IO_fonts, 0, (char *)0, 0},
  {(char *)"font_global_scale", __pyx_getprop_5imgui_4core_3_IO_font_global_scale, __pyx_setprop_5imgui_4core_3_IO_font_global_scale, (char *)0, 0},
  {(char *)"font_allow_user_scaling", __pyx_getprop_5imgui_4core_3_IO_font_allow_user_scaling, __pyx_setprop_5imgui_4core_3_IO_font_allow_user_scaling, (char *)0, 0},
  {(char *)"render_callback", __pyx_getprop_5imgui_4core_3_IO_render_callback, __pyx_setprop_5imgui_4core_3_IO_render_callback, (char *)0, 0},
  {(char *)"display_fb_scale", __pyx_getprop_5imgui_4core_3_IO_display_fb_scale, __pyx_setprop_5imgui_4core_3_IO_display_fb_scale, (char *)0, 0},
  {(char *)"display_visible_min", __pyx_getprop_5imgui_4core_3_IO_display_visible_min, __pyx_setprop_5imgui_4core_3_IO_display_visible_min, (char *)0, 0},
  {(char *)"display_visible_max", __pyx_getprop_5imgui_4core_3_IO_display_visible_max, __pyx_setprop_5imgui_4core_3_IO_display_visible_max, (char *)0, 0},
  {(char *)"mouse_pos", __pyx_getprop_5imgui_4core_3_IO_mouse_pos, __pyx_setprop_5imgui_4core_3_IO_mouse_pos, (char *)0, 0},
  {(char *)"mouse_down", __pyx_getprop_5imgui_4core_3_IO_mouse_down, 0, (char *)0, 0},
  {(char *)"mouse_wheel", __pyx_getprop_5imgui_4core_3_IO_mouse_wheel, __pyx_setprop_5imgui_4core_3_IO_mouse_wheel, (char *)0, 0},
  {(char *)"mouse_draw_cursor", __pyx_getprop_5imgui_4core_3_IO_mouse_draw_cursor, __pyx_setprop_5imgui_4core_3_IO_mouse_draw_cursor, (char *)0, 0},
  {(char *)"key_ctrl", __pyx_getprop_5imgui_4core_3_IO_key_ctrl, __pyx_setprop_5imgui_4core_3_IO_key_ctrl, (char *)0, 0},
  {(char *)"key_shift", __pyx_getprop_5imgui_4core_3_IO_key_shift, __pyx_setprop_5imgui_4core_3_IO_key_shift, (char *)0, 0},
  {(char *)"key_alt", __pyx_getprop_5imgui_4core_3_IO_key_alt, __pyx_setprop_5imgui_4core_3_IO_key_alt, (char *)0, 0},
  {(char *)"key_super", __pyx_getprop_5imgui_4core_3_IO_key_super, __pyx_setprop_5imgui_4core_3_IO_key_super, (char *)0, 0},
  {(char *)"keys_down", __pyx_getprop_5imgui_4core_3_IO_keys_down, 0, (char *)0, 0},
  {(char *)"want_capture_mouse", __pyx_getprop_5imgui_4core_3_IO_want_capture_mouse, 0, (char *)0, 0},
  {(char *)"want_capture_keyboard", __pyx_getprop_5imgui_4core_3_IO_want_capture_keyboard, 0, (char *)0, 0},
  {(char *)"want_text_input", __pyx_getprop_5imgui_4core_3_IO_want_text_input, 0, (char *)0, 0},
  {(char *)"framerate", __pyx_getprop_5imgui_4core_3_IO_framerate, 0, (char *)0, 0},
  {(char *)"metrics_allocs", __pyx_getprop_5imgui_4core_3_IO_metrics_allocs, 0, (char *)0, 0},
  {(char *)"metrics_render_vertices", __pyx_getprop_5imgui_4core_3_IO_metrics_render_vertices, 0, (char *)0, 0},
  {(char *)"metrics_active_windows", __pyx_getprop_5imgui_4core_3_IO_metrics_active_windows, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5imgui_4core__IO = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._IO", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core__IO), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core__IO, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "_IO()", /*tp_doc*/
  __pyx_tp_traverse_5imgui_4core__IO, /*tp_traverse*/
  __pyx_tp_clear_5imgui_4core__IO, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5imgui_4core__IO, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5imgui_4core__IO, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5imgui_4core_3_IO_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core__IO, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5imgui_4core___pyx_scope_struct__font *__pyx_freelist_5imgui_4core___pyx_scope_struct__font[8];
static int __pyx_freecount_5imgui_4core___pyx_scope_struct__font = 0;

static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct__font(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5imgui_4core___pyx_scope_struct__font > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct__font)))) {
    o = (PyObject*)__pyx_freelist_5imgui_4core___pyx_scope_struct__font[--__pyx_freecount_5imgui_4core___pyx_scope_struct__font];
    memset(o, 0, sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct__font));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct__font(PyObject *o) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct__font *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct__font *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_font);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5imgui_4core___pyx_scope_struct__font < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct__font)))) {
    __pyx_freelist_5imgui_4core___pyx_scope_struct__font[__pyx_freecount_5imgui_4core___pyx_scope_struct__font++] = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct__font *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5imgui_4core___pyx_scope_struct__font(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5imgui_4core___pyx_scope_struct__font *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct__font *)o;
  if (p->__pyx_v_font) {
    e = (*v)(((PyObject *)p->__pyx_v_font), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5imgui_4core___pyx_scope_struct__font(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5imgui_4core___pyx_scope_struct__font *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct__font *)o;
  tmp = ((PyObject*)p->__pyx_v_font);
  p->__pyx_v_font = ((struct __pyx_obj_5imgui_4core__Font *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5imgui_4core___pyx_scope_struct__font = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.__pyx_scope_struct__font", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct__font), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct__font, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5imgui_4core___pyx_scope_struct__font, /*tp_traverse*/
  __pyx_tp_clear_5imgui_4core___pyx_scope_struct__font, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core___pyx_scope_struct__font, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled *__pyx_freelist_5imgui_4core___pyx_scope_struct_1_styled[8];
static int __pyx_freecount_5imgui_4core___pyx_scope_struct_1_styled = 0;

static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct_1_styled(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5imgui_4core___pyx_scope_struct_1_styled > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled)))) {
    o = (PyObject*)__pyx_freelist_5imgui_4core___pyx_scope_struct_1_styled[--__pyx_freecount_5imgui_4core___pyx_scope_struct_1_styled];
    memset(o, 0, sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct_1_styled(PyObject *o) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_count);
  Py_CLEAR(p->__pyx_v_value);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5imgui_4core___pyx_scope_struct_1_styled < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled)))) {
    __pyx_freelist_5imgui_4core___pyx_scope_struct_1_styled[__pyx_freecount_5imgui_4core___pyx_scope_struct_1_styled++] = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5imgui_4core___pyx_scope_struct_1_styled(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled *)o;
  if (p->__pyx_v_count) {
    e = (*v)(p->__pyx_v_count, a); if (e) return e;
  }
  if (p->__pyx_v_value) {
    e = (*v)(p->__pyx_v_value, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5imgui_4core___pyx_scope_struct_1_styled(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled *)o;
  tmp = ((PyObject*)p->__pyx_v_count);
  p->__pyx_v_count = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_value);
  p->__pyx_v_value = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5imgui_4core___pyx_scope_struct_1_styled = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.__pyx_scope_struct_1_styled", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_1_styled), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct_1_styled, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5imgui_4core___pyx_scope_struct_1_styled, /*tp_traverse*/
  __pyx_tp_clear_5imgui_4core___pyx_scope_struct_1_styled, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core___pyx_scope_struct_1_styled, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled *__pyx_freelist_5imgui_4core___pyx_scope_struct_2_istyled[8];
static int __pyx_freecount_5imgui_4core___pyx_scope_struct_2_istyled = 0;

static PyObject *__pyx_tp_new_5imgui_4core___pyx_scope_struct_2_istyled(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5imgui_4core___pyx_scope_struct_2_istyled > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled)))) {
    o = (PyObject*)__pyx_freelist_5imgui_4core___pyx_scope_struct_2_istyled[--__pyx_freecount_5imgui_4core___pyx_scope_struct_2_istyled];
    memset(o, 0, sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct_2_istyled(PyObject *o) {
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_count);
  Py_CLEAR(p->__pyx_v_iterator);
  Py_CLEAR(p->__pyx_v_val);
  Py_CLEAR(p->__pyx_v_var);
  Py_CLEAR(p->__pyx_v_variables_and_values);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5imgui_4core___pyx_scope_struct_2_istyled < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled)))) {
    __pyx_freelist_5imgui_4core___pyx_scope_struct_2_istyled[__pyx_freecount_5imgui_4core___pyx_scope_struct_2_istyled++] = ((struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5imgui_4core___pyx_scope_struct_2_istyled(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled *)o;
  if (p->__pyx_v_count) {
    e = (*v)(p->__pyx_v_count, a); if (e) return e;
  }
  if (p->__pyx_v_iterator) {
    e = (*v)(p->__pyx_v_iterator, a); if (e) return e;
  }
  if (p->__pyx_v_val) {
    e = (*v)(p->__pyx_v_val, a); if (e) return e;
  }
  if (p->__pyx_v_var) {
    e = (*v)(p->__pyx_v_var, a); if (e) return e;
  }
  if (p->__pyx_v_variables_and_values) {
    e = (*v)(p->__pyx_v_variables_and_values, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5imgui_4core___pyx_scope_struct_2_istyled(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled *p = (struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled *)o;
  tmp = ((PyObject*)p->__pyx_v_count);
  p->__pyx_v_count = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_iterator);
  p->__pyx_v_iterator = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_val);
  p->__pyx_v_val = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_var);
  p->__pyx_v_var = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_variables_and_values);
  p->__pyx_v_variables_and_values = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_1);
  p->__pyx_t_1 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_2);
  p->__pyx_t_2 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5imgui_4core___pyx_scope_struct_2_istyled = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.__pyx_scope_struct_2_istyled", /*tp_name*/
  sizeof(struct __pyx_obj_5imgui_4core___pyx_scope_struct_2_istyled), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5imgui_4core___pyx_scope_struct_2_istyled, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5imgui_4core___pyx_scope_struct_2_istyled, /*tp_traverse*/
  __pyx_tp_clear_5imgui_4core___pyx_scope_struct_2_istyled, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5imgui_4core___pyx_scope_struct_2_istyled, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_array___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  0, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryview___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryviewslice___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "imgui.core._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"push_style_var", (PyCFunction)__pyx_pw_5imgui_4core_259push_style_var, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_258push_style_var},
  {"push_style_color", (PyCFunction)__pyx_pw_5imgui_4core_261push_style_color, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_260push_style_color},
  {"pop_style_var", (PyCFunction)__pyx_pw_5imgui_4core_263pop_style_var, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_262pop_style_var},
  {"push_item_width", (PyCFunction)__pyx_pw_5imgui_4core_265push_item_width, METH_O, __pyx_doc_5imgui_4core_264push_item_width},
  {"pop_item_width", (PyCFunction)__pyx_pw_5imgui_4core_267pop_item_width, METH_NOARGS, __pyx_doc_5imgui_4core_266pop_item_width},
  {"calculate_item_width", (PyCFunction)__pyx_pw_5imgui_4core_269calculate_item_width, METH_NOARGS, __pyx_doc_5imgui_4core_268calculate_item_width},
  {"push_text_wrap_pos", (PyCFunction)__pyx_pw_5imgui_4core_271push_text_wrap_pos, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_270push_text_wrap_pos},
  {"pop_text_wrap_pos", (PyCFunction)__pyx_pw_5imgui_4core_273pop_text_wrap_pos, METH_NOARGS, __pyx_doc_5imgui_4core_272pop_text_wrap_pos},
  {"pop_style_color", (PyCFunction)__pyx_pw_5imgui_4core_275pop_style_color, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imgui_4core_274pop_style_color},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "core",
    __pyx_k_todo_consider_inlining_every_oc, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_3f, __pyx_k_3f, sizeof(__pyx_k_3f), 0, 0, 1, 0},
  {&__pyx_n_s_ALWAYS, __pyx_k_ALWAYS, sizeof(__pyx_k_ALWAYS), 0, 0, 1, 1},
  {&__pyx_n_s_APPEARING, __pyx_k_APPEARING, sizeof(__pyx_k_APPEARING), 0, 0, 1, 1},
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_n_s_COLOR_BORDER, __pyx_k_COLOR_BORDER, sizeof(__pyx_k_COLOR_BORDER), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_BORDER_SHADOW, __pyx_k_COLOR_BORDER_SHADOW, sizeof(__pyx_k_COLOR_BORDER_SHADOW), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_BUTTON, __pyx_k_COLOR_BUTTON, sizeof(__pyx_k_COLOR_BUTTON), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_BUTTON_ACTIVE, __pyx_k_COLOR_BUTTON_ACTIVE, sizeof(__pyx_k_COLOR_BUTTON_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_BUTTON_HOVERED, __pyx_k_COLOR_BUTTON_HOVERED, sizeof(__pyx_k_COLOR_BUTTON_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_CHECK_MARK, __pyx_k_COLOR_CHECK_MARK, sizeof(__pyx_k_COLOR_CHECK_MARK), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_CHILD_WINDOW_BACKGROUND, __pyx_k_COLOR_CHILD_WINDOW_BACKGROUND, sizeof(__pyx_k_COLOR_CHILD_WINDOW_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_CLOSE_BUTTON, __pyx_k_COLOR_CLOSE_BUTTON, sizeof(__pyx_k_COLOR_CLOSE_BUTTON), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_CLOSE_BUTTON_ACTIVE, __pyx_k_COLOR_CLOSE_BUTTON_ACTIVE, sizeof(__pyx_k_COLOR_CLOSE_BUTTON_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_CLOSE_BUTTON_HOVERED, __pyx_k_COLOR_CLOSE_BUTTON_HOVERED, sizeof(__pyx_k_COLOR_CLOSE_BUTTON_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_COLUMN, __pyx_k_COLOR_COLUMN, sizeof(__pyx_k_COLOR_COLUMN), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_COLUMN_ACTIVE, __pyx_k_COLOR_COLUMN_ACTIVE, sizeof(__pyx_k_COLOR_COLUMN_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_COLUMN_HOVERED, __pyx_k_COLOR_COLUMN_HOVERED, sizeof(__pyx_k_COLOR_COLUMN_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_COMBO_BACKGROUND, __pyx_k_COLOR_COMBO_BACKGROUND, sizeof(__pyx_k_COLOR_COMBO_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_COUNT, __pyx_k_COLOR_COUNT, sizeof(__pyx_k_COLOR_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_FRAME_BACKGROUND, __pyx_k_COLOR_FRAME_BACKGROUND, sizeof(__pyx_k_COLOR_FRAME_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_FRAME_BACKGROUND_ACTIVE, __pyx_k_COLOR_FRAME_BACKGROUND_ACTIVE, sizeof(__pyx_k_COLOR_FRAME_BACKGROUND_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_FRAME_BACKGROUND_HOVERED, __pyx_k_COLOR_FRAME_BACKGROUND_HOVERED, sizeof(__pyx_k_COLOR_FRAME_BACKGROUND_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_HEADER, __pyx_k_COLOR_HEADER, sizeof(__pyx_k_COLOR_HEADER), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_HEADER_ACTIVE, __pyx_k_COLOR_HEADER_ACTIVE, sizeof(__pyx_k_COLOR_HEADER_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_HEADER_HOVERED, __pyx_k_COLOR_HEADER_HOVERED, sizeof(__pyx_k_COLOR_HEADER_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_MENUBAR_BACKGROUND, __pyx_k_COLOR_MENUBAR_BACKGROUND, sizeof(__pyx_k_COLOR_MENUBAR_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_MODAL_WINDOW_DARKENING, __pyx_k_COLOR_MODAL_WINDOW_DARKENING, sizeof(__pyx_k_COLOR_MODAL_WINDOW_DARKENING), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_PLOT_HISTOGRAM, __pyx_k_COLOR_PLOT_HISTOGRAM, sizeof(__pyx_k_COLOR_PLOT_HISTOGRAM), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_PLOT_HISTOGRAM_HOVERED, __pyx_k_COLOR_PLOT_HISTOGRAM_HOVERED, sizeof(__pyx_k_COLOR_PLOT_HISTOGRAM_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_PLOT_LINES, __pyx_k_COLOR_PLOT_LINES, sizeof(__pyx_k_COLOR_PLOT_LINES), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_PLOT_LINES_HOVERED, __pyx_k_COLOR_PLOT_LINES_HOVERED, sizeof(__pyx_k_COLOR_PLOT_LINES_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_POPUP_BACKGROUND, __pyx_k_COLOR_POPUP_BACKGROUND, sizeof(__pyx_k_COLOR_POPUP_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_RESIZE_GRIP, __pyx_k_COLOR_RESIZE_GRIP, sizeof(__pyx_k_COLOR_RESIZE_GRIP), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_RESIZE_GRIP_ACTIVE, __pyx_k_COLOR_RESIZE_GRIP_ACTIVE, sizeof(__pyx_k_COLOR_RESIZE_GRIP_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_RESIZE_GRIP_HOVERED, __pyx_k_COLOR_RESIZE_GRIP_HOVERED, sizeof(__pyx_k_COLOR_RESIZE_GRIP_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_SCROLLBAR_BACKGROUND, __pyx_k_COLOR_SCROLLBAR_BACKGROUND, sizeof(__pyx_k_COLOR_SCROLLBAR_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_SCROLLBAR_GRAB, __pyx_k_COLOR_SCROLLBAR_GRAB, sizeof(__pyx_k_COLOR_SCROLLBAR_GRAB), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_SCROLLBAR_GRAB_ACTIVE, __pyx_k_COLOR_SCROLLBAR_GRAB_ACTIVE, sizeof(__pyx_k_COLOR_SCROLLBAR_GRAB_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_SCROLLBAR_GRAB_HOVERED, __pyx_k_COLOR_SCROLLBAR_GRAB_HOVERED, sizeof(__pyx_k_COLOR_SCROLLBAR_GRAB_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_SLIDER_GRAB, __pyx_k_COLOR_SLIDER_GRAB, sizeof(__pyx_k_COLOR_SLIDER_GRAB), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_SLIDER_GRAB_ACTIVE, __pyx_k_COLOR_SLIDER_GRAB_ACTIVE, sizeof(__pyx_k_COLOR_SLIDER_GRAB_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_TEXT, __pyx_k_COLOR_TEXT, sizeof(__pyx_k_COLOR_TEXT), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_TEXT_DISABLED, __pyx_k_COLOR_TEXT_DISABLED, sizeof(__pyx_k_COLOR_TEXT_DISABLED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_TEXT_SELECTED_BACKGROUND, __pyx_k_COLOR_TEXT_SELECTED_BACKGROUND, sizeof(__pyx_k_COLOR_TEXT_SELECTED_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_TITLE_BACKGROUND, __pyx_k_COLOR_TITLE_BACKGROUND, sizeof(__pyx_k_COLOR_TITLE_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_TITLE_BACKGROUND_ACTIVE, __pyx_k_COLOR_TITLE_BACKGROUND_ACTIVE, sizeof(__pyx_k_COLOR_TITLE_BACKGROUND_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_TITLE_BACKGROUND_COLLAPSED, __pyx_k_COLOR_TITLE_BACKGROUND_COLLAPSED, sizeof(__pyx_k_COLOR_TITLE_BACKGROUND_COLLAPSED), 0, 0, 1, 1},
  {&__pyx_n_s_COLOR_WINDOW_BACKGROUND, __pyx_k_COLOR_WINDOW_BACKGROUND, sizeof(__pyx_k_COLOR_WINDOW_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_kp_s_Expected_at_least_d_argument_s_g, __pyx_k_Expected_at_least_d_argument_s_g, sizeof(__pyx_k_Expected_at_least_d_argument_s_g), 0, 0, 1, 0},
  {&__pyx_n_s_FIRST_USE_EVER, __pyx_k_FIRST_USE_EVER, sizeof(__pyx_k_FIRST_USE_EVER), 0, 0, 1, 1},
  {&__pyx_kp_s_Function_call_with_ambiguous_arg, __pyx_k_Function_call_with_ambiguous_arg, sizeof(__pyx_k_Function_call_with_ambiguous_arg), 0, 0, 1, 0},
  {&__pyx_n_s_INPUT_TEXT_ALLOW_TAB_INPUT, __pyx_k_INPUT_TEXT_ALLOW_TAB_INPUT, sizeof(__pyx_k_INPUT_TEXT_ALLOW_TAB_INPUT), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_ALWAYS_INSERT_MODE, __pyx_k_INPUT_TEXT_ALWAYS_INSERT_MODE, sizeof(__pyx_k_INPUT_TEXT_ALWAYS_INSERT_MODE), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_AUTO_SELECT_ALL, __pyx_k_INPUT_TEXT_AUTO_SELECT_ALL, sizeof(__pyx_k_INPUT_TEXT_AUTO_SELECT_ALL), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CALLBACK_ALWAYS, __pyx_k_INPUT_TEXT_CALLBACK_ALWAYS, sizeof(__pyx_k_INPUT_TEXT_CALLBACK_ALWAYS), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CALLBACK_CHAR_FILTER, __pyx_k_INPUT_TEXT_CALLBACK_CHAR_FILTER, sizeof(__pyx_k_INPUT_TEXT_CALLBACK_CHAR_FILTER), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CALLBACK_COMPLETION, __pyx_k_INPUT_TEXT_CALLBACK_COMPLETION, sizeof(__pyx_k_INPUT_TEXT_CALLBACK_COMPLETION), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CALLBACK_HISTORY, __pyx_k_INPUT_TEXT_CALLBACK_HISTORY, sizeof(__pyx_k_INPUT_TEXT_CALLBACK_HISTORY), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CHARS_DECIMAL, __pyx_k_INPUT_TEXT_CHARS_DECIMAL, sizeof(__pyx_k_INPUT_TEXT_CHARS_DECIMAL), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CHARS_HEXADECIMAL, __pyx_k_INPUT_TEXT_CHARS_HEXADECIMAL, sizeof(__pyx_k_INPUT_TEXT_CHARS_HEXADECIMAL), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CHARS_NO_BLANK, __pyx_k_INPUT_TEXT_CHARS_NO_BLANK, sizeof(__pyx_k_INPUT_TEXT_CHARS_NO_BLANK), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CHARS_UPPERCASE, __pyx_k_INPUT_TEXT_CHARS_UPPERCASE, sizeof(__pyx_k_INPUT_TEXT_CHARS_UPPERCASE), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_CTRL_ENTER_FOR_NEW_LI, __pyx_k_INPUT_TEXT_CTRL_ENTER_FOR_NEW_LI, sizeof(__pyx_k_INPUT_TEXT_CTRL_ENTER_FOR_NEW_LI), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_ENTER_RETURNS_TRUE, __pyx_k_INPUT_TEXT_ENTER_RETURNS_TRUE, sizeof(__pyx_k_INPUT_TEXT_ENTER_RETURNS_TRUE), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_NO_HORIZONTAL_SCROLL, __pyx_k_INPUT_TEXT_NO_HORIZONTAL_SCROLL, sizeof(__pyx_k_INPUT_TEXT_NO_HORIZONTAL_SCROLL), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_PASSWORD, __pyx_k_INPUT_TEXT_PASSWORD, sizeof(__pyx_k_INPUT_TEXT_PASSWORD), 0, 0, 1, 1},
  {&__pyx_n_s_INPUT_TEXT_READ_ONLY, __pyx_k_INPUT_TEXT_READ_ONLY, sizeof(__pyx_k_INPUT_TEXT_READ_ONLY), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiError, __pyx_k_ImGuiError, sizeof(__pyx_k_ImGuiError), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiID, __pyx_k_ImGuiID, sizeof(__pyx_k_ImGuiID), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_k_Incompatible_checksums_s_vs_0xb0, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xb0), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_KEY_A, __pyx_k_KEY_A, sizeof(__pyx_k_KEY_A), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_BACKSPACE, __pyx_k_KEY_BACKSPACE, sizeof(__pyx_k_KEY_BACKSPACE), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_C, __pyx_k_KEY_C, sizeof(__pyx_k_KEY_C), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_DELETE, __pyx_k_KEY_DELETE, sizeof(__pyx_k_KEY_DELETE), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_DOWN_ARROW, __pyx_k_KEY_DOWN_ARROW, sizeof(__pyx_k_KEY_DOWN_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_END, __pyx_k_KEY_END, sizeof(__pyx_k_KEY_END), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_ENTER, __pyx_k_KEY_ENTER, sizeof(__pyx_k_KEY_ENTER), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_ESCAPE, __pyx_k_KEY_ESCAPE, sizeof(__pyx_k_KEY_ESCAPE), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_HOME, __pyx_k_KEY_HOME, sizeof(__pyx_k_KEY_HOME), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_LEFT_ARROW, __pyx_k_KEY_LEFT_ARROW, sizeof(__pyx_k_KEY_LEFT_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_PAGE_DOWN, __pyx_k_KEY_PAGE_DOWN, sizeof(__pyx_k_KEY_PAGE_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_PAGE_UP, __pyx_k_KEY_PAGE_UP, sizeof(__pyx_k_KEY_PAGE_UP), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_RIGHT_ARROW, __pyx_k_KEY_RIGHT_ARROW, sizeof(__pyx_k_KEY_RIGHT_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_TAB, __pyx_k_KEY_TAB, sizeof(__pyx_k_KEY_TAB), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_UP_ARROW, __pyx_k_KEY_UP_ARROW, sizeof(__pyx_k_KEY_UP_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_V, __pyx_k_KEY_V, sizeof(__pyx_k_KEY_V), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_X, __pyx_k_KEY_X, sizeof(__pyx_k_KEY_X), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_Y, __pyx_k_KEY_Y, sizeof(__pyx_k_KEY_Y), 0, 0, 1, 1},
  {&__pyx_n_s_KEY_Z, __pyx_k_KEY_Z, sizeof(__pyx_k_KEY_Z), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_ARROW, __pyx_k_MOUSE_CURSOR_ARROW, sizeof(__pyx_k_MOUSE_CURSOR_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_MOVE, __pyx_k_MOUSE_CURSOR_MOVE, sizeof(__pyx_k_MOUSE_CURSOR_MOVE), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_RESIZE_EW, __pyx_k_MOUSE_CURSOR_RESIZE_EW, sizeof(__pyx_k_MOUSE_CURSOR_RESIZE_EW), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_RESIZE_NESW, __pyx_k_MOUSE_CURSOR_RESIZE_NESW, sizeof(__pyx_k_MOUSE_CURSOR_RESIZE_NESW), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_RESIZE_NS, __pyx_k_MOUSE_CURSOR_RESIZE_NS, sizeof(__pyx_k_MOUSE_CURSOR_RESIZE_NS), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_RESIZE_NWSE, __pyx_k_MOUSE_CURSOR_RESIZE_NWSE, sizeof(__pyx_k_MOUSE_CURSOR_RESIZE_NWSE), 0, 0, 1, 1},
  {&__pyx_n_s_MOUSE_CURSOR_TEXT_INPUT, __pyx_k_MOUSE_CURSOR_TEXT_INPUT, sizeof(__pyx_k_MOUSE_CURSOR_TEXT_INPUT), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_kp_s_No_matching_signature_found, __pyx_k_No_matching_signature_found, sizeof(__pyx_k_No_matching_signature_found), 0, 0, 1, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_n_s_ONCE, __pyx_k_ONCE, sizeof(__pyx_k_ONCE), 0, 0, 1, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SELECTABLE_ALLOW_DOUBLE_CLICK, __pyx_k_SELECTABLE_ALLOW_DOUBLE_CLICK, sizeof(__pyx_k_SELECTABLE_ALLOW_DOUBLE_CLICK), 0, 0, 1, 1},
  {&__pyx_n_s_SELECTABLE_DONT_CLOSE_POPUPS, __pyx_k_SELECTABLE_DONT_CLOSE_POPUPS, sizeof(__pyx_k_SELECTABLE_DONT_CLOSE_POPUPS), 0, 0, 1, 1},
  {&__pyx_n_s_SELECTABLE_SPAN_ALL_COLUMNS, __pyx_k_SELECTABLE_SPAN_ALL_COLUMNS, sizeof(__pyx_k_SELECTABLE_SPAN_ALL_COLUMNS), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_ALPHA, __pyx_k_STYLE_ALPHA, sizeof(__pyx_k_STYLE_ALPHA), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_CHILD_WINDOW_ROUNDING, __pyx_k_STYLE_CHILD_WINDOW_ROUNDING, sizeof(__pyx_k_STYLE_CHILD_WINDOW_ROUNDING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_FRAME_PADDING, __pyx_k_STYLE_FRAME_PADDING, sizeof(__pyx_k_STYLE_FRAME_PADDING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_FRAME_ROUNDING, __pyx_k_STYLE_FRAME_ROUNDING, sizeof(__pyx_k_STYLE_FRAME_ROUNDING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_GRAB_MIN_SIZE, __pyx_k_STYLE_GRAB_MIN_SIZE, sizeof(__pyx_k_STYLE_GRAB_MIN_SIZE), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_INDENT_SPACING, __pyx_k_STYLE_INDENT_SPACING, sizeof(__pyx_k_STYLE_INDENT_SPACING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_ITEM_INNER_SPACING, __pyx_k_STYLE_ITEM_INNER_SPACING, sizeof(__pyx_k_STYLE_ITEM_INNER_SPACING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_ITEM_SPACING, __pyx_k_STYLE_ITEM_SPACING, sizeof(__pyx_k_STYLE_ITEM_SPACING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_WINDOW_MIN_SIZE, __pyx_k_STYLE_WINDOW_MIN_SIZE, sizeof(__pyx_k_STYLE_WINDOW_MIN_SIZE), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_WINDOW_PADDING, __pyx_k_STYLE_WINDOW_PADDING, sizeof(__pyx_k_STYLE_WINDOW_PADDING), 0, 0, 1, 1},
  {&__pyx_n_s_STYLE_WINDOW_ROUNDING, __pyx_k_STYLE_WINDOW_ROUNDING, sizeof(__pyx_k_STYLE_WINDOW_ROUNDING), 0, 0, 1, 1},
  {&__pyx_kp_s_Style_value_must_be_float_or_two, __pyx_k_Style_value_must_be_float_or_two, sizeof(__pyx_k_Style_value_must_be_float_or_two), 0, 0, 1, 0},
  {&__pyx_n_s_TREE_NODE_ALLOW_OVERLAP_MODE, __pyx_k_TREE_NODE_ALLOW_OVERLAP_MODE, sizeof(__pyx_k_TREE_NODE_ALLOW_OVERLAP_MODE), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_BULLET, __pyx_k_TREE_NODE_BULLET, sizeof(__pyx_k_TREE_NODE_BULLET), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_COLLAPSING_HEADER, __pyx_k_TREE_NODE_COLLAPSING_HEADER, sizeof(__pyx_k_TREE_NODE_COLLAPSING_HEADER), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_DEFAULT_OPEN, __pyx_k_TREE_NODE_DEFAULT_OPEN, sizeof(__pyx_k_TREE_NODE_DEFAULT_OPEN), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_FRAMED, __pyx_k_TREE_NODE_FRAMED, sizeof(__pyx_k_TREE_NODE_FRAMED), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_LEAF, __pyx_k_TREE_NODE_LEAF, sizeof(__pyx_k_TREE_NODE_LEAF), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_NO_AUTO_OPEN_ON_LOG, __pyx_k_TREE_NODE_NO_AUTO_OPEN_ON_LOG, sizeof(__pyx_k_TREE_NODE_NO_AUTO_OPEN_ON_LOG), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_NO_TREE_PUSH_ON_OPEN, __pyx_k_TREE_NODE_NO_TREE_PUSH_ON_OPEN, sizeof(__pyx_k_TREE_NODE_NO_TREE_PUSH_ON_OPEN), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_OPEN_ON_ARROW, __pyx_k_TREE_NODE_OPEN_ON_ARROW, sizeof(__pyx_k_TREE_NODE_OPEN_ON_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_OPEN_ON_DOUBLE_CLICK, __pyx_k_TREE_NODE_OPEN_ON_DOUBLE_CLICK, sizeof(__pyx_k_TREE_NODE_OPEN_ON_DOUBLE_CLICK), 0, 0, 1, 1},
  {&__pyx_n_s_TREE_NODE_SELECTED, __pyx_k_TREE_NODE_SELECTED, sizeof(__pyx_k_TREE_NODE_SELECTED), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_kp_s_Unsufficient_style_info_variable, __pyx_k_Unsufficient_style_info_variable, sizeof(__pyx_k_Unsufficient_style_info_variable), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_Vec2, __pyx_k_Vec2, sizeof(__pyx_k_Vec2), 0, 0, 1, 1},
  {&__pyx_n_s_Vec4, __pyx_k_Vec4, sizeof(__pyx_k_Vec4), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_ALWAYS_AUTO_RESIZE, __pyx_k_WINDOW_ALWAYS_AUTO_RESIZE, sizeof(__pyx_k_WINDOW_ALWAYS_AUTO_RESIZE), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_ALWAYS_HORIZONTAL_SCROLLB, __pyx_k_WINDOW_ALWAYS_HORIZONTAL_SCROLLB, sizeof(__pyx_k_WINDOW_ALWAYS_HORIZONTAL_SCROLLB), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_ALWAYS_USE_WINDOW_PADDING, __pyx_k_WINDOW_ALWAYS_USE_WINDOW_PADDING, sizeof(__pyx_k_WINDOW_ALWAYS_USE_WINDOW_PADDING), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_ALWAYS_VERTICAL_SCROLLBAR, __pyx_k_WINDOW_ALWAYS_VERTICAL_SCROLLBAR, sizeof(__pyx_k_WINDOW_ALWAYS_VERTICAL_SCROLLBAR), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_HORIZONTAL_SCROLLING_BAR, __pyx_k_WINDOW_HORIZONTAL_SCROLLING_BAR, sizeof(__pyx_k_WINDOW_HORIZONTAL_SCROLLING_BAR), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_MENU_BAR, __pyx_k_WINDOW_MENU_BAR, sizeof(__pyx_k_WINDOW_MENU_BAR), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_BRING_TO_FRONT_ON_FOCU, __pyx_k_WINDOW_NO_BRING_TO_FRONT_ON_FOCU, sizeof(__pyx_k_WINDOW_NO_BRING_TO_FRONT_ON_FOCU), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_COLLAPSE, __pyx_k_WINDOW_NO_COLLAPSE, sizeof(__pyx_k_WINDOW_NO_COLLAPSE), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_FOCUS_ON_APPEARING, __pyx_k_WINDOW_NO_FOCUS_ON_APPEARING, sizeof(__pyx_k_WINDOW_NO_FOCUS_ON_APPEARING), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_INPUTS, __pyx_k_WINDOW_NO_INPUTS, sizeof(__pyx_k_WINDOW_NO_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_MOVE, __pyx_k_WINDOW_NO_MOVE, sizeof(__pyx_k_WINDOW_NO_MOVE), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_RESIZE, __pyx_k_WINDOW_NO_RESIZE, sizeof(__pyx_k_WINDOW_NO_RESIZE), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_SAVED_SETTINGS, __pyx_k_WINDOW_NO_SAVED_SETTINGS, sizeof(__pyx_k_WINDOW_NO_SAVED_SETTINGS), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_SCROLLBAR, __pyx_k_WINDOW_NO_SCROLLBAR, sizeof(__pyx_k_WINDOW_NO_SCROLLBAR), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_SCROLL_WITH_MOUSE, __pyx_k_WINDOW_NO_SCROLL_WITH_MOUSE, sizeof(__pyx_k_WINDOW_NO_SCROLL_WITH_MOUSE), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_NO_TITLE_BAR, __pyx_k_WINDOW_NO_TITLE_BAR, sizeof(__pyx_k_WINDOW_NO_TITLE_BAR), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_SHOW_BORDERS, __pyx_k_WINDOW_SHOW_BORDERS, sizeof(__pyx_k_WINDOW_SHOW_BORDERS), 0, 0, 1, 1},
  {&__pyx_kp_s__25, __pyx_k__25, sizeof(__pyx_k__25), 0, 0, 1, 0},
  {&__pyx_kp_s__26, __pyx_k__26, sizeof(__pyx_k__26), 0, 0, 1, 0},
  {&__pyx_kp_s__28, __pyx_k__28, sizeof(__pyx_k__28), 0, 0, 1, 0},
  {&__pyx_kp_s__45, __pyx_k__45, sizeof(__pyx_k__45), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_active, __pyx_k_active, sizeof(__pyx_k_active), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_also_over_items, __pyx_k_also_over_items, sizeof(__pyx_k_also_over_items), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_begin, __pyx_k_begin, sizeof(__pyx_k_begin), 0, 0, 1, 1},
  {&__pyx_n_s_begin_child, __pyx_k_begin_child, sizeof(__pyx_k_begin_child), 0, 0, 1, 1},
  {&__pyx_n_s_begin_group, __pyx_k_begin_group, sizeof(__pyx_k_begin_group), 0, 0, 1, 1},
  {&__pyx_n_s_begin_main_menu_bar, __pyx_k_begin_main_menu_bar, sizeof(__pyx_k_begin_main_menu_bar), 0, 0, 1, 1},
  {&__pyx_n_s_begin_menu, __pyx_k_begin_menu, sizeof(__pyx_k_begin_menu), 0, 0, 1, 1},
  {&__pyx_n_s_begin_menu_bar, __pyx_k_begin_menu_bar, sizeof(__pyx_k_begin_menu_bar), 0, 0, 1, 1},
  {&__pyx_n_s_begin_popup, __pyx_k_begin_popup, sizeof(__pyx_k_begin_popup), 0, 0, 1, 1},
  {&__pyx_n_s_begin_popup_context_item, __pyx_k_begin_popup_context_item, sizeof(__pyx_k_begin_popup_context_item), 0, 0, 1, 1},
  {&__pyx_n_s_begin_popup_context_window, __pyx_k_begin_popup_context_window, sizeof(__pyx_k_begin_popup_context_window), 0, 0, 1, 1},
  {&__pyx_n_s_begin_popup_modal, __pyx_k_begin_popup_modal, sizeof(__pyx_k_begin_popup_modal), 0, 0, 1, 1},
  {&__pyx_n_s_begin_tooltip, __pyx_k_begin_tooltip, sizeof(__pyx_k_begin_tooltip), 0, 0, 1, 1},
  {&__pyx_n_s_border, __pyx_k_border, sizeof(__pyx_k_border), 0, 0, 1, 1},
  {&__pyx_n_s_border_color, __pyx_k_border_color, sizeof(__pyx_k_border_color), 0, 0, 1, 1},
  {&__pyx_n_s_buffer_length, __pyx_k_buffer_length, sizeof(__pyx_k_buffer_length), 0, 0, 1, 1},
  {&__pyx_n_s_bullet, __pyx_k_bullet, sizeof(__pyx_k_bullet), 0, 0, 1, 1},
  {&__pyx_n_s_bullet_text, __pyx_k_bullet_text, sizeof(__pyx_k_bullet_text), 0, 0, 1, 1},
  {&__pyx_n_s_button, __pyx_k_button, sizeof(__pyx_k_button), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_change_speed, __pyx_k_change_speed, sizeof(__pyx_k_change_speed), 0, 0, 1, 1},
  {&__pyx_n_s_changed, __pyx_k_changed, sizeof(__pyx_k_changed), 0, 0, 1, 1},
  {&__pyx_n_s_checkbox, __pyx_k_checkbox, sizeof(__pyx_k_checkbox), 0, 0, 1, 1},
  {&__pyx_n_s_checkbox_flags, __pyx_k_checkbox_flags, sizeof(__pyx_k_checkbox_flags), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_clicked, __pyx_k_clicked, sizeof(__pyx_k_clicked), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_clip, __pyx_k_clip, sizeof(__pyx_k_clip), 0, 0, 1, 1},
  {&__pyx_n_s_closable, __pyx_k_closable, sizeof(__pyx_k_closable), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_close_current_popup, __pyx_k_close_current_popup, sizeof(__pyx_k_close_current_popup), 0, 0, 1, 1},
  {&__pyx_n_s_collapsed, __pyx_k_collapsed, sizeof(__pyx_k_collapsed), 0, 0, 1, 1},
  {&__pyx_n_s_collapsing_header, __pyx_k_collapsing_header, sizeof(__pyx_k_collapsing_header), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_color_button, __pyx_k_color_button, sizeof(__pyx_k_color_button), 0, 0, 1, 1},
  {&__pyx_n_s_color_edit3, __pyx_k_color_edit3, sizeof(__pyx_k_color_edit3), 0, 0, 1, 1},
  {&__pyx_n_s_color_edit4, __pyx_k_color_edit4, sizeof(__pyx_k_color_edit4), 0, 0, 1, 1},
  {&__pyx_n_s_column_index, __pyx_k_column_index, sizeof(__pyx_k_column_index), 0, 0, 1, 1},
  {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {&__pyx_n_s_combo, __pyx_k_combo, sizeof(__pyx_k_combo), 0, 0, 1, 1},
  {&__pyx_n_s_condition, __pyx_k_condition, sizeof(__pyx_k_condition), 0, 0, 1, 1},
  {&__pyx_n_s_contextlib, __pyx_k_contextlib, sizeof(__pyx_k_contextlib), 0, 0, 1, 1},
  {&__pyx_n_s_contextmanager, __pyx_k_contextmanager, sizeof(__pyx_k_contextmanager), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_current, __pyx_k_current, sizeof(__pyx_k_current), 0, 0, 1, 1},
  {&__pyx_n_s_decimal_precision, __pyx_k_decimal_precision, sizeof(__pyx_k_decimal_precision), 0, 0, 1, 1},
  {&__pyx_n_s_defaults, __pyx_k_defaults, sizeof(__pyx_k_defaults), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_display_format, __pyx_k_display_format, sizeof(__pyx_k_display_format), 0, 0, 1, 1},
  {&__pyx_n_s_drag_float, __pyx_k_drag_float, sizeof(__pyx_k_drag_float), 0, 0, 1, 1},
  {&__pyx_n_s_drag_float2, __pyx_k_drag_float2, sizeof(__pyx_k_drag_float2), 0, 0, 1, 1},
  {&__pyx_n_s_drag_float3, __pyx_k_drag_float3, sizeof(__pyx_k_drag_float3), 0, 0, 1, 1},
  {&__pyx_n_s_drag_float4, __pyx_k_drag_float4, sizeof(__pyx_k_drag_float4), 0, 0, 1, 1},
  {&__pyx_n_s_drag_int, __pyx_k_drag_int, sizeof(__pyx_k_drag_int), 0, 0, 1, 1},
  {&__pyx_n_s_drag_int2, __pyx_k_drag_int2, sizeof(__pyx_k_drag_int2), 0, 0, 1, 1},
  {&__pyx_n_s_drag_int3, __pyx_k_drag_int3, sizeof(__pyx_k_drag_int3), 0, 0, 1, 1},
  {&__pyx_n_s_drag_int4, __pyx_k_drag_int4, sizeof(__pyx_k_drag_int4), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_dummy, __pyx_k_dummy, sizeof(__pyx_k_dummy), 0, 0, 1, 1},
  {&__pyx_n_s_enabled, __pyx_k_enabled, sizeof(__pyx_k_enabled), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_end_child, __pyx_k_end_child, sizeof(__pyx_k_end_child), 0, 0, 1, 1},
  {&__pyx_n_s_end_group, __pyx_k_end_group, sizeof(__pyx_k_end_group), 0, 0, 1, 1},
  {&__pyx_n_s_end_main_menu_bar, __pyx_k_end_main_menu_bar, sizeof(__pyx_k_end_main_menu_bar), 0, 0, 1, 1},
  {&__pyx_n_s_end_menu, __pyx_k_end_menu, sizeof(__pyx_k_end_menu), 0, 0, 1, 1},
  {&__pyx_n_s_end_menu_bar, __pyx_k_end_menu_bar, sizeof(__pyx_k_end_menu_bar), 0, 0, 1, 1},
  {&__pyx_n_s_end_popup, __pyx_k_end_popup, sizeof(__pyx_k_end_popup), 0, 0, 1, 1},
  {&__pyx_n_s_end_tooltip, __pyx_k_end_tooltip, sizeof(__pyx_k_end_tooltip), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_kp_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 0},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_fillvalue, __pyx_k_fillvalue, sizeof(__pyx_k_fillvalue), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_flags_value, __pyx_k_flags_value, sizeof(__pyx_k_flags_value), 0, 0, 1, 1},
  {&__pyx_n_s_font, __pyx_k_font, sizeof(__pyx_k_font), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_frame_padding, __pyx_k_frame_padding, sizeof(__pyx_k_frame_padding), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_get_column_index, __pyx_k_get_column_index, sizeof(__pyx_k_get_column_index), 0, 0, 1, 1},
  {&__pyx_n_s_get_column_offset, __pyx_k_get_column_offset, sizeof(__pyx_k_get_column_offset), 0, 0, 1, 1},
  {&__pyx_n_s_get_column_width, __pyx_k_get_column_width, sizeof(__pyx_k_get_column_width), 0, 0, 1, 1},
  {&__pyx_n_s_get_columns_count, __pyx_k_get_columns_count, sizeof(__pyx_k_get_columns_count), 0, 0, 1, 1},
  {&__pyx_n_s_get_content_region_available, __pyx_k_get_content_region_available, sizeof(__pyx_k_get_content_region_available), 0, 0, 1, 1},
  {&__pyx_n_s_get_content_region_available_wid, __pyx_k_get_content_region_available_wid, sizeof(__pyx_k_get_content_region_available_wid), 0, 0, 1, 1},
  {&__pyx_n_s_get_content_region_max, __pyx_k_get_content_region_max, sizeof(__pyx_k_get_content_region_max), 0, 0, 1, 1},
  {&__pyx_n_s_get_draw_data, __pyx_k_get_draw_data, sizeof(__pyx_k_get_draw_data), 0, 0, 1, 1},
  {&__pyx_n_s_get_io, __pyx_k_get_io, sizeof(__pyx_k_get_io), 0, 0, 1, 1},
  {&__pyx_n_s_get_item_rect_max, __pyx_k_get_item_rect_max, sizeof(__pyx_k_get_item_rect_max), 0, 0, 1, 1},
  {&__pyx_n_s_get_item_rect_min, __pyx_k_get_item_rect_min, sizeof(__pyx_k_get_item_rect_min), 0, 0, 1, 1},
  {&__pyx_n_s_get_item_rect_size, __pyx_k_get_item_rect_size, sizeof(__pyx_k_get_item_rect_size), 0, 0, 1, 1},
  {&__pyx_n_s_get_mouse_cursor, __pyx_k_get_mouse_cursor, sizeof(__pyx_k_get_mouse_cursor), 0, 0, 1, 1},
  {&__pyx_n_s_get_mouse_drag_delta, __pyx_k_get_mouse_drag_delta, sizeof(__pyx_k_get_mouse_drag_delta), 0, 0, 1, 1},
  {&__pyx_n_s_get_style, __pyx_k_get_style, sizeof(__pyx_k_get_style), 0, 0, 1, 1},
  {&__pyx_n_s_get_window_content_region_max, __pyx_k_get_window_content_region_max, sizeof(__pyx_k_get_window_content_region_max), 0, 0, 1, 1},
  {&__pyx_n_s_get_window_content_region_min, __pyx_k_get_window_content_region_min, sizeof(__pyx_k_get_window_content_region_min), 0, 0, 1, 1},
  {&__pyx_n_s_get_window_content_region_width, __pyx_k_get_window_content_region_width, sizeof(__pyx_k_get_window_content_region_width), 0, 0, 1, 1},
  {&__pyx_n_s_get_window_height, __pyx_k_get_window_height, sizeof(__pyx_k_get_window_height), 0, 0, 1, 1},
  {&__pyx_n_s_get_window_position, __pyx_k_get_window_position, sizeof(__pyx_k_get_window_position), 0, 0, 1, 1},
  {&__pyx_n_s_get_window_size, __pyx_k_get_window_size, sizeof(__pyx_k_get_window_size), 0, 0, 1, 1},
  {&__pyx_n_s_get_window_width, __pyx_k_get_window_width, sizeof(__pyx_k_get_window_width), 0, 0, 1, 1},
  {&__pyx_n_s_glyph_ranges, __pyx_k_glyph_ranges, sizeof(__pyx_k_glyph_ranges), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_n_s_height_in_items, __pyx_k_height_in_items, sizeof(__pyx_k_height_in_items), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_identifier, __pyx_k_identifier, sizeof(__pyx_k_identifier), 0, 0, 1, 1},
  {&__pyx_n_s_image, __pyx_k_image, sizeof(__pyx_k_image), 0, 0, 1, 1},
  {&__pyx_n_s_image_button, __pyx_k_image_button, sizeof(__pyx_k_image_button), 0, 0, 1, 1},
  {&__pyx_n_s_imgui_core, __pyx_k_imgui_core, sizeof(__pyx_k_imgui_core), 0, 0, 1, 1},
  {&__pyx_kp_s_imgui_core_pyx, __pyx_k_imgui_core_pyx, sizeof(__pyx_k_imgui_core_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_items, __pyx_k_in_items, sizeof(__pyx_k_in_items), 0, 0, 1, 1},
  {&__pyx_n_s_indent, __pyx_k_indent, sizeof(__pyx_k_indent), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_index_buffer_index_size, __pyx_k_index_buffer_index_size, sizeof(__pyx_k_index_buffer_index_size), 0, 0, 1, 1},
  {&__pyx_n_s_inout_color, __pyx_k_inout_color, sizeof(__pyx_k_inout_color), 0, 0, 1, 1},
  {&__pyx_n_s_inout_current, __pyx_k_inout_current, sizeof(__pyx_k_inout_current), 0, 0, 1, 1},
  {&__pyx_n_s_inout_flags, __pyx_k_inout_flags, sizeof(__pyx_k_inout_flags), 0, 0, 1, 1},
  {&__pyx_n_s_inout_opened, __pyx_k_inout_opened, sizeof(__pyx_k_inout_opened), 0, 0, 1, 1},
  {&__pyx_n_s_inout_selected, __pyx_k_inout_selected, sizeof(__pyx_k_inout_selected), 0, 0, 1, 1},
  {&__pyx_n_s_inout_state, __pyx_k_inout_state, sizeof(__pyx_k_inout_state), 0, 0, 1, 1},
  {&__pyx_n_s_inout_text, __pyx_k_inout_text, sizeof(__pyx_k_inout_text), 0, 0, 1, 1},
  {&__pyx_n_s_inout_value, __pyx_k_inout_value, sizeof(__pyx_k_inout_value), 0, 0, 1, 1},
  {&__pyx_n_s_inout_values, __pyx_k_inout_values, sizeof(__pyx_k_inout_values), 0, 0, 1, 1},
  {&__pyx_n_s_inout_visible, __pyx_k_inout_visible, sizeof(__pyx_k_inout_visible), 0, 0, 1, 1},
  {&__pyx_n_s_input_float, __pyx_k_input_float, sizeof(__pyx_k_input_float), 0, 0, 1, 1},
  {&__pyx_n_s_input_float2, __pyx_k_input_float2, sizeof(__pyx_k_input_float2), 0, 0, 1, 1},
  {&__pyx_n_s_input_float3, __pyx_k_input_float3, sizeof(__pyx_k_input_float3), 0, 0, 1, 1},
  {&__pyx_n_s_input_float4, __pyx_k_input_float4, sizeof(__pyx_k_input_float4), 0, 0, 1, 1},
  {&__pyx_n_s_input_int, __pyx_k_input_int, sizeof(__pyx_k_input_int), 0, 0, 1, 1},
  {&__pyx_n_s_input_int2, __pyx_k_input_int2, sizeof(__pyx_k_input_int2), 0, 0, 1, 1},
  {&__pyx_n_s_input_int3, __pyx_k_input_int3, sizeof(__pyx_k_input_int3), 0, 0, 1, 1},
  {&__pyx_n_s_input_int4, __pyx_k_input_int4, sizeof(__pyx_k_input_int4), 0, 0, 1, 1},
  {&__pyx_n_s_input_text, __pyx_k_input_text, sizeof(__pyx_k_input_text), 0, 0, 1, 1},
  {&__pyx_n_s_input_text_multiline, __pyx_k_input_text_multiline, sizeof(__pyx_k_input_text_multiline), 0, 0, 1, 1},
  {&__pyx_n_s_invisible_button, __pyx_k_invisible_button, sizeof(__pyx_k_invisible_button), 0, 0, 1, 1},
  {&__pyx_n_s_io, __pyx_k_io, sizeof(__pyx_k_io), 0, 0, 1, 1},
  {&__pyx_n_s_is_any_item_active, __pyx_k_is_any_item_active, sizeof(__pyx_k_is_any_item_active), 0, 0, 1, 1},
  {&__pyx_n_s_is_any_item_hovered, __pyx_k_is_any_item_hovered, sizeof(__pyx_k_is_any_item_hovered), 0, 0, 1, 1},
  {&__pyx_n_s_is_item_active, __pyx_k_is_item_active, sizeof(__pyx_k_is_item_active), 0, 0, 1, 1},
  {&__pyx_n_s_is_item_clicked, __pyx_k_is_item_clicked, sizeof(__pyx_k_is_item_clicked), 0, 0, 1, 1},
  {&__pyx_n_s_is_item_hovered, __pyx_k_is_item_hovered, sizeof(__pyx_k_is_item_hovered), 0, 0, 1, 1},
  {&__pyx_n_s_is_item_hovered_rect, __pyx_k_is_item_hovered_rect, sizeof(__pyx_k_is_item_hovered_rect), 0, 0, 1, 1},
  {&__pyx_n_s_is_item_visible, __pyx_k_is_item_visible, sizeof(__pyx_k_is_item_visible), 0, 0, 1, 1},
  {&__pyx_n_s_is_mouse_dragging, __pyx_k_is_mouse_dragging, sizeof(__pyx_k_is_mouse_dragging), 0, 0, 1, 1},
  {&__pyx_n_s_is_mouse_hovering_any_window, __pyx_k_is_mouse_hovering_any_window, sizeof(__pyx_k_is_mouse_hovering_any_window), 0, 0, 1, 1},
  {&__pyx_n_s_is_mouse_hovering_rect, __pyx_k_is_mouse_hovering_rect, sizeof(__pyx_k_is_mouse_hovering_rect), 0, 0, 1, 1},
  {&__pyx_n_s_is_mouse_hovering_window, __pyx_k_is_mouse_hovering_window, sizeof(__pyx_k_is_mouse_hovering_window), 0, 0, 1, 1},
  {&__pyx_n_s_is_pos_hovering_any_window, __pyx_k_is_pos_hovering_any_window, sizeof(__pyx_k_is_pos_hovering_any_window), 0, 0, 1, 1},
  {&__pyx_n_s_is_rect_visible, __pyx_k_is_rect_visible, sizeof(__pyx_k_is_rect_visible), 0, 0, 1, 1},
  {&__pyx_n_s_is_root_window_focused, __pyx_k_is_root_window_focused, sizeof(__pyx_k_is_root_window_focused), 0, 0, 1, 1},
  {&__pyx_n_s_is_root_window_or_any_child_focu, __pyx_k_is_root_window_or_any_child_focu, sizeof(__pyx_k_is_root_window_or_any_child_focu), 0, 0, 1, 1},
  {&__pyx_n_s_is_root_window_or_any_child_hove, __pyx_k_is_root_window_or_any_child_hove, sizeof(__pyx_k_is_root_window_or_any_child_hove), 0, 0, 1, 1},
  {&__pyx_n_s_is_window_collapsed, __pyx_k_is_window_collapsed, sizeof(__pyx_k_is_window_collapsed), 0, 0, 1, 1},
  {&__pyx_n_s_is_window_focused, __pyx_k_is_window_focused, sizeof(__pyx_k_is_window_focused), 0, 0, 1, 1},
  {&__pyx_n_s_is_window_hovered, __pyx_k_is_window_hovered, sizeof(__pyx_k_is_window_hovered), 0, 0, 1, 1},
  {&__pyx_n_s_istyled, __pyx_k_istyled, sizeof(__pyx_k_istyled), 0, 0, 1, 1},
  {&__pyx_n_s_item, __pyx_k_item, sizeof(__pyx_k_item), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_iterator, __pyx_k_iterator, sizeof(__pyx_k_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_izip_longest, __pyx_k_izip_longest, sizeof(__pyx_k_izip_longest), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_label_text, __pyx_k_label_text, sizeof(__pyx_k_label_text), 0, 0, 1, 1},
  {&__pyx_n_s_listbox, __pyx_k_listbox, sizeof(__pyx_k_listbox), 0, 0, 1, 1},
  {&__pyx_n_s_listbox_footer, __pyx_k_listbox_footer, sizeof(__pyx_k_listbox_footer), 0, 0, 1, 1},
  {&__pyx_n_s_listbox_header, __pyx_k_listbox_header, sizeof(__pyx_k_listbox_header), 0, 0, 1, 1},
  {&__pyx_n_s_lock_threshold, __pyx_k_lock_threshold, sizeof(__pyx_k_lock_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_value, __pyx_k_max_value, sizeof(__pyx_k_max_value), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_menu_item, __pyx_k_menu_item, sizeof(__pyx_k_menu_item), 0, 0, 1, 1},
  {&__pyx_n_s_min_value, __pyx_k_min_value, sizeof(__pyx_k_min_value), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_mouse_button, __pyx_k_mouse_button, sizeof(__pyx_k_mouse_button), 0, 0, 1, 1},
  {&__pyx_n_s_mouse_cursor_type, __pyx_k_mouse_cursor_type, sizeof(__pyx_k_mouse_cursor_type), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_namedtuple, __pyx_k_namedtuple, sizeof(__pyx_k_namedtuple), 0, 0, 1, 1},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_new_frame, __pyx_k_new_frame, sizeof(__pyx_k_new_frame), 0, 0, 1, 1},
  {&__pyx_n_s_new_line, __pyx_k_new_line, sizeof(__pyx_k_new_line), 0, 0, 1, 1},
  {&__pyx_n_s_next_column, __pyx_k_next_column, sizeof(__pyx_k_next_column), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_offset_x, __pyx_k_offset_x, sizeof(__pyx_k_offset_x), 0, 0, 1, 1},
  {&__pyx_n_s_open_popup, __pyx_k_open_popup, sizeof(__pyx_k_open_popup), 0, 0, 1, 1},
  {&__pyx_n_s_opened, __pyx_k_opened, sizeof(__pyx_k_opened), 0, 0, 1, 1},
  {&__pyx_n_s_outline_border, __pyx_k_outline_border, sizeof(__pyx_k_outline_border), 0, 0, 1, 1},
  {&__pyx_n_s_output, __pyx_k_output, sizeof(__pyx_k_output), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_kp_s_pair_param_must_be_length_of_2, __pyx_k_pair_param_must_be_length_of_2, sizeof(__pyx_k_pair_param_must_be_length_of_2), 0, 0, 1, 0},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pop_font, __pyx_k_pop_font, sizeof(__pyx_k_pop_font), 0, 0, 1, 1},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_n_s_position_x, __pyx_k_position_x, sizeof(__pyx_k_position_x), 0, 0, 1, 1},
  {&__pyx_n_s_position_y, __pyx_k_position_y, sizeof(__pyx_k_position_y), 0, 0, 1, 1},
  {&__pyx_n_s_power, __pyx_k_power, sizeof(__pyx_k_power), 0, 0, 1, 1},
  {&__pyx_n_s_push_font, __pyx_k_push_font, sizeof(__pyx_k_push_font), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_kp_s_quadruple_param_must_be_length_o, __pyx_k_quadruple_param_must_be_length_o, sizeof(__pyx_k_quadruple_param_must_be_length_o), 0, 0, 1, 0},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_r_max_x, __pyx_k_r_max_x, sizeof(__pyx_k_r_max_x), 0, 0, 1, 1},
  {&__pyx_n_s_r_max_y, __pyx_k_r_max_y, sizeof(__pyx_k_r_max_y), 0, 0, 1, 1},
  {&__pyx_n_s_r_min_x, __pyx_k_r_min_x, sizeof(__pyx_k_r_min_x), 0, 0, 1, 1},
  {&__pyx_n_s_r_min_y, __pyx_k_r_min_y, sizeof(__pyx_k_r_min_y), 0, 0, 1, 1},
  {&__pyx_n_s_radio_button, __pyx_k_radio_button, sizeof(__pyx_k_radio_button), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_render, __pyx_k_render, sizeof(__pyx_k_render), 0, 0, 1, 1},
  {&__pyx_n_s_render_callback, __pyx_k_render_callback, sizeof(__pyx_k_render_callback), 0, 0, 1, 1},
  {&__pyx_n_s_require_pointer, __pyx_k_require_pointer, sizeof(__pyx_k_require_pointer), 0, 0, 1, 1},
  {&__pyx_n_s_reset_mouse_drag_delta, __pyx_k_reset_mouse_drag_delta, sizeof(__pyx_k_reset_mouse_drag_delta), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_kp_s_s_improperly_initialized, __pyx_k_s_improperly_initialized, sizeof(__pyx_k_s_improperly_initialized), 0, 0, 1, 0},
  {&__pyx_n_s_same_line, __pyx_k_same_line, sizeof(__pyx_k_same_line), 0, 0, 1, 1},
  {&__pyx_n_s_scale, __pyx_k_scale, sizeof(__pyx_k_scale), 0, 0, 1, 1},
  {&__pyx_n_s_selectable, __pyx_k_selectable, sizeof(__pyx_k_selectable), 0, 0, 1, 1},
  {&__pyx_n_s_selected, __pyx_k_selected, sizeof(__pyx_k_selected), 0, 0, 1, 1},
  {&__pyx_kp_s_self__ptr_cannot_be_converted_to, __pyx_k_self__ptr_cannot_be_converted_to, sizeof(__pyx_k_self__ptr_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_kp_s_self_ranges_ptr_cannot_be_conver, __pyx_k_self_ranges_ptr_cannot_be_conver, sizeof(__pyx_k_self_ranges_ptr_cannot_be_conver), 0, 0, 1, 0},
  {&__pyx_kp_s_self_ref_cannot_be_converted_to, __pyx_k_self_ref_cannot_be_converted_to, sizeof(__pyx_k_self_ref_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_separator, __pyx_k_separator, sizeof(__pyx_k_separator), 0, 0, 1, 1},
  {&__pyx_n_s_set_column_offset, __pyx_k_set_column_offset, sizeof(__pyx_k_set_column_offset), 0, 0, 1, 1},
  {&__pyx_n_s_set_item_allow_overlap, __pyx_k_set_item_allow_overlap, sizeof(__pyx_k_set_item_allow_overlap), 0, 0, 1, 1},
  {&__pyx_n_s_set_mouse_cursor, __pyx_k_set_mouse_cursor, sizeof(__pyx_k_set_mouse_cursor), 0, 0, 1, 1},
  {&__pyx_n_s_set_next_window_centered, __pyx_k_set_next_window_centered, sizeof(__pyx_k_set_next_window_centered), 0, 0, 1, 1},
  {&__pyx_n_s_set_next_window_collapsed, __pyx_k_set_next_window_collapsed, sizeof(__pyx_k_set_next_window_collapsed), 0, 0, 1, 1},
  {&__pyx_n_s_set_next_window_focus, __pyx_k_set_next_window_focus, sizeof(__pyx_k_set_next_window_focus), 0, 0, 1, 1},
  {&__pyx_n_s_set_next_window_position, __pyx_k_set_next_window_position, sizeof(__pyx_k_set_next_window_position), 0, 0, 1, 1},
  {&__pyx_n_s_set_next_window_size, __pyx_k_set_next_window_size, sizeof(__pyx_k_set_next_window_size), 0, 0, 1, 1},
  {&__pyx_n_s_set_tooltip, __pyx_k_set_tooltip, sizeof(__pyx_k_set_tooltip), 0, 0, 1, 1},
  {&__pyx_n_s_set_window_font_scale, __pyx_k_set_window_font_scale, sizeof(__pyx_k_set_window_font_scale), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_shortcut, __pyx_k_shortcut, sizeof(__pyx_k_shortcut), 0, 0, 1, 1},
  {&__pyx_n_s_show_alpha, __pyx_k_show_alpha, sizeof(__pyx_k_show_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_show_metrics_window, __pyx_k_show_metrics_window, sizeof(__pyx_k_show_metrics_window), 0, 0, 1, 1},
  {&__pyx_n_s_show_style_editor, __pyx_k_show_style_editor, sizeof(__pyx_k_show_style_editor), 0, 0, 1, 1},
  {&__pyx_n_s_show_test_window, __pyx_k_show_test_window, sizeof(__pyx_k_show_test_window), 0, 0, 1, 1},
  {&__pyx_n_s_show_user_guide, __pyx_k_show_user_guide, sizeof(__pyx_k_show_user_guide), 0, 0, 1, 1},
  {&__pyx_n_s_shutdown, __pyx_k_shutdown, sizeof(__pyx_k_shutdown), 0, 0, 1, 1},
  {&__pyx_n_s_signatures, __pyx_k_signatures, sizeof(__pyx_k_signatures), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_size_height, __pyx_k_size_height, sizeof(__pyx_k_size_height), 0, 0, 1, 1},
  {&__pyx_n_s_size_pixels, __pyx_k_size_pixels, sizeof(__pyx_k_size_pixels), 0, 0, 1, 1},
  {&__pyx_n_s_size_width, __pyx_k_size_width, sizeof(__pyx_k_size_width), 0, 0, 1, 1},
  {&__pyx_n_s_slider_float, __pyx_k_slider_float, sizeof(__pyx_k_slider_float), 0, 0, 1, 1},
  {&__pyx_n_s_slider_float2, __pyx_k_slider_float2, sizeof(__pyx_k_slider_float2), 0, 0, 1, 1},
  {&__pyx_n_s_slider_float3, __pyx_k_slider_float3, sizeof(__pyx_k_slider_float3), 0, 0, 1, 1},
  {&__pyx_n_s_slider_float4, __pyx_k_slider_float4, sizeof(__pyx_k_slider_float4), 0, 0, 1, 1},
  {&__pyx_n_s_slider_int, __pyx_k_slider_int, sizeof(__pyx_k_slider_int), 0, 0, 1, 1},
  {&__pyx_n_s_slider_int2, __pyx_k_slider_int2, sizeof(__pyx_k_slider_int2), 0, 0, 1, 1},
  {&__pyx_n_s_slider_int3, __pyx_k_slider_int3, sizeof(__pyx_k_slider_int3), 0, 0, 1, 1},
  {&__pyx_n_s_slider_int4, __pyx_k_slider_int4, sizeof(__pyx_k_slider_int4), 0, 0, 1, 1},
  {&__pyx_n_s_small_button, __pyx_k_small_button, sizeof(__pyx_k_small_button), 0, 0, 1, 1},
  {&__pyx_n_s_small_height, __pyx_k_small_height, sizeof(__pyx_k_small_height), 0, 0, 1, 1},
  {&__pyx_n_s_spacing, __pyx_k_spacing, sizeof(__pyx_k_spacing), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_step_fast, __pyx_k_step_fast, sizeof(__pyx_k_step_fast), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_style, __pyx_k_style, sizeof(__pyx_k_style), 0, 0, 1, 1},
  {&__pyx_n_s_styled, __pyx_k_styled, sizeof(__pyx_k_styled), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_text_colored, __pyx_k_text_colored, sizeof(__pyx_k_text_colored), 0, 0, 1, 1},
  {&__pyx_n_s_text_unformatted, __pyx_k_text_unformatted, sizeof(__pyx_k_text_unformatted), 0, 0, 1, 1},
  {&__pyx_n_s_texture_id, __pyx_k_texture_id, sizeof(__pyx_k_texture_id), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tint_color, __pyx_k_tint_color, sizeof(__pyx_k_tint_color), 0, 0, 1, 1},
  {&__pyx_n_s_title, __pyx_k_title, sizeof(__pyx_k_title), 0, 0, 1, 1},
  {&__pyx_n_s_tree_node, __pyx_k_tree_node, sizeof(__pyx_k_tree_node), 0, 0, 1, 1},
  {&__pyx_n_s_tree_pop, __pyx_k_tree_pop, sizeof(__pyx_k_tree_pop), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unindent, __pyx_k_unindent, sizeof(__pyx_k_unindent), 0, 0, 1, 1},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_kp_s_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 1, 0},
  {&__pyx_n_s_uv0, __pyx_k_uv0, sizeof(__pyx_k_uv0), 0, 0, 1, 1},
  {&__pyx_n_s_uv1, __pyx_k_uv1, sizeof(__pyx_k_uv1), 0, 0, 1, 1},
  {&__pyx_n_s_v_slider_float, __pyx_k_v_slider_float, sizeof(__pyx_k_v_slider_float), 0, 0, 1, 1},
  {&__pyx_n_s_v_slider_int, __pyx_k_v_slider_int, sizeof(__pyx_k_v_slider_int), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_value0, __pyx_k_value0, sizeof(__pyx_k_value0), 0, 0, 1, 1},
  {&__pyx_n_s_value1, __pyx_k_value1, sizeof(__pyx_k_value1), 0, 0, 1, 1},
  {&__pyx_n_s_value2, __pyx_k_value2, sizeof(__pyx_k_value2), 0, 0, 1, 1},
  {&__pyx_n_s_value3, __pyx_k_value3, sizeof(__pyx_k_value3), 0, 0, 1, 1},
  {&__pyx_n_s_var, __pyx_k_var, sizeof(__pyx_k_var), 0, 0, 1, 1},
  {&__pyx_n_s_variable, __pyx_k_variable, sizeof(__pyx_k_variable), 0, 0, 1, 1},
  {&__pyx_n_s_variables_and_values, __pyx_k_variables_and_values, sizeof(__pyx_k_variables_and_values), 0, 0, 1, 1},
  {&__pyx_n_s_vertex_buffer_vertex_col_offset, __pyx_k_vertex_buffer_vertex_col_offset, sizeof(__pyx_k_vertex_buffer_vertex_col_offset), 0, 0, 1, 1},
  {&__pyx_n_s_vertex_buffer_vertex_pos_offset, __pyx_k_vertex_buffer_vertex_pos_offset, sizeof(__pyx_k_vertex_buffer_vertex_pos_offset), 0, 0, 1, 1},
  {&__pyx_n_s_vertex_buffer_vertex_size, __pyx_k_vertex_buffer_vertex_size, sizeof(__pyx_k_vertex_buffer_vertex_size), 0, 0, 1, 1},
  {&__pyx_n_s_vertex_buffer_vertex_uv_offset, __pyx_k_vertex_buffer_vertex_uv_offset, sizeof(__pyx_k_vertex_buffer_vertex_uv_offset), 0, 0, 1, 1},
  {&__pyx_n_s_visible, __pyx_k_visible, sizeof(__pyx_k_visible), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_wrap_pos_x, __pyx_k_wrap_pos_x, sizeof(__pyx_k_wrap_pos_x), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_s_zip_longest, __pyx_k_zip_longest, sizeof(__pyx_k_zip_longest), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(0, 19, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 211, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 313, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 313, __pyx_L1_error)
  #endif
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 528, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 981, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 1180, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 1753, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 146, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(1, 396, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(1, 599, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(1, 818, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "imgui/core.pyx":196
 * 
 * cdef bytes _bytes(str text):
 *     return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "imgui/core.pyx":211
 * 
 *     if len(pair) != 2:
 *         raise ValueError("pair param must be length of 2")             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y = pair
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_pair_param_must_be_length_of_2); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "imgui/core.pyx":230
 * 
 *     if len(quadruple) != 4:
 *         raise ValueError("quadruple param must be length of 4")             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y, vec.z, vec.w = quadruple
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_quadruple_param_must_be_length_o); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ref cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ref cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self_ref_cannot_be_converted_to); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("self.ref cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ref cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_self_ref_cannot_be_converted_to); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_self_ranges_ptr_cannot_be_conver); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":4
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ranges_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_self_ranges_ptr_cannot_be_conver); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "imgui/core.pyx":862
 *         # todo: modified in place
 *         cdef cvarray mouse_down = cvarray(
 *             shape=(5,),             # <<<<<<<<<<<<<<
 *             format='b',
 *             itemsize=sizeof(bool),
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_int_5); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "imgui/core.pyx":923
 *         # todo: modified in place
 *         cdef cvarray keys_down = cvarray(
 *             shape=(512,),             # <<<<<<<<<<<<<<
 *             format='b',
 *             itemsize=sizeof(bool),
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_int_512); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "imgui/core.pyx":1180
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id name, float width=0, float height=0, bool border=False,
 *     cimgui.ImGuiWindowFlags flags=0
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s__26); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s__28); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_No_matching_signature_found); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_Function_call_with_ambiguous_arg); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "imgui/core.pyx":2618
 *     float width,
 *     float height,
 *     tuple uv0=(0, 0),             # <<<<<<<<<<<<<<
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 */
  __pyx_tuple__37 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 2618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "imgui/core.pyx":2619
 *     float height,
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),             # <<<<<<<<<<<<<<
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),
 */
  __pyx_tuple__38 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 2619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "imgui/core.pyx":2620
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),             # <<<<<<<<<<<<<<
 *     tuple border_color=(0, 0, 0, 0),
 *     int frame_padding=-1,
 */
  __pyx_tuple__39 = PyTuple_Pack(4, __pyx_int_1, __pyx_int_1, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 2620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "imgui/core.pyx":2621
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),             # <<<<<<<<<<<<<<
 *     int frame_padding=-1,
 * ):
 */
  __pyx_tuple__40 = PyTuple_Pack(4, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 2621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "imgui/core.pyx":2671
 *     float width,
 *     float height,
 *     tuple uv0=(0, 0),             # <<<<<<<<<<<<<<
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 */
  __pyx_tuple__41 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "imgui/core.pyx":2672
 *     float height,
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),             # <<<<<<<<<<<<<<
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),
 */
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 2672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "imgui/core.pyx":2673
 *     tuple uv0=(0, 0),
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),             # <<<<<<<<<<<<<<
 *     tuple border_color=(0, 0, 0, 0),
 * ):
 */
  __pyx_tuple__43 = PyTuple_Pack(4, __pyx_int_1, __pyx_int_1, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 2673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "imgui/core.pyx":2674
 *     tuple uv1=(1, 1),
 *     tuple tint_color=(1, 1, 1, 1),
 *     tuple border_color=(0, 0, 0, 0),             # <<<<<<<<<<<<<<
 * ):
 *     """Display image.
 */
  __pyx_tuple__44 = PyTuple_Pack(4, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 2674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "imgui/core.pyx":4817
 *             cimgui.PushStyleVar(variable, float(value))
 *     except ValueError:
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "Style value must be float or two-elements list/tuple"
 *         )
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_Style_value_must_be_float_or_two); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 4817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "View.MemoryView":131
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(1, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "View.MemoryView":134
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "View.MemoryView":137
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_n_s_ASCII); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "View.MemoryView":146
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(1, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "View.MemoryView":174
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(1, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "View.MemoryView":190
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(1, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "View.MemoryView":484
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "View.MemoryView":556
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "View.MemoryView":563
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__57 = PyTuple_New(1); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__57, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "View.MemoryView":668
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_slice__60 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__60)) __PYX_ERR(1, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__60);
  __Pyx_GIVEREF(__pyx_slice__60);

  /* "View.MemoryView":671
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
  __pyx_slice__61 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__61)) __PYX_ERR(1, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__61);
  __Pyx_GIVEREF(__pyx_slice__61);

  /* "View.MemoryView":682
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
  __pyx_slice__62 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__62)) __PYX_ERR(1, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__62);
  __Pyx_GIVEREF(__pyx_slice__62);

  /* "View.MemoryView":689
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "imgui/core.pyx":972
 * 
 * _io = None
 * def get_io():             # <<<<<<<<<<<<<<
 *     global _io
 * 
 */
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_io, 972, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(0, 972, __pyx_L1_error)

  /* "imgui/core.pyx":980
 *     return _io
 * 
 * def get_style():             # <<<<<<<<<<<<<<
 *     raise NotImplementedError
 * 
 */
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_style, 980, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(0, 980, __pyx_L1_error)

  /* "imgui/core.pyx":984
 * 
 * 
 * def new_frame():             # <<<<<<<<<<<<<<
 *     """Start a new frame.
 * 
 */
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_new_frame, 984, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 984, __pyx_L1_error)

  /* "imgui/core.pyx":996
 * 
 * 
 * def render():             # <<<<<<<<<<<<<<
 *     """Finalize frame, set rendering data, and run render callback (if set).
 * 
 */
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_render, 996, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 996, __pyx_L1_error)

  /* "imgui/core.pyx":1005
 * 
 * 
 * def shutdown():             # <<<<<<<<<<<<<<
 *     """Shutdown ImGui context.
 * 
 */
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_shutdown, 1005, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(0, 1005, __pyx_L1_error)

  /* "imgui/core.pyx":1014
 * 
 * 
 * def show_user_guide():             # <<<<<<<<<<<<<<
 *     """Show ImGui user guide editor.
 * 
 */
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_show_user_guide, 1014, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 1014, __pyx_L1_error)

  /* "imgui/core.pyx":1033
 * 
 * 
 * def show_style_editor(GuiStyle style=None):             # <<<<<<<<<<<<<<
 *     """Show ImGui style editor.
 * 
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_n_s_style); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_show_style_editor, 1033, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 1033, __pyx_L1_error)

  /* "imgui/core.pyx":1057
 * 
 * 
 * def show_test_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui test window.
 * 
 */
  __pyx_tuple__74 = PyTuple_Pack(2, __pyx_n_s_closable, __pyx_n_s_opened); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_show_test_window, 1057, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 1057, __pyx_L1_error)

  /* "imgui/core.pyx":1086
 * 
 * 
 * def show_metrics_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui metrics window.
 * 
 */
  __pyx_tuple__76 = PyTuple_Pack(2, __pyx_n_s_closable, __pyx_n_s_opened); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_show_metrics_window, 1086, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 1086, __pyx_L1_error)

  /* "imgui/core.pyx":1115
 * 
 * 
 * def begin(str name, closable=False, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin a window.
 * 
 */
  __pyx_tuple__78 = PyTuple_Pack(4, __pyx_n_s_name_2, __pyx_n_s_closable, __pyx_n_s_flags, __pyx_n_s_opened); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin, 1115, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 1115, __pyx_L1_error)

  /* "imgui/core.pyx":1147
 * 
 * 
 * def get_draw_data():             # <<<<<<<<<<<<<<
 *     """Get draw data.
 * 
 */
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_draw_data, 1147, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(0, 1147, __pyx_L1_error)

  /* "imgui/core.pyx":1163
 * 
 * 
 * def end():             # <<<<<<<<<<<<<<
 *     """End a window.
 * 
 */
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end, 1163, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 1163, __pyx_L1_error)

  /* "imgui/core.pyx":1180
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id name, float width=0, float height=0, bool border=False,
 *     cimgui.ImGuiWindowFlags flags=0
 */
  __pyx_tuple__82 = PyTuple_Pack(5, __pyx_n_s_name_2, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_border, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_child, 1180, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 1180, __pyx_L1_error)

  /* "imgui/core.pyx":1237
 *     )
 * 
 * def end_child():             # <<<<<<<<<<<<<<
 *     """End scrolling region.
 * 
 */
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_child, 1237, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(0, 1237, __pyx_L1_error)

  /* "imgui/core.pyx":1246
 * 
 * 
 * def get_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get current content boundaries in window coordinates.
 * 
 */
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_content_region_max, 1246, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 1246, __pyx_L1_error)

  /* "imgui/core.pyx":1261
 * 
 * 
 * def get_content_region_available():             # <<<<<<<<<<<<<<
 *     """Get available content region.
 * 
 */
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_content_region_available, 1261, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 1261, __pyx_L1_error)

  /* "imgui/core.pyx":1278
 * 
 * 
 * def get_content_region_available_width():             # <<<<<<<<<<<<<<
 *     """Get available content region width.
 * 
 */
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_content_region_available_wid, 1278, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 1278, __pyx_L1_error)

  /* "imgui/core.pyx":1290
 * 
 * 
 * def get_window_content_region_min():             # <<<<<<<<<<<<<<
 *     """Get minimal current window content boundaries in window coordinates.
 * 
 */
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_window_content_region_min, 1290, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 1290, __pyx_L1_error)

  /* "imgui/core.pyx":1304
 * 
 * 
 * def get_window_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get maximal current window content boundaries in window coordinates.
 * 
 */
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_window_content_region_max, 1304, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 1304, __pyx_L1_error)

  /* "imgui/core.pyx":1318
 * 
 * 
 * def get_window_content_region_width():             # <<<<<<<<<<<<<<
 *     """Get available current window content region width.
 * 
 */
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_window_content_region_width, 1318, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 1318, __pyx_L1_error)

  /* "imgui/core.pyx":1330
 * 
 * 
 * def set_window_font_scale(float scale):             # <<<<<<<<<<<<<<
 *     """Adjust per-window font scale for current window.
 * 
 */
  __pyx_tuple__91 = PyTuple_Pack(2, __pyx_n_s_scale, __pyx_n_s_scale); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_window_font_scale, 1330, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(0, 1330, __pyx_L1_error)

  /* "imgui/core.pyx":1356
 * 
 * 
 * def set_next_window_collapsed(             # <<<<<<<<<<<<<<
 *     cimgui.bool collapsed, cimgui.ImGuiSetCond condition=ALWAYS
 * ):
 */
  __pyx_tuple__93 = PyTuple_Pack(2, __pyx_n_s_collapsed, __pyx_n_s_condition); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_next_window_collapsed, 1356, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 1356, __pyx_L1_error)

  /* "imgui/core.pyx":1386
 * 
 * 
 * def set_next_window_focus():             # <<<<<<<<<<<<<<
 *     """Set next window to be focused (most front).
 * 
 */
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_next_window_focus, 1386, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(0, 1386, __pyx_L1_error)

  /* "imgui/core.pyx":1395
 * 
 * 
 * def get_window_position():             # <<<<<<<<<<<<<<
 *     """Get current window position.
 * 
 */
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_window_position, 1395, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(0, 1395, __pyx_L1_error)

  /* "imgui/core.pyx":1410
 * 
 * 
 * def get_window_size():             # <<<<<<<<<<<<<<
 *     """Get current window size.
 * 
 */
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_window_size, 1410, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 1410, __pyx_L1_error)

  /* "imgui/core.pyx":1422
 * 
 * 
 * def get_window_width():             # <<<<<<<<<<<<<<
 *     """Get current window width.
 * 
 */
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_window_width, 1422, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(0, 1422, __pyx_L1_error)

  /* "imgui/core.pyx":1434
 * 
 * 
 * def get_window_height():             # <<<<<<<<<<<<<<
 *     """Get current window height.
 * 
 */
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_window_height, 1434, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 1434, __pyx_L1_error)

  /* "imgui/core.pyx":1446
 * 
 * 
 * def set_next_window_position(             # <<<<<<<<<<<<<<
 *     float x, float y, cimgui.ImGuiSetCond condition=ALWAYS
 * ):
 */
  __pyx_tuple__100 = PyTuple_Pack(3, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_condition); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 1446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_next_window_position, 1446, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 1446, __pyx_L1_error)

  /* "imgui/core.pyx":1477
 * 
 * 
 * def set_next_window_centered(cimgui.ImGuiSetCond condition=ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set next window position to be centered on screen.
 * 
 */
  __pyx_tuple__102 = PyTuple_Pack(1, __pyx_n_s_condition); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_next_window_centered, 1477, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 1477, __pyx_L1_error)

  /* "imgui/core.pyx":1503
 * 
 * 
 * def set_next_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiSetCond condition=ALWAYS
 * ):
 */
  __pyx_tuple__104 = PyTuple_Pack(3, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_condition); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_next_window_size, 1503, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 1503, __pyx_L1_error)

  /* "imgui/core.pyx":1534
 * 
 * 
 * def is_window_collapsed():             # <<<<<<<<<<<<<<
 *     """Check if current window is collapsed.
 * 
 */
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_window_collapsed, 1534, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(0, 1534, __pyx_L1_error)

  /* "imgui/core.pyx":1543
 * 
 * 
 * def tree_node(str text, cimgui.ImGuiTreeNodeFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Draw a tree node.
 * 
 */
  __pyx_tuple__107 = PyTuple_Pack(2, __pyx_n_s_text, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__107, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_tree_node, 1543, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(0, 1543, __pyx_L1_error)

  /* "imgui/core.pyx":1575
 * 
 * 
 * def tree_pop():             # <<<<<<<<<<<<<<
 *     """Called to clear the tree nodes stack and return back the identation.
 * 
 */
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_tree_pop, 1575, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(0, 1575, __pyx_L1_error)

  /* "imgui/core.pyx":1587
 * 
 * 
 * def collapsing_header(             # <<<<<<<<<<<<<<
 *     str text,
 *     visible=None,
 */
  __pyx_tuple__110 = PyTuple_Pack(5, __pyx_n_s_text, __pyx_n_s_visible, __pyx_n_s_flags, __pyx_n_s_inout_opened, __pyx_n_s_clicked); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_collapsing_header, 1587, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 1587, __pyx_L1_error)

  /* "imgui/core.pyx":1643
 * 
 * 
 * def selectable(             # <<<<<<<<<<<<<<
 *     str label,
 *     selected=False,
 */
  __pyx_tuple__112 = PyTuple_Pack(6, __pyx_n_s_label, __pyx_n_s_selected, __pyx_n_s_flags, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_inout_selected); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 1643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_selectable, 1643, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(0, 1643, __pyx_L1_error)

  /* "imgui/core.pyx":1707
 * 
 * 
 * def listbox(             # <<<<<<<<<<<<<<
 *     str label,
 *     int current,
 */
  __pyx_tuple__114 = PyTuple_Pack(10, __pyx_n_s_label, __pyx_n_s_current, __pyx_n_s_items, __pyx_n_s_height_in_items, __pyx_n_s_inout_current, __pyx_n_s_in_items, __pyx_n_s_index, __pyx_n_s_item, __pyx_n_s_opened, __pyx_n_s_i); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(0, 1707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(4, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_listbox, 1707, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(0, 1707, __pyx_L1_error)

  /* "imgui/core.pyx":1772
 * 
 * 
 * def listbox_header(             # <<<<<<<<<<<<<<
 *     str label,
 *     width=0,
 */
  __pyx_tuple__116 = PyTuple_Pack(3, __pyx_n_s_label, __pyx_n_s_width, __pyx_n_s_height); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 1772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_listbox_header, 1772, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(0, 1772, __pyx_L1_error)

  /* "imgui/core.pyx":1817
 * 
 * 
 * def listbox_footer():             # <<<<<<<<<<<<<<
 *     """Closing the listbox, previously opened by :func:`listbox_header()`.
 * 
 */
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_listbox_footer, 1817, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(0, 1817, __pyx_L1_error)

  /* "imgui/core.pyx":1828
 * 
 * 
 * def set_tooltip(str text):             # <<<<<<<<<<<<<<
 *     """Set tooltip under mouse-cursor.
 * 
 */
  __pyx_tuple__119 = PyTuple_Pack(1, __pyx_n_s_text); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 1828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);
  __pyx_codeobj__120 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__119, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_tooltip, 1828, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__120)) __PYX_ERR(0, 1828, __pyx_L1_error)

  /* "imgui/core.pyx":1853
 * 
 * 
 * def begin_tooltip():             # <<<<<<<<<<<<<<
 *     """Use to create full-featured tooltip windows that aren't just text.
 * 
 */
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_tooltip, 1853, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(0, 1853, __pyx_L1_error)

  /* "imgui/core.pyx":1879
 * 
 * 
 * def end_tooltip():             # <<<<<<<<<<<<<<
 *     """End tooltip window.
 * 
 */
  __pyx_codeobj__122 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_tooltip, 1879, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__122)) __PYX_ERR(0, 1879, __pyx_L1_error)

  /* "imgui/core.pyx":1890
 * 
 * 
 * def begin_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Create new full-screen menu bar.
 * 
 */
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_main_menu_bar, 1890, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(0, 1890, __pyx_L1_error)

  /* "imgui/core.pyx":1925
 * 
 * 
 * def end_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close main menu bar context.
 * 
 */
  __pyx_codeobj__124 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_main_menu_bar, 1925, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__124)) __PYX_ERR(0, 1925, __pyx_L1_error)

  /* "imgui/core.pyx":1939
 * 
 * 
 * def begin_menu_bar():             # <<<<<<<<<<<<<<
 *     """Append new menu menu bar to current window.
 * 
 */
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_menu_bar, 1939, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(0, 1939, __pyx_L1_error)

  /* "imgui/core.pyx":1976
 * 
 * 
 * def end_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close menu bar context.
 * 
 */
  __pyx_codeobj__126 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_menu_bar, 1976, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__126)) __PYX_ERR(0, 1976, __pyx_L1_error)

  /* "imgui/core.pyx":1990
 * 
 * 
 * def begin_menu(str label, enabled=True):             # <<<<<<<<<<<<<<
 *     """Create new expandable menu in current menu bar.
 * 
 */
  __pyx_tuple__127 = PyTuple_Pack(2, __pyx_n_s_label, __pyx_n_s_enabled); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);
  __pyx_codeobj__128 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__127, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_menu, 1990, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__128)) __PYX_ERR(0, 1990, __pyx_L1_error)

  /* "imgui/core.pyx":2014
 * 
 * 
 * def end_menu():             # <<<<<<<<<<<<<<
 *     """Close menu context.
 * 
 */
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_menu, 2014, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(0, 2014, __pyx_L1_error)

  /* "imgui/core.pyx":2028
 * 
 * 
 * def menu_item(             # <<<<<<<<<<<<<<
 *     str name, str shortcut=None, cimgui.bool selected=None, enabled=True
 * ):
 */
  __pyx_tuple__130 = PyTuple_Pack(6, __pyx_n_s_name_2, __pyx_n_s_shortcut, __pyx_n_s_selected, __pyx_n_s_enabled, __pyx_n_s_inout_selected, __pyx_n_s_clicked); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 2028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_menu_item, 2028, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(0, 2028, __pyx_L1_error)

  /* "imgui/core.pyx":2081
 * 
 * 
 * def open_popup(str name):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */
  __pyx_tuple__132 = PyTuple_Pack(1, __pyx_n_s_name_2); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(0, 2081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__132, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_open_popup, 2081, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) __PYX_ERR(0, 2081, __pyx_L1_error)

  /* "imgui/core.pyx":2118
 * 
 * 
 * def begin_popup(str name):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */
  __pyx_tuple__134 = PyTuple_Pack(1, __pyx_n_s_name_2); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(0, 2118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__134, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_popup, 2118, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(0, 2118, __pyx_L1_error)

  /* "imgui/core.pyx":2162
 * 
 * 
 * def begin_popup_modal(str title, visible=None, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin pouring popup contents.
 * 
 */
  __pyx_tuple__136 = PyTuple_Pack(4, __pyx_n_s_title, __pyx_n_s_visible, __pyx_n_s_flags, __pyx_n_s_inout_visible); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(0, 2162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_popup_modal, 2162, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(0, 2162, __pyx_L1_error)

  /* "imgui/core.pyx":2218
 * 
 * 
 * def begin_popup_context_item(str name, int mouse_button=1):             # <<<<<<<<<<<<<<
 *     """This is a helper function to handle the most simple case of associating
 *     one named popup to one given widget.
 */
  __pyx_tuple__138 = PyTuple_Pack(2, __pyx_n_s_name_2, __pyx_n_s_mouse_button); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__138, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_popup_context_item, 2218, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(0, 2218, __pyx_L1_error)

  /* "imgui/core.pyx":2254
 * 
 * 
 * def begin_popup_context_window(             # <<<<<<<<<<<<<<
 *     bool also_over_items=True,
 *     str name=None,
 */
  __pyx_tuple__140 = PyTuple_Pack(3, __pyx_n_s_also_over_items, __pyx_n_s_name_2, __pyx_n_s_mouse_button); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(0, 2254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__140, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_popup_context_window, 2254, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(0, 2254, __pyx_L1_error)

  /* "imgui/core.pyx":2308
 * 
 * 
 * def end_popup():             # <<<<<<<<<<<<<<
 *     """End a popup window.
 * 
 */
  __pyx_codeobj__142 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_popup, 2308, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__142)) __PYX_ERR(0, 2308, __pyx_L1_error)

  /* "imgui/core.pyx":2322
 * 
 * 
 * def close_current_popup():             # <<<<<<<<<<<<<<
 *     """Close the current popup window begin-ed directly above this call.
 *     Clicking on a :func:`menu_item()` or :func:`selectable()` automatically
 */
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_close_current_popup, 2322, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(0, 2322, __pyx_L1_error)

  /* "imgui/core.pyx":2336
 * 
 * 
 * def text(str text):             # <<<<<<<<<<<<<<
 *     """Add text to current widget stack.
 * 
 */
  __pyx_tuple__144 = PyTuple_Pack(1, __pyx_n_s_text); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(0, 2336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__144, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_text, 2336, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) __PYX_ERR(0, 2336, __pyx_L1_error)

  /* "imgui/core.pyx":2358
 * 
 * 
 * def text_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add colored text to current widget stack.
 * 
 */
  __pyx_tuple__146 = PyTuple_Pack(5, __pyx_n_s_text, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(0, 2358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__146, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_text_colored, 2358, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(0, 2358, __pyx_L1_error)

  /* "imgui/core.pyx":2393
 * 
 * 
 * def label_text(str label, str text):             # <<<<<<<<<<<<<<
 *     """Display text+label aligned the same way as value+label widgets.
 * 
 */
  __pyx_tuple__148 = PyTuple_Pack(2, __pyx_n_s_label, __pyx_n_s_text); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(0, 2393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__148, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_label_text, 2393, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) __PYX_ERR(0, 2393, __pyx_L1_error)

  /* "imgui/core.pyx":2416
 * 
 * 
 * def text_unformatted(str text):             # <<<<<<<<<<<<<<
 *     """Big area text display - the size is defined by it's container.
 *     Recommended for long chunks of text.
 */
  __pyx_tuple__150 = PyTuple_Pack(1, __pyx_n_s_text); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(0, 2416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_text_unformatted, 2416, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(0, 2416, __pyx_L1_error)

  /* "imgui/core.pyx":2439
 * 
 * 
 * def bullet():             # <<<<<<<<<<<<<<
 *     """Display a small circle and keep the cursor on the same line.
 * 
 */
  __pyx_codeobj__152 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_bullet, 2439, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__152)) __PYX_ERR(0, 2439, __pyx_L1_error)

  /* "imgui/core.pyx":2462
 * 
 * 
 * def bullet_text(str text):             # <<<<<<<<<<<<<<
 *     """Display bullet and text.
 * 
 */
  __pyx_tuple__153 = PyTuple_Pack(1, __pyx_n_s_text); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(0, 2462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);
  __pyx_codeobj__154 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__153, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_bullet_text, 2462, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__154)) __PYX_ERR(0, 2462, __pyx_L1_error)

  /* "imgui/core.pyx":2492
 * 
 * 
 * def button(str label, width=0, height=0):             # <<<<<<<<<<<<<<
 *     """Display button.
 * 
 */
  __pyx_tuple__155 = PyTuple_Pack(3, __pyx_n_s_label, __pyx_n_s_width, __pyx_n_s_height); if (unlikely(!__pyx_tuple__155)) __PYX_ERR(0, 2492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);
  __pyx_codeobj__156 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__155, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_button, 2492, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__156)) __PYX_ERR(0, 2492, __pyx_L1_error)

  /* "imgui/core.pyx":2518
 * 
 * 
 * def small_button(str label):             # <<<<<<<<<<<<<<
 *     """Display small button (with 0 frame padding).
 * 
 */
  __pyx_tuple__157 = PyTuple_Pack(1, __pyx_n_s_label); if (unlikely(!__pyx_tuple__157)) __PYX_ERR(0, 2518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);
  __pyx_codeobj__158 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__157, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_small_button, 2518, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__158)) __PYX_ERR(0, 2518, __pyx_L1_error)

  /* "imgui/core.pyx":2542
 * 
 * 
 * def invisible_button(str identifier, width, height):             # <<<<<<<<<<<<<<
 *     """Create invisible button.
 * 
 */
  __pyx_tuple__159 = PyTuple_Pack(3, __pyx_n_s_identifier, __pyx_n_s_width, __pyx_n_s_height); if (unlikely(!__pyx_tuple__159)) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);
  __pyx_codeobj__160 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__159, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_invisible_button, 2542, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__160)) __PYX_ERR(0, 2542, __pyx_L1_error)

  /* "imgui/core.pyx":2573
 * 
 * 
 * def color_button(             # <<<<<<<<<<<<<<
 *         float r, float g, float b, a=1.,
 *         cimgui.bool small_height=False,
 */
  __pyx_tuple__161 = PyTuple_Pack(6, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a, __pyx_n_s_small_height, __pyx_n_s_outline_border); if (unlikely(!__pyx_tuple__161)) __PYX_ERR(0, 2573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);
  __pyx_codeobj__162 = (PyObject*)__Pyx_PyCode_New(6, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__161, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_color_button, 2573, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__162)) __PYX_ERR(0, 2573, __pyx_L1_error)

  /* "imgui/core.pyx":2614
 * 
 * 
 * def image_button(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */
  __pyx_tuple__163 = PyTuple_Pack(8, __pyx_n_s_texture_id, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_uv0, __pyx_n_s_uv1, __pyx_n_s_tint_color, __pyx_n_s_border_color, __pyx_n_s_frame_padding); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(0, 2614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);
  __pyx_codeobj__164 = (PyObject*)__Pyx_PyCode_New(8, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__163, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_image_button, 2614, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__164)) __PYX_ERR(0, 2614, __pyx_L1_error)

  /* "imgui/core.pyx":2667
 * 
 * 
 * def image(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */
  __pyx_tuple__165 = PyTuple_Pack(7, __pyx_n_s_texture_id, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_uv0, __pyx_n_s_uv1, __pyx_n_s_tint_color, __pyx_n_s_border_color); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(0, 2667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);
  __pyx_codeobj__166 = (PyObject*)__Pyx_PyCode_New(7, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__165, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_image, 2667, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__166)) __PYX_ERR(0, 2667, __pyx_L1_error)

  /* "imgui/core.pyx":2720
 * 
 * 
 * def checkbox(str label, cimgui.bool state):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget.
 * 
 */
  __pyx_tuple__167 = PyTuple_Pack(3, __pyx_n_s_label, __pyx_n_s_state, __pyx_n_s_inout_state); if (unlikely(!__pyx_tuple__167)) __PYX_ERR(0, 2720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);
  __pyx_codeobj__168 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__167, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_checkbox, 2720, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__168)) __PYX_ERR(0, 2720, __pyx_L1_error)

  /* "imgui/core.pyx":2754
 * 
 * 
 * def checkbox_flags(str label, unsigned int flags, unsigned int flags_value):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget that handle integer flags (bit fields).
 * 
 */
  __pyx_tuple__169 = PyTuple_Pack(4, __pyx_n_s_label, __pyx_n_s_flags, __pyx_n_s_flags_value, __pyx_n_s_inout_flags); if (unlikely(!__pyx_tuple__169)) __PYX_ERR(0, 2754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);
  __pyx_codeobj__170 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__169, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_checkbox_flags, 2754, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__170)) __PYX_ERR(0, 2754, __pyx_L1_error)

  /* "imgui/core.pyx":2811
 * 
 * 
 * def radio_button(str label, cimgui.bool active):             # <<<<<<<<<<<<<<
 *     """Display radio button widget
 * 
 */
  __pyx_tuple__171 = PyTuple_Pack(2, __pyx_n_s_label, __pyx_n_s_active); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(0, 2811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);
  __pyx_codeobj__172 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__171, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_radio_button, 2811, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__172)) __PYX_ERR(0, 2811, __pyx_L1_error)

  /* "imgui/core.pyx":2840
 * 
 * 
 * def combo(str label, int current, list items, int height_in_items=-1):             # <<<<<<<<<<<<<<
 *     """Display combo widget.
 * 
 */
  __pyx_tuple__173 = PyTuple_Pack(6, __pyx_n_s_label, __pyx_n_s_current, __pyx_n_s_items, __pyx_n_s_height_in_items, __pyx_n_s_inout_current, __pyx_n_s_in_items); if (unlikely(!__pyx_tuple__173)) __PYX_ERR(0, 2840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);
  __pyx_codeobj__174 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__173, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_combo, 2840, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__174)) __PYX_ERR(0, 2840, __pyx_L1_error)

  /* "imgui/core.pyx":2885
 * 
 * 
 * def color_edit3(str label, float r, float g, float b):             # <<<<<<<<<<<<<<
 *     """Display color edit widget for color without alpha value.
 * 
 */
  __pyx_tuple__175 = PyTuple_Pack(5, __pyx_n_s_label, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_inout_color); if (unlikely(!__pyx_tuple__175)) __PYX_ERR(0, 2885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);
  __pyx_codeobj__176 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__175, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_color_edit3, 2885, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__176)) __PYX_ERR(0, 2885, __pyx_L1_error)

  /* "imgui/core.pyx":2924
 * 
 * 
 * def color_edit4(             # <<<<<<<<<<<<<<
 *     str label, float r, float g, float b, float a, cimgui.bool show_alpha=True
 * ):
 */
  __pyx_tuple__177 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_a, __pyx_n_s_show_alpha, __pyx_n_s_inout_color); if (unlikely(!__pyx_tuple__177)) __PYX_ERR(0, 2924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);
  __pyx_codeobj__178 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__177, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_color_edit4, 2924, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__178)) __PYX_ERR(0, 2924, __pyx_L1_error)

  /* "imgui/core.pyx":2966
 * 
 * 
 * def drag_float(             # <<<<<<<<<<<<<<
 *     str label, float value,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__179 = PyTuple_Pack(8, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_change_speed, __pyx_n_s_max_value, __pyx_n_s_min_value, __pyx_n_s_display_format, __pyx_n_s_power, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__179)) __PYX_ERR(0, 2966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__179);
  __Pyx_GIVEREF(__pyx_tuple__179);
  __pyx_codeobj__180 = (PyObject*)__Pyx_PyCode_New(7, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__179, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_float, 2966, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__180)) __PYX_ERR(0, 2966, __pyx_L1_error)

  /* "imgui/core.pyx":3032
 * 
 * 
 * def drag_float2(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__181 = PyTuple_Pack(9, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_change_speed, __pyx_n_s_max_value, __pyx_n_s_min_value, __pyx_n_s_display_format, __pyx_n_s_power, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__181)) __PYX_ERR(0, 3032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__181);
  __Pyx_GIVEREF(__pyx_tuple__181);
  __pyx_codeobj__182 = (PyObject*)__Pyx_PyCode_New(8, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__181, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_float2, 3032, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__182)) __PYX_ERR(0, 3032, __pyx_L1_error)

  /* "imgui/core.pyx":3091
 * 
 * 
 * def drag_float3(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__183 = PyTuple_Pack(10, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_change_speed, __pyx_n_s_max_value, __pyx_n_s_min_value, __pyx_n_s_display_format, __pyx_n_s_power, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__183)) __PYX_ERR(0, 3091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__183);
  __Pyx_GIVEREF(__pyx_tuple__183);
  __pyx_codeobj__184 = (PyObject*)__Pyx_PyCode_New(9, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__183, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_float3, 3091, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__184)) __PYX_ERR(0, 3091, __pyx_L1_error)

  /* "imgui/core.pyx":3150
 * 
 * 
 * def drag_float4(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2, float value3,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__185 = PyTuple_Pack(11, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_value3, __pyx_n_s_change_speed, __pyx_n_s_max_value, __pyx_n_s_min_value, __pyx_n_s_display_format, __pyx_n_s_power, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__185)) __PYX_ERR(0, 3150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__185);
  __Pyx_GIVEREF(__pyx_tuple__185);
  __pyx_codeobj__186 = (PyObject*)__Pyx_PyCode_New(10, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__185, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_float4, 3150, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__186)) __PYX_ERR(0, 3150, __pyx_L1_error)

  /* "imgui/core.pyx":3209
 * 
 * 
 * def drag_int(             # <<<<<<<<<<<<<<
 *     str label, int value,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__187 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_change_speed, __pyx_n_s_max_value, __pyx_n_s_min_value, __pyx_n_s_display_format, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__187)) __PYX_ERR(0, 3209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__187);
  __Pyx_GIVEREF(__pyx_tuple__187);
  __pyx_codeobj__188 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__187, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_int, 3209, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__188)) __PYX_ERR(0, 3209, __pyx_L1_error)

  /* "imgui/core.pyx":3267
 * 
 * 
 * def drag_int2(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__189 = PyTuple_Pack(8, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_change_speed, __pyx_n_s_max_value, __pyx_n_s_min_value, __pyx_n_s_display_format, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__189)) __PYX_ERR(0, 3267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__189);
  __Pyx_GIVEREF(__pyx_tuple__189);
  __pyx_codeobj__190 = (PyObject*)__Pyx_PyCode_New(7, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__189, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_int2, 3267, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__190)) __PYX_ERR(0, 3267, __pyx_L1_error)

  /* "imgui/core.pyx":3320
 * 
 * 
 * def drag_int3(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__191 = PyTuple_Pack(9, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_change_speed, __pyx_n_s_max_value, __pyx_n_s_min_value, __pyx_n_s_display_format, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__191)) __PYX_ERR(0, 3320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__191);
  __Pyx_GIVEREF(__pyx_tuple__191);
  __pyx_codeobj__192 = (PyObject*)__Pyx_PyCode_New(8, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__191, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_int3, 3320, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__192)) __PYX_ERR(0, 3320, __pyx_L1_error)

  /* "imgui/core.pyx":3373
 * 
 * 
 * def drag_int4(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2, int value3,
 *     float change_speed = 1.0,
 */
  __pyx_tuple__193 = PyTuple_Pack(10, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_value3, __pyx_n_s_change_speed, __pyx_n_s_max_value, __pyx_n_s_min_value, __pyx_n_s_display_format, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__193)) __PYX_ERR(0, 3373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__193);
  __Pyx_GIVEREF(__pyx_tuple__193);
  __pyx_codeobj__194 = (PyObject*)__Pyx_PyCode_New(9, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__193, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_drag_int4, 3373, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__194)) __PYX_ERR(0, 3373, __pyx_L1_error)

  /* "imgui/core.pyx":3426
 * 
 * 
 * def input_text(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */
  __pyx_tuple__195 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_buffer_length, __pyx_n_s_flags, __pyx_n_s_inout_text, __pyx_n_s_changed, __pyx_n_s_output); if (unlikely(!__pyx_tuple__195)) __PYX_ERR(0, 3426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__195);
  __Pyx_GIVEREF(__pyx_tuple__195);
  __pyx_codeobj__196 = (PyObject*)__Pyx_PyCode_New(4, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__195, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_text, 3426, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__196)) __PYX_ERR(0, 3426, __pyx_L1_error)

  /* "imgui/core.pyx":3488
 * 
 * 
 * def input_text_multiline(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */
  __pyx_tuple__197 = PyTuple_Pack(9, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_buffer_length, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_flags, __pyx_n_s_inout_text, __pyx_n_s_changed, __pyx_n_s_output); if (unlikely(!__pyx_tuple__197)) __PYX_ERR(0, 3488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__197);
  __Pyx_GIVEREF(__pyx_tuple__197);
  __pyx_codeobj__198 = (PyObject*)__Pyx_PyCode_New(6, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__197, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_text_multiline, 3488, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__198)) __PYX_ERR(0, 3488, __pyx_L1_error)

  /* "imgui/core.pyx":3556
 * 
 * 
 * def input_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */
  __pyx_tuple__199 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_step, __pyx_n_s_step_fast, __pyx_n_s_decimal_precision, __pyx_n_s_flags, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__199)) __PYX_ERR(0, 3556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__199);
  __Pyx_GIVEREF(__pyx_tuple__199);
  __pyx_codeobj__200 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__199, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_float, 3556, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__200)) __PYX_ERR(0, 3556, __pyx_L1_error)

  /* "imgui/core.pyx":3608
 * 
 * 
 * def input_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */
  __pyx_tuple__201 = PyTuple_Pack(6, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_decimal_precision, __pyx_n_s_flags, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__201)) __PYX_ERR(0, 3608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__201);
  __Pyx_GIVEREF(__pyx_tuple__201);
  __pyx_codeobj__202 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__201, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_float2, 3608, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__202)) __PYX_ERR(0, 3608, __pyx_L1_error)

  /* "imgui/core.pyx":3653
 * 
 * 
 * def input_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */
  __pyx_tuple__203 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_decimal_precision, __pyx_n_s_flags, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__203)) __PYX_ERR(0, 3653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__203);
  __Pyx_GIVEREF(__pyx_tuple__203);
  __pyx_codeobj__204 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__203, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_float3, 3653, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__204)) __PYX_ERR(0, 3653, __pyx_L1_error)

  /* "imgui/core.pyx":3698
 * 
 * 
 * def input_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */
  __pyx_tuple__205 = PyTuple_Pack(8, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_value3, __pyx_n_s_decimal_precision, __pyx_n_s_flags, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__205)) __PYX_ERR(0, 3698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__205);
  __Pyx_GIVEREF(__pyx_tuple__205);
  __pyx_codeobj__206 = (PyObject*)__Pyx_PyCode_New(7, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__205, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_float4, 3698, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__206)) __PYX_ERR(0, 3698, __pyx_L1_error)

  /* "imgui/core.pyx":3743
 * 
 * 
 * def input_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */
  __pyx_tuple__207 = PyTuple_Pack(6, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_step, __pyx_n_s_step_fast, __pyx_n_s_flags, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__207)) __PYX_ERR(0, 3743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__207);
  __Pyx_GIVEREF(__pyx_tuple__207);
  __pyx_codeobj__208 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__207, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_int, 3743, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__208)) __PYX_ERR(0, 3743, __pyx_L1_error)

  /* "imgui/core.pyx":3791
 * 
 * 
 * def input_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */
  __pyx_tuple__209 = PyTuple_Pack(5, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_flags, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__209)) __PYX_ERR(0, 3791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__209);
  __Pyx_GIVEREF(__pyx_tuple__209);
  __pyx_codeobj__210 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__209, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_int2, 3791, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__210)) __PYX_ERR(0, 3791, __pyx_L1_error)

  /* "imgui/core.pyx":3833
 * 
 * 
 * def input_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */
  __pyx_tuple__211 = PyTuple_Pack(6, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_flags, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__211)) __PYX_ERR(0, 3833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__211);
  __Pyx_GIVEREF(__pyx_tuple__211);
  __pyx_codeobj__212 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__211, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_int3, 3833, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__212)) __PYX_ERR(0, 3833, __pyx_L1_error)

  /* "imgui/core.pyx":3875
 * 
 * 
 * def input_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */
  __pyx_tuple__213 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_value3, __pyx_n_s_flags, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__213)) __PYX_ERR(0, 3875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__213);
  __Pyx_GIVEREF(__pyx_tuple__213);
  __pyx_codeobj__214 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__213, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_input_int4, 3875, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__214)) __PYX_ERR(0, 3875, __pyx_L1_error)

  /* "imgui/core.pyx":3917
 * 
 * 
 * def slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */
  __pyx_tuple__215 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_display_format, __pyx_n_s_power, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__215)) __PYX_ERR(0, 3917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__215);
  __Pyx_GIVEREF(__pyx_tuple__215);
  __pyx_codeobj__216 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__215, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_float, 3917, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__216)) __PYX_ERR(0, 3917, __pyx_L1_error)

  /* "imgui/core.pyx":3961
 * 
 * 
 * def slider_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */
  __pyx_tuple__217 = PyTuple_Pack(8, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_display_format, __pyx_n_s_power, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__217)) __PYX_ERR(0, 3961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__217);
  __Pyx_GIVEREF(__pyx_tuple__217);
  __pyx_codeobj__218 = (PyObject*)__Pyx_PyCode_New(7, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__217, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_float2, 3961, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__218)) __PYX_ERR(0, 3961, __pyx_L1_error)

  /* "imgui/core.pyx":4005
 * 
 * 
 * def slider_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */
  __pyx_tuple__219 = PyTuple_Pack(9, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_display_format, __pyx_n_s_power, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__219)) __PYX_ERR(0, 4005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__219);
  __Pyx_GIVEREF(__pyx_tuple__219);
  __pyx_codeobj__220 = (PyObject*)__Pyx_PyCode_New(8, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__219, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_float3, 4005, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__220)) __PYX_ERR(0, 4005, __pyx_L1_error)

  /* "imgui/core.pyx":4049
 * 
 * 
 * def slider_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */
  __pyx_tuple__221 = PyTuple_Pack(10, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_value3, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_display_format, __pyx_n_s_power, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__221)) __PYX_ERR(0, 4049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__221);
  __Pyx_GIVEREF(__pyx_tuple__221);
  __pyx_codeobj__222 = (PyObject*)__Pyx_PyCode_New(9, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__221, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_float4, 4049, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__222)) __PYX_ERR(0, 4049, __pyx_L1_error)

  /* "imgui/core.pyx":4108
 * 
 * 
 * def slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */
  __pyx_tuple__223 = PyTuple_Pack(6, __pyx_n_s_label, __pyx_n_s_value, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_display_format, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__223)) __PYX_ERR(0, 4108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__223);
  __Pyx_GIVEREF(__pyx_tuple__223);
  __pyx_codeobj__224 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__223, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_int, 4108, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__224)) __PYX_ERR(0, 4108, __pyx_L1_error)

  /* "imgui/core.pyx":4148
 * 
 * 
 * def slider_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */
  __pyx_tuple__225 = PyTuple_Pack(7, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_display_format, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__225)) __PYX_ERR(0, 4148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__225);
  __Pyx_GIVEREF(__pyx_tuple__225);
  __pyx_codeobj__226 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__225, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_int2, 4148, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__226)) __PYX_ERR(0, 4148, __pyx_L1_error)

  /* "imgui/core.pyx":4188
 * 
 * 
 * def slider_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */
  __pyx_tuple__227 = PyTuple_Pack(8, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_display_format, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__227)) __PYX_ERR(0, 4188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__227);
  __Pyx_GIVEREF(__pyx_tuple__227);
  __pyx_codeobj__228 = (PyObject*)__Pyx_PyCode_New(7, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__227, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_int3, 4188, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__228)) __PYX_ERR(0, 4188, __pyx_L1_error)

  /* "imgui/core.pyx":4228
 * 
 * 
 * def slider_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */
  __pyx_tuple__229 = PyTuple_Pack(9, __pyx_n_s_label, __pyx_n_s_value0, __pyx_n_s_value1, __pyx_n_s_value2, __pyx_n_s_value3, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_display_format, __pyx_n_s_inout_values); if (unlikely(!__pyx_tuple__229)) __PYX_ERR(0, 4228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__229);
  __Pyx_GIVEREF(__pyx_tuple__229);
  __pyx_codeobj__230 = (PyObject*)__Pyx_PyCode_New(8, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__229, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_slider_int4, 4228, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__230)) __PYX_ERR(0, 4228, __pyx_L1_error)

  /* "imgui/core.pyx":4281
 * 
 * 
 * def v_slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */
  __pyx_tuple__231 = PyTuple_Pack(9, __pyx_n_s_label, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_value, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_display_format, __pyx_n_s_power, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__231)) __PYX_ERR(0, 4281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__231);
  __Pyx_GIVEREF(__pyx_tuple__231);
  __pyx_codeobj__232 = (PyObject*)__Pyx_PyCode_New(8, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__231, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_v_slider_float, 4281, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__232)) __PYX_ERR(0, 4281, __pyx_L1_error)

  /* "imgui/core.pyx":4329
 * 
 * 
 * def v_slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */
  __pyx_tuple__233 = PyTuple_Pack(8, __pyx_n_s_label, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_value, __pyx_n_s_min_value, __pyx_n_s_max_value, __pyx_n_s_display_format, __pyx_n_s_inout_value); if (unlikely(!__pyx_tuple__233)) __PYX_ERR(0, 4329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__233);
  __Pyx_GIVEREF(__pyx_tuple__233);
  __pyx_codeobj__234 = (PyObject*)__Pyx_PyCode_New(7, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__233, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_v_slider_int, 4329, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__234)) __PYX_ERR(0, 4329, __pyx_L1_error)

  /* "imgui/core.pyx":4373
 * 
 * 
 * def is_item_hovered():             # <<<<<<<<<<<<<<
 *     """Check if the last item is hovered by mouse.
 * 
 */
  __pyx_codeobj__235 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_item_hovered, 4373, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__235)) __PYX_ERR(0, 4373, __pyx_L1_error)

  /* "imgui/core.pyx":4385
 * 
 * 
 * def is_item_hovered_rect():             # <<<<<<<<<<<<<<
 *     """Was the last item hovered by mouse? Even if
 *     another item is active or window is blocked by popup
 */
  __pyx_codeobj__236 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_item_hovered_rect, 4385, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__236)) __PYX_ERR(0, 4385, __pyx_L1_error)

  /* "imgui/core.pyx":4399
 * 
 * 
 * def is_item_active():             # <<<<<<<<<<<<<<
 *     """Was the last item active? For ex. button being held or text field
 *     being edited. Items that don't interact will always return false.
 */
  __pyx_codeobj__237 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_item_active, 4399, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__237)) __PYX_ERR(0, 4399, __pyx_L1_error)

  /* "imgui/core.pyx":4412
 * 
 * 
 * def is_item_clicked(int mouse_button = 0):             # <<<<<<<<<<<<<<
 *     """Was the last item clicked? For ex. button or node that was
 *     just being clicked on.
 */
  __pyx_tuple__238 = PyTuple_Pack(1, __pyx_n_s_mouse_button); if (unlikely(!__pyx_tuple__238)) __PYX_ERR(0, 4412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__238);
  __Pyx_GIVEREF(__pyx_tuple__238);
  __pyx_codeobj__239 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__238, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_item_clicked, 4412, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__239)) __PYX_ERR(0, 4412, __pyx_L1_error)

  /* "imgui/core.pyx":4425
 * 
 * 
 * def is_item_visible():             # <<<<<<<<<<<<<<
 *     """Was the last item visible? Aka not out of sight due to
 *     clipping/scrolling.
 */
  __pyx_codeobj__240 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_item_visible, 4425, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__240)) __PYX_ERR(0, 4425, __pyx_L1_error)

  /* "imgui/core.pyx":4438
 * 
 * 
 * def is_any_item_hovered():             # <<<<<<<<<<<<<<
 *     """Was any of the items hovered.
 * 
 */
  __pyx_codeobj__241 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_any_item_hovered, 4438, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__241)) __PYX_ERR(0, 4438, __pyx_L1_error)

  /* "imgui/core.pyx":4450
 * 
 * 
 * def is_any_item_active():             # <<<<<<<<<<<<<<
 *     """Was any of the items active.
 * 
 */
  __pyx_codeobj__242 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_any_item_active, 4450, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__242)) __PYX_ERR(0, 4450, __pyx_L1_error)

  /* "imgui/core.pyx":4462
 * 
 * 
 * def get_item_rect_min():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */
  __pyx_codeobj__243 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_item_rect_min, 4462, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__243)) __PYX_ERR(0, 4462, __pyx_L1_error)

  /* "imgui/core.pyx":4474
 * 
 * 
 * def get_item_rect_max():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */
  __pyx_codeobj__244 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_item_rect_max, 4474, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__244)) __PYX_ERR(0, 4474, __pyx_L1_error)

  /* "imgui/core.pyx":4486
 * 
 * 
 * def get_item_rect_size():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */
  __pyx_codeobj__245 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_item_rect_size, 4486, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__245)) __PYX_ERR(0, 4486, __pyx_L1_error)

  /* "imgui/core.pyx":4498
 * 
 * 
 * def set_item_allow_overlap():             # <<<<<<<<<<<<<<
 *     """Allow last item to be overlapped by a subsequent item.
 *     Sometimes useful with invisible buttons, selectables, etc.
 */
  __pyx_codeobj__246 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_item_allow_overlap, 4498, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__246)) __PYX_ERR(0, 4498, __pyx_L1_error)

  /* "imgui/core.pyx":4509
 * 
 * 
 * def is_window_hovered():             # <<<<<<<<<<<<<<
 *     """Is current window hovered and hoverable (not blocked by a popup).
 *     Differentiate child windows from each others.
 */
  __pyx_codeobj__247 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_window_hovered, 4509, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__247)) __PYX_ERR(0, 4509, __pyx_L1_error)

  /* "imgui/core.pyx":4522
 * 
 * 
 * def is_window_focused():             # <<<<<<<<<<<<<<
 *     """Is current window focused.
 * 
 */
  __pyx_codeobj__248 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_window_focused, 4522, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__248)) __PYX_ERR(0, 4522, __pyx_L1_error)

  /* "imgui/core.pyx":4534
 * 
 * 
 * def is_root_window_focused():             # <<<<<<<<<<<<<<
 *     """Is root window focused.
 * 
 */
  __pyx_codeobj__249 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_root_window_focused, 4534, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__249)) __PYX_ERR(0, 4534, __pyx_L1_error)

  /* "imgui/core.pyx":4546
 * 
 * 
 * def is_root_window_or_any_child_focused():             # <<<<<<<<<<<<<<
 *     """Is the current root window or any of its children on focus.
 * 
 */
  __pyx_codeobj__250 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_root_window_or_any_child_focu, 4546, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__250)) __PYX_ERR(0, 4546, __pyx_L1_error)

  /* "imgui/core.pyx":4558
 * 
 * 
 * def is_root_window_or_any_child_hovered():             # <<<<<<<<<<<<<<
 *     """Is the current root window or any of its children
 *     hovered with the mouse.
 */
  __pyx_codeobj__251 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_root_window_or_any_child_hove, 4558, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__251)) __PYX_ERR(0, 4558, __pyx_L1_error)

  /* "imgui/core.pyx":4571
 * 
 * 
 * def is_rect_visible(float size_width, float size_height):             # <<<<<<<<<<<<<<
 *     """Test if a rectangle of the given size, starting from the cursor
 *     position is visible (not clipped).
 */
  __pyx_tuple__252 = PyTuple_Pack(2, __pyx_n_s_size_width, __pyx_n_s_size_height); if (unlikely(!__pyx_tuple__252)) __PYX_ERR(0, 4571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__252);
  __Pyx_GIVEREF(__pyx_tuple__252);
  __pyx_codeobj__253 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__252, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_rect_visible, 4571, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__253)) __PYX_ERR(0, 4571, __pyx_L1_error)

  /* "imgui/core.pyx":4588
 * 
 * 
 * def is_pos_hovering_any_window(float position_x, float position_y):             # <<<<<<<<<<<<<<
 *     """Test if position is hovering any active ImGui window.
 * 
 */
  __pyx_tuple__254 = PyTuple_Pack(2, __pyx_n_s_position_x, __pyx_n_s_position_y); if (unlikely(!__pyx_tuple__254)) __PYX_ERR(0, 4588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__254);
  __Pyx_GIVEREF(__pyx_tuple__254);
  __pyx_codeobj__255 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__254, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_pos_hovering_any_window, 4588, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__255)) __PYX_ERR(0, 4588, __pyx_L1_error)

  /* "imgui/core.pyx":4606
 * 
 * 
 * def is_mouse_hovering_window():             # <<<<<<<<<<<<<<
 *     """Test if mouse is hovering the current window.
 * 
 */
  __pyx_codeobj__256 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_mouse_hovering_window, 4606, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__256)) __PYX_ERR(0, 4606, __pyx_L1_error)

  /* "imgui/core.pyx":4618
 * 
 * 
 * def is_mouse_hovering_any_window():             # <<<<<<<<<<<<<<
 *     """Test if mouse is hovering any visible window.
 * 
 */
  __pyx_codeobj__257 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_mouse_hovering_any_window, 4618, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__257)) __PYX_ERR(0, 4618, __pyx_L1_error)

  /* "imgui/core.pyx":4630
 * 
 * 
 * def is_mouse_hovering_rect(             # <<<<<<<<<<<<<<
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 */
  __pyx_tuple__258 = PyTuple_Pack(5, __pyx_n_s_r_min_x, __pyx_n_s_r_min_y, __pyx_n_s_r_max_x, __pyx_n_s_r_max_y, __pyx_n_s_clip); if (unlikely(!__pyx_tuple__258)) __PYX_ERR(0, 4630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__258);
  __Pyx_GIVEREF(__pyx_tuple__258);
  __pyx_codeobj__259 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__258, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_mouse_hovering_rect, 4630, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__259)) __PYX_ERR(0, 4630, __pyx_L1_error)

  /* "imgui/core.pyx":4658
 * 
 * 
 * def is_mouse_dragging(int button = 0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Returns if mouse is dragging.
 * 
 */
  __pyx_tuple__260 = PyTuple_Pack(2, __pyx_n_s_button, __pyx_n_s_lock_threshold); if (unlikely(!__pyx_tuple__260)) __PYX_ERR(0, 4658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__260);
  __Pyx_GIVEREF(__pyx_tuple__260);
  __pyx_codeobj__261 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__260, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_is_mouse_dragging, 4658, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__261)) __PYX_ERR(0, 4658, __pyx_L1_error)

  /* "imgui/core.pyx":4675
 * 
 * 
 * def get_mouse_drag_delta(int button=0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Dragging amount since clicking.
 * 
 */
  __pyx_tuple__262 = PyTuple_Pack(2, __pyx_n_s_button, __pyx_n_s_lock_threshold); if (unlikely(!__pyx_tuple__262)) __PYX_ERR(0, 4675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__262);
  __Pyx_GIVEREF(__pyx_tuple__262);
  __pyx_codeobj__263 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__262, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_mouse_drag_delta, 4675, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__263)) __PYX_ERR(0, 4675, __pyx_L1_error)

  /* "imgui/core.pyx":4694
 * 
 * 
 * def reset_mouse_drag_delta(int button = 0):             # <<<<<<<<<<<<<<
 *     """Reset the mouse dragging delta.
 * 
 */
  __pyx_tuple__264 = PyTuple_Pack(1, __pyx_n_s_button); if (unlikely(!__pyx_tuple__264)) __PYX_ERR(0, 4694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__264);
  __Pyx_GIVEREF(__pyx_tuple__264);
  __pyx_codeobj__265 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__264, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_reset_mouse_drag_delta, 4694, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__265)) __PYX_ERR(0, 4694, __pyx_L1_error)

  /* "imgui/core.pyx":4706
 * 
 * 
 * def get_mouse_cursor():             # <<<<<<<<<<<<<<
 *     """Return the mouse cursor id.
 * 
 */
  __pyx_codeobj__266 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_mouse_cursor, 4706, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__266)) __PYX_ERR(0, 4706, __pyx_L1_error)

  /* "imgui/core.pyx":4715
 * 
 * 
 * def set_mouse_cursor(cimgui.ImGuiMouseCursor mouse_cursor_type):             # <<<<<<<<<<<<<<
 *     """Set the mouse cursor id.
 * 
 */
  __pyx_tuple__267 = PyTuple_Pack(2, __pyx_n_s_mouse_cursor_type, __pyx_n_s_mouse_cursor_type); if (unlikely(!__pyx_tuple__267)) __PYX_ERR(0, 4715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__267);
  __Pyx_GIVEREF(__pyx_tuple__267);
  __pyx_codeobj__268 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__267, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_mouse_cursor, 4715, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__268)) __PYX_ERR(0, 4715, __pyx_L1_error)

  /* "imgui/core.pyx":4727
 * 
 * 
 * def push_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Push font on a stack.
 * 
 */
  __pyx_tuple__269 = PyTuple_Pack(1, __pyx_n_s_font); if (unlikely(!__pyx_tuple__269)) __PYX_ERR(0, 4727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__269);
  __Pyx_GIVEREF(__pyx_tuple__269);
  __pyx_codeobj__270 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__269, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_push_font, 4727, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__270)) __PYX_ERR(0, 4727, __pyx_L1_error)

  /* "imgui/core.pyx":4759
 *     cimgui.PushFont(font._ptr)
 * 
 * def pop_font():             # <<<<<<<<<<<<<<
 *     """Pop font on a stack.
 * 
 */
  __pyx_codeobj__271 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_pop_font, 4759, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__271)) __PYX_ERR(0, 4759, __pyx_L1_error)

  /* "imgui/core.pyx":5002
 * 
 * 
 * def separator():             # <<<<<<<<<<<<<<
 *     """Add vertical line as a separator beween elements.
 * 
 */
  __pyx_codeobj__272 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_separator, 5002, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__272)) __PYX_ERR(0, 5002, __pyx_L1_error)

  /* "imgui/core.pyx":5029
 * 
 * 
 * def same_line(float position=0.0, float spacing=-1.0):             # <<<<<<<<<<<<<<
 *     """Call between widgets or groups to layout them horizontally.
 * 
 */
  __pyx_tuple__273 = PyTuple_Pack(2, __pyx_n_s_position, __pyx_n_s_spacing); if (unlikely(!__pyx_tuple__273)) __PYX_ERR(0, 5029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__273);
  __Pyx_GIVEREF(__pyx_tuple__273);
  __pyx_codeobj__274 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__273, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_same_line, 5029, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__274)) __PYX_ERR(0, 5029, __pyx_L1_error)

  /* "imgui/core.pyx":5062
 * 
 * 
 * def new_line():             # <<<<<<<<<<<<<<
 *     """Undo :any:`same_line()` call.
 * 
 */
  __pyx_codeobj__275 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_new_line, 5062, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__275)) __PYX_ERR(0, 5062, __pyx_L1_error)

  /* "imgui/core.pyx":5071
 * 
 * 
 * def spacing():             # <<<<<<<<<<<<<<
 *     """Add vertical spacing beween elements.
 * 
 */
  __pyx_codeobj__276 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_spacing, 5071, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__276)) __PYX_ERR(0, 5071, __pyx_L1_error)

  /* "imgui/core.pyx":5098
 * 
 * 
 * def dummy(width, height):             # <<<<<<<<<<<<<<
 *     """Add dummy element of given size.
 * 
 */
  __pyx_tuple__277 = PyTuple_Pack(2, __pyx_n_s_width, __pyx_n_s_height); if (unlikely(!__pyx_tuple__277)) __PYX_ERR(0, 5098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__277);
  __Pyx_GIVEREF(__pyx_tuple__277);
  __pyx_codeobj__278 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__277, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_dummy, 5098, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__278)) __PYX_ERR(0, 5098, __pyx_L1_error)

  /* "imgui/core.pyx":5122
 * 
 * 
 * def indent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to right by indent width.
 * 
 */
  __pyx_tuple__279 = PyTuple_Pack(1, __pyx_n_s_width); if (unlikely(!__pyx_tuple__279)) __PYX_ERR(0, 5122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__279);
  __Pyx_GIVEREF(__pyx_tuple__279);
  __pyx_codeobj__280 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__279, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_indent, 5122, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__280)) __PYX_ERR(0, 5122, __pyx_L1_error)

  /* "imgui/core.pyx":5153
 * 
 * 
 * def unindent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to left by indent width.
 * 
 */
  __pyx_tuple__281 = PyTuple_Pack(1, __pyx_n_s_width); if (unlikely(!__pyx_tuple__281)) __PYX_ERR(0, 5153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__281);
  __Pyx_GIVEREF(__pyx_tuple__281);
  __pyx_codeobj__282 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__281, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_unindent, 5153, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__282)) __PYX_ERR(0, 5153, __pyx_L1_error)

  /* "imgui/core.pyx":5184
 * 
 * 
 * def columns(int count=1, str identifier=None, bool border=True):             # <<<<<<<<<<<<<<
 *     """Setup number of columns. Use an identifier to distinguish multiple
 *     column sets. close with ``columns(1)``.
 */
  __pyx_tuple__283 = PyTuple_Pack(3, __pyx_n_s_count, __pyx_n_s_identifier, __pyx_n_s_border); if (unlikely(!__pyx_tuple__283)) __PYX_ERR(0, 5184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__283);
  __Pyx_GIVEREF(__pyx_tuple__283);
  __pyx_codeobj__284 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__283, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_columns, 5184, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__284)) __PYX_ERR(0, 5184, __pyx_L1_error)

  /* "imgui/core.pyx":5244
 * 
 * 
 * def next_column():             # <<<<<<<<<<<<<<
 *     """Move to the next column drawing.
 * 
 */
  __pyx_codeobj__285 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_next_column, 5244, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__285)) __PYX_ERR(0, 5244, __pyx_L1_error)

  /* "imgui/core.pyx":5255
 * 
 * 
 * def get_column_index():             # <<<<<<<<<<<<<<
 *     """Returns the current column index.
 * 
 */
  __pyx_codeobj__286 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_column_index, 5255, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__286)) __PYX_ERR(0, 5255, __pyx_L1_error)

  /* "imgui/core.pyx":5269
 * 
 * 
 * def get_column_offset(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Returns position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column, otherwise 0 to
 */
  __pyx_tuple__287 = PyTuple_Pack(1, __pyx_n_s_column_index); if (unlikely(!__pyx_tuple__287)) __PYX_ERR(0, 5269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__287);
  __Pyx_GIVEREF(__pyx_tuple__287);
  __pyx_codeobj__288 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__287, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_column_offset, 5269, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__288)) __PYX_ERR(0, 5269, __pyx_L1_error)

  /* "imgui/core.pyx":5289
 * 
 * 
 * def set_column_offset(int column_index, float offset_x):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */
  __pyx_tuple__289 = PyTuple_Pack(2, __pyx_n_s_column_index, __pyx_n_s_offset_x); if (unlikely(!__pyx_tuple__289)) __PYX_ERR(0, 5289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__289);
  __Pyx_GIVEREF(__pyx_tuple__289);
  __pyx_codeobj__290 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__289, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_set_column_offset, 5289, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__290)) __PYX_ERR(0, 5289, __pyx_L1_error)

  /* "imgui/core.pyx":5305
 * 
 * 
 * def get_column_width(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Return the column width.
 * 
 */
  __pyx_tuple__291 = PyTuple_Pack(1, __pyx_n_s_column_index); if (unlikely(!__pyx_tuple__291)) __PYX_ERR(0, 5305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__291);
  __Pyx_GIVEREF(__pyx_tuple__291);
  __pyx_codeobj__292 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__291, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_column_width, 5305, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__292)) __PYX_ERR(0, 5305, __pyx_L1_error)

  /* "imgui/core.pyx":5319
 * 
 * 
 * def get_columns_count():             # <<<<<<<<<<<<<<
 *     """Get count of the columns in the current table.
 * 
 */
  __pyx_codeobj__293 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_get_columns_count, 5319, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__293)) __PYX_ERR(0, 5319, __pyx_L1_error)

  /* "imgui/core.pyx":5333
 * 
 * 
 * def begin_group():             # <<<<<<<<<<<<<<
 *     """Start item group and lock its horizontal starting position.
 * 
 */
  __pyx_codeobj__294 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_begin_group, 5333, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__294)) __PYX_ERR(0, 5333, __pyx_L1_error)

  /* "imgui/core.pyx":5368
 * 
 * 
 * def end_group():             # <<<<<<<<<<<<<<
 *     """End group (see: :any:`begin_group`).
 * 
 */
  __pyx_codeobj__295 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_end_group, 5368, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__295)) __PYX_ERR(0, 5368, __pyx_L1_error)

  /* "imgui/core.pyx":5380
 * 
 * @contextmanager
 * def font(_Font font):             # <<<<<<<<<<<<<<
 *     """Use specified font in given context.
 * 
 */
  __pyx_tuple__296 = PyTuple_Pack(1, __pyx_n_s_font); if (unlikely(!__pyx_tuple__296)) __PYX_ERR(0, 5380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__296);
  __Pyx_GIVEREF(__pyx_tuple__296);
  __pyx_codeobj__297 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__296, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_font, 5380, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__297)) __PYX_ERR(0, 5380, __pyx_L1_error)

  /* "imgui/core.pyx":5408
 * 
 * @contextmanager
 * def styled(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 */
  __pyx_tuple__298 = PyTuple_Pack(3, __pyx_n_s_variable, __pyx_n_s_value, __pyx_n_s_count); if (unlikely(!__pyx_tuple__298)) __PYX_ERR(0, 5408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__298);
  __Pyx_GIVEREF(__pyx_tuple__298);
  __pyx_codeobj__299 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__298, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_styled, 5408, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__299)) __PYX_ERR(0, 5408, __pyx_L1_error)

  /* "imgui/core.pyx":5417
 * 
 * @contextmanager
 * def istyled(*variables_and_values):             # <<<<<<<<<<<<<<
 *     # todo: rename to nstyled?
 *     count = 0
 */
  __pyx_tuple__300 = PyTuple_Pack(5, __pyx_n_s_variables_and_values, __pyx_n_s_count, __pyx_n_s_iterator, __pyx_n_s_var, __pyx_n_s_val); if (unlikely(!__pyx_tuple__300)) __PYX_ERR(0, 5417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__300);
  __Pyx_GIVEREF(__pyx_tuple__300);
  __pyx_codeobj__301 = (PyObject*)__Pyx_PyCode_New(0, 0, 5, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__300, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_istyled, 5417, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__301)) __PYX_ERR(0, 5417, __pyx_L1_error)

  /* "imgui/core.pyx":5444
 * 
 * 
 * def vertex_buffer_vertex_pos_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 */
  __pyx_codeobj__302 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_vertex_buffer_vertex_pos_offset, 5444, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__302)) __PYX_ERR(0, 5444, __pyx_L1_error)

  /* "imgui/core.pyx":5447
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 * def vertex_buffer_vertex_uv_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 */
  __pyx_codeobj__303 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_vertex_buffer_vertex_uv_offset, 5447, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__303)) __PYX_ERR(0, 5447, __pyx_L1_error)

  /* "imgui/core.pyx":5450
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 * def vertex_buffer_vertex_col_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 */
  __pyx_codeobj__304 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_vertex_buffer_vertex_col_offset, 5450, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__304)) __PYX_ERR(0, 5450, __pyx_L1_error)

  /* "imgui/core.pyx":5453
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 * def vertex_buffer_vertex_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawVert)
 * 
 */
  __pyx_codeobj__305 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_vertex_buffer_vertex_size, 5453, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__305)) __PYX_ERR(0, 5453, __pyx_L1_error)

  /* "imgui/core.pyx":5456
 *     return sizeof(cimgui.ImDrawVert)
 * 
 * def index_buffer_index_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawIdx)
 * 
 */
  __pyx_codeobj__306 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imgui_core_pyx, __pyx_n_s_index_buffer_index_size, 5456, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__306)) __PYX_ERR(0, 5456, __pyx_L1_error)

  /* "View.MemoryView":282
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__307 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__307)) __PYX_ERR(1, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__307);
  __Pyx_GIVEREF(__pyx_tuple__307);

  /* "View.MemoryView":283
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__308 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__308)) __PYX_ERR(1, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__308);
  __Pyx_GIVEREF(__pyx_tuple__308);

  /* "View.MemoryView":284
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__309 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__309)) __PYX_ERR(1, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__309);
  __Pyx_GIVEREF(__pyx_tuple__309);

  /* "View.MemoryView":287
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__310 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__310)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__310);
  __Pyx_GIVEREF(__pyx_tuple__310);

  /* "View.MemoryView":288
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__311 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__311)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__311);
  __Pyx_GIVEREF(__pyx_tuple__311);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError
 */
  __pyx_tuple__312 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_PickleError, __pyx_n_s_result); if (unlikely(!__pyx_tuple__312)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__312);
  __Pyx_GIVEREF(__pyx_tuple__312);
  __pyx_codeobj__313 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__312, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__313)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_1_ = PyFloat_FromDouble(1.); if (unlikely(!__pyx_float_1_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_512 = PyInt_FromLong(512); if (unlikely(!__pyx_int_512)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcore(void); /*proto*/
PyMODINIT_FUNC initcore(void)
#else
PyMODINIT_FUNC PyInit_core(void); /*proto*/
PyMODINIT_FUNC PyInit_core(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  static unsigned short __pyx_t_10[3];
  ImGuiSetCond __pyx_t_11;
  bool __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  static PyThread_type_lock __pyx_t_16[8];
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_core(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("core", __pyx_methods, __pyx_k_todo_consider_inlining_every_oc, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_imgui__core) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "imgui.core")) {
      if (unlikely(PyDict_SetItemString(modules, "imgui.core", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  ImGuiError = Py_None; Py_INCREF(Py_None);
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_5imgui_4core__DrawCmd = &__pyx_vtable_5imgui_4core__DrawCmd;
  __pyx_vtable_5imgui_4core__DrawCmd.from_ptr = (PyObject *(*)(ImDrawCmd *))__pyx_f_5imgui_4core_8_DrawCmd_from_ptr;
  if (PyType_Ready(&__pyx_type_5imgui_4core__DrawCmd) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __pyx_type_5imgui_4core__DrawCmd.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__DrawCmd.tp_dict, __pyx_vtabptr_5imgui_4core__DrawCmd) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "_DrawCmd", (PyObject *)&__pyx_type_5imgui_4core__DrawCmd) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__DrawCmd) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__DrawCmd = &__pyx_type_5imgui_4core__DrawCmd;
  __pyx_vtabptr_5imgui_4core__DrawList = &__pyx_vtable_5imgui_4core__DrawList;
  __pyx_vtable_5imgui_4core__DrawList.from_ptr = (PyObject *(*)(ImDrawList *))__pyx_f_5imgui_4core_9_DrawList_from_ptr;
  if (PyType_Ready(&__pyx_type_5imgui_4core__DrawList) < 0) __PYX_ERR(0, 273, __pyx_L1_error)
  __pyx_type_5imgui_4core__DrawList.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__DrawList.tp_dict, __pyx_vtabptr_5imgui_4core__DrawList) < 0) __PYX_ERR(0, 273, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "_DrawList", (PyObject *)&__pyx_type_5imgui_4core__DrawList) < 0) __PYX_ERR(0, 273, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__DrawList) < 0) __PYX_ERR(0, 273, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__DrawList = &__pyx_type_5imgui_4core__DrawList;
  if (PyType_Ready(&__pyx_type_5imgui_4core_GuiStyle) < 0) __PYX_ERR(0, 317, __pyx_L1_error)
  __pyx_type_5imgui_4core_GuiStyle.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "GuiStyle", (PyObject *)&__pyx_type_5imgui_4core_GuiStyle) < 0) __PYX_ERR(0, 317, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core_GuiStyle) < 0) __PYX_ERR(0, 317, __pyx_L1_error)
  __pyx_ptype_5imgui_4core_GuiStyle = &__pyx_type_5imgui_4core_GuiStyle;
  __pyx_vtabptr_5imgui_4core__DrawData = &__pyx_vtable_5imgui_4core__DrawData;
  __pyx_vtable_5imgui_4core__DrawData.from_ptr = (PyObject *(*)(ImDrawData *))__pyx_f_5imgui_4core_9_DrawData_from_ptr;
  if (PyType_Ready(&__pyx_type_5imgui_4core__DrawData) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  __pyx_type_5imgui_4core__DrawData.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__DrawData.tp_dict, __pyx_vtabptr_5imgui_4core__DrawData) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "_DrawData", (PyObject *)&__pyx_type_5imgui_4core__DrawData) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__DrawData) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__DrawData = &__pyx_type_5imgui_4core__DrawData;
  __pyx_vtabptr_5imgui_4core__StaticGlyphRanges = &__pyx_vtable_5imgui_4core__StaticGlyphRanges;
  __pyx_vtable_5imgui_4core__StaticGlyphRanges.from_ptr = (PyObject *(*)(ImWchar const *))__pyx_f_5imgui_4core_18_StaticGlyphRanges_from_ptr;
  if (PyType_Ready(&__pyx_type_5imgui_4core__StaticGlyphRanges) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  __pyx_type_5imgui_4core__StaticGlyphRanges.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__StaticGlyphRanges.tp_dict, __pyx_vtabptr_5imgui_4core__StaticGlyphRanges) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "_StaticGlyphRanges", (PyObject *)&__pyx_type_5imgui_4core__StaticGlyphRanges) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__StaticGlyphRanges) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__StaticGlyphRanges = &__pyx_type_5imgui_4core__StaticGlyphRanges;
  __pyx_vtabptr_5imgui_4core__Font = &__pyx_vtable_5imgui_4core__Font;
  __pyx_vtable_5imgui_4core__Font.from_ptr = (PyObject *(*)(ImFont *))__pyx_f_5imgui_4core_5_Font_from_ptr;
  if (PyType_Ready(&__pyx_type_5imgui_4core__Font) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
  __pyx_type_5imgui_4core__Font.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__Font.tp_dict, __pyx_vtabptr_5imgui_4core__Font) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "_Font", (PyObject *)&__pyx_type_5imgui_4core__Font) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__Font) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__Font = &__pyx_type_5imgui_4core__Font;
  __pyx_vtabptr_5imgui_4core__FontAtlas = &__pyx_vtable_5imgui_4core__FontAtlas;
  __pyx_vtable_5imgui_4core__FontAtlas.from_ptr = (PyObject *(*)(ImFontAtlas *))__pyx_f_5imgui_4core_10_FontAtlas_from_ptr;
  if (PyType_Ready(&__pyx_type_5imgui_4core__FontAtlas) < 0) __PYX_ERR(0, 595, __pyx_L1_error)
  __pyx_type_5imgui_4core__FontAtlas.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__FontAtlas.tp_dict, __pyx_vtabptr_5imgui_4core__FontAtlas) < 0) __PYX_ERR(0, 595, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "_FontAtlas", (PyObject *)&__pyx_type_5imgui_4core__FontAtlas) < 0) __PYX_ERR(0, 595, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__FontAtlas) < 0) __PYX_ERR(0, 595, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__FontAtlas = &__pyx_type_5imgui_4core__FontAtlas;
  __pyx_vtabptr_5imgui_4core__IO = &__pyx_vtable_5imgui_4core__IO;
  __pyx_vtable_5imgui_4core__IO._io_render_callback = (void (*)(ImDrawData *))__pyx_f_5imgui_4core_3_IO__io_render_callback;
  if (PyType_Ready(&__pyx_type_5imgui_4core__IO) < 0) __PYX_ERR(0, 702, __pyx_L1_error)
  __pyx_type_5imgui_4core__IO.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5imgui_4core__IO.tp_dict, __pyx_vtabptr_5imgui_4core__IO) < 0) __PYX_ERR(0, 702, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "_IO", (PyObject *)&__pyx_type_5imgui_4core__IO) < 0) __PYX_ERR(0, 702, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5imgui_4core__IO) < 0) __PYX_ERR(0, 702, __pyx_L1_error)
  __pyx_ptype_5imgui_4core__IO = &__pyx_type_5imgui_4core__IO;
  if (PyType_Ready(&__pyx_type_5imgui_4core___pyx_scope_struct__font) < 0) __PYX_ERR(0, 5380, __pyx_L1_error)
  __pyx_type_5imgui_4core___pyx_scope_struct__font.tp_print = 0;
  __pyx_ptype_5imgui_4core___pyx_scope_struct__font = &__pyx_type_5imgui_4core___pyx_scope_struct__font;
  if (PyType_Ready(&__pyx_type_5imgui_4core___pyx_scope_struct_1_styled) < 0) __PYX_ERR(0, 5408, __pyx_L1_error)
  __pyx_type_5imgui_4core___pyx_scope_struct_1_styled.tp_print = 0;
  __pyx_ptype_5imgui_4core___pyx_scope_struct_1_styled = &__pyx_type_5imgui_4core___pyx_scope_struct_1_styled;
  if (PyType_Ready(&__pyx_type_5imgui_4core___pyx_scope_struct_2_istyled) < 0) __PYX_ERR(0, 5417, __pyx_L1_error)
  __pyx_type_5imgui_4core___pyx_scope_struct_2_istyled.tp_print = 0;
  __pyx_ptype_5imgui_4core___pyx_scope_struct_2_istyled = &__pyx_type_5imgui_4core___pyx_scope_struct_2_istyled;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 103, __pyx_L1_error)
  __pyx_type___pyx_array.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(1, 103, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 103, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 275, __pyx_L1_error)
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 275, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 326, __pyx_L1_error)
  __pyx_type___pyx_memoryview.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(1, 326, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 326, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 951, __pyx_L1_error)
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(1, 951, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 951, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "imgui/core.pyx":14
 * from cython.view cimport array as cvarray
 * 
 * from collections import namedtuple             # <<<<<<<<<<<<<<
 * import warnings
 * from contextlib import contextmanager
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_namedtuple);
  __Pyx_GIVEREF(__pyx_n_s_namedtuple);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_namedtuple);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_namedtuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_namedtuple, __pyx_t_1) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imgui/core.pyx":15
 * 
 * from collections import namedtuple
 * import warnings             # <<<<<<<<<<<<<<
 * from contextlib import contextmanager
 * try:
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_warnings, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imgui/core.pyx":16
 * from collections import namedtuple
 * import warnings
 * from contextlib import contextmanager             # <<<<<<<<<<<<<<
 * try:
 *     from itertools import izip_longest
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_contextmanager);
  __Pyx_GIVEREF(__pyx_n_s_contextmanager);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_contextmanager);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_contextlib, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_contextmanager); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_contextmanager, __pyx_t_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":17
 * import warnings
 * from contextlib import contextmanager
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import izip_longest
 * except ImportError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "imgui/core.pyx":18
 * from contextlib import contextmanager
 * try:
 *     from itertools import izip_longest             # <<<<<<<<<<<<<<
 * except ImportError:
 *     from itertools import zip_longest as izip_longest
 */
      __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_n_s_izip_longest);
      __Pyx_GIVEREF(__pyx_n_s_izip_longest);
      PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_izip_longest);
      __pyx_t_2 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_izip_longest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_izip_longest, __pyx_t_1) < 0) __PYX_ERR(0, 18, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "imgui/core.pyx":17
 * import warnings
 * from contextlib import contextmanager
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import izip_longest
 * except ImportError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L7_try_end;
    __pyx_L2_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "imgui/core.pyx":19
 * try:
 *     from itertools import izip_longest
 * except ImportError:             # <<<<<<<<<<<<<<
 *     from itertools import zip_longest as izip_longest
 * 
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("imgui.core", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_7) < 0) __PYX_ERR(0, 19, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_7);

      /* "imgui/core.pyx":20
 *     from itertools import izip_longest
 * except ImportError:
 *     from itertools import zip_longest as izip_longest             # <<<<<<<<<<<<<<
 * 
 * from libc.stdlib cimport malloc, free
 */
      __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 20, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_zip_longest);
      __Pyx_GIVEREF(__pyx_n_s_zip_longest);
      PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_zip_longest);
      __pyx_t_9 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_8, -1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 20, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_ImportFrom(__pyx_t_9, __pyx_n_s_zip_longest); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 20, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_izip_longest, __pyx_t_8) < 0) __PYX_ERR(0, 20, __pyx_L4_except_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;

    /* "imgui/core.pyx":17
 * import warnings
 * from contextlib import contextmanager
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import izip_longest
 * except ImportError:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L7_try_end:;
  }

  /* "imgui/core.pyx":36
 * DEF TARGET_IMGUI_VERSION = (1, 49)
 * 
 * cdef unsigned short* _LATIN_ALL = [0x0020, 0x024F , 0]             # <<<<<<<<<<<<<<
 * 
 * # ==== Condition enum redefines ====
 */
  __pyx_t_10[0] = 0x0020;
  __pyx_t_10[1] = 0x024F;
  __pyx_t_10[2] = 0;
  __pyx_v_5imgui_4core__LATIN_ALL = __pyx_t_10;

  /* "imgui/core.pyx":39
 * 
 * # ==== Condition enum redefines ====
 * ALWAYS = enums.ImGuiSetCond_Always             # <<<<<<<<<<<<<<
 * ONCE = enums.ImGuiSetCond_Once
 * FIRST_USE_EVER = enums.ImGuiSetCond_FirstUseEver
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiSetCond_(ImGuiSetCond_Always); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ALWAYS, __pyx_t_7) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":40
 * # ==== Condition enum redefines ====
 * ALWAYS = enums.ImGuiSetCond_Always
 * ONCE = enums.ImGuiSetCond_Once             # <<<<<<<<<<<<<<
 * FIRST_USE_EVER = enums.ImGuiSetCond_FirstUseEver
 * APPEARING = enums.ImGuiSetCond_Appearing
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiSetCond_(ImGuiSetCond_Once); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ONCE, __pyx_t_7) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":41
 * ALWAYS = enums.ImGuiSetCond_Always
 * ONCE = enums.ImGuiSetCond_Once
 * FIRST_USE_EVER = enums.ImGuiSetCond_FirstUseEver             # <<<<<<<<<<<<<<
 * APPEARING = enums.ImGuiSetCond_Appearing
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiSetCond_(ImGuiSetCond_FirstUseEver); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FIRST_USE_EVER, __pyx_t_7) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":42
 * ONCE = enums.ImGuiSetCond_Once
 * FIRST_USE_EVER = enums.ImGuiSetCond_FirstUseEver
 * APPEARING = enums.ImGuiSetCond_Appearing             # <<<<<<<<<<<<<<
 * 
 * # ==== Style var enum redefines ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiSetCond_(ImGuiSetCond_Appearing); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_APPEARING, __pyx_t_7) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":45
 * 
 * # ==== Style var enum redefines ====
 * STYLE_ALPHA = enums.ImGuiStyleVar_Alpha # float             # <<<<<<<<<<<<<<
 * STYLE_WINDOW_PADDING = enums.ImGuiStyleVar_WindowPadding  # Vec2
 * STYLE_WINDOW_ROUNDING = enums.ImGuiStyleVar_WindowRounding  # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_Alpha); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_ALPHA, __pyx_t_7) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":46
 * # ==== Style var enum redefines ====
 * STYLE_ALPHA = enums.ImGuiStyleVar_Alpha # float
 * STYLE_WINDOW_PADDING = enums.ImGuiStyleVar_WindowPadding  # Vec2             # <<<<<<<<<<<<<<
 * STYLE_WINDOW_ROUNDING = enums.ImGuiStyleVar_WindowRounding  # float
 * STYLE_WINDOW_MIN_SIZE = enums.ImGuiStyleVar_WindowMinSize  # Vec2
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_WindowPadding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_WINDOW_PADDING, __pyx_t_7) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":47
 * STYLE_ALPHA = enums.ImGuiStyleVar_Alpha # float
 * STYLE_WINDOW_PADDING = enums.ImGuiStyleVar_WindowPadding  # Vec2
 * STYLE_WINDOW_ROUNDING = enums.ImGuiStyleVar_WindowRounding  # float             # <<<<<<<<<<<<<<
 * STYLE_WINDOW_MIN_SIZE = enums.ImGuiStyleVar_WindowMinSize  # Vec2
 * STYLE_CHILD_WINDOW_ROUNDING = enums.ImGuiStyleVar_ChildWindowRounding # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_WindowRounding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_WINDOW_ROUNDING, __pyx_t_7) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":48
 * STYLE_WINDOW_PADDING = enums.ImGuiStyleVar_WindowPadding  # Vec2
 * STYLE_WINDOW_ROUNDING = enums.ImGuiStyleVar_WindowRounding  # float
 * STYLE_WINDOW_MIN_SIZE = enums.ImGuiStyleVar_WindowMinSize  # Vec2             # <<<<<<<<<<<<<<
 * STYLE_CHILD_WINDOW_ROUNDING = enums.ImGuiStyleVar_ChildWindowRounding # float
 * STYLE_FRAME_PADDING = enums.ImGuiStyleVar_FramePadding # Vec2
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_WindowMinSize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_WINDOW_MIN_SIZE, __pyx_t_7) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":49
 * STYLE_WINDOW_ROUNDING = enums.ImGuiStyleVar_WindowRounding  # float
 * STYLE_WINDOW_MIN_SIZE = enums.ImGuiStyleVar_WindowMinSize  # Vec2
 * STYLE_CHILD_WINDOW_ROUNDING = enums.ImGuiStyleVar_ChildWindowRounding # float             # <<<<<<<<<<<<<<
 * STYLE_FRAME_PADDING = enums.ImGuiStyleVar_FramePadding # Vec2
 * STYLE_FRAME_ROUNDING = enums.ImGuiStyleVar_FrameRounding # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ChildWindowRounding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_CHILD_WINDOW_ROUNDING, __pyx_t_7) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":50
 * STYLE_WINDOW_MIN_SIZE = enums.ImGuiStyleVar_WindowMinSize  # Vec2
 * STYLE_CHILD_WINDOW_ROUNDING = enums.ImGuiStyleVar_ChildWindowRounding # float
 * STYLE_FRAME_PADDING = enums.ImGuiStyleVar_FramePadding # Vec2             # <<<<<<<<<<<<<<
 * STYLE_FRAME_ROUNDING = enums.ImGuiStyleVar_FrameRounding # float
 * STYLE_ITEM_SPACING = enums.ImGuiStyleVar_ItemSpacing # Vec2
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_FramePadding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_FRAME_PADDING, __pyx_t_7) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":51
 * STYLE_CHILD_WINDOW_ROUNDING = enums.ImGuiStyleVar_ChildWindowRounding # float
 * STYLE_FRAME_PADDING = enums.ImGuiStyleVar_FramePadding # Vec2
 * STYLE_FRAME_ROUNDING = enums.ImGuiStyleVar_FrameRounding # float             # <<<<<<<<<<<<<<
 * STYLE_ITEM_SPACING = enums.ImGuiStyleVar_ItemSpacing # Vec2
 * STYLE_ITEM_INNER_SPACING = enums.ImGuiStyleVar_ItemInnerSpacing # Vec2
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_FrameRounding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_FRAME_ROUNDING, __pyx_t_7) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":52
 * STYLE_FRAME_PADDING = enums.ImGuiStyleVar_FramePadding # Vec2
 * STYLE_FRAME_ROUNDING = enums.ImGuiStyleVar_FrameRounding # float
 * STYLE_ITEM_SPACING = enums.ImGuiStyleVar_ItemSpacing # Vec2             # <<<<<<<<<<<<<<
 * STYLE_ITEM_INNER_SPACING = enums.ImGuiStyleVar_ItemInnerSpacing # Vec2
 * STYLE_INDENT_SPACING = enums.ImGuiStyleVar_IndentSpacing # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ItemSpacing); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_ITEM_SPACING, __pyx_t_7) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":53
 * STYLE_FRAME_ROUNDING = enums.ImGuiStyleVar_FrameRounding # float
 * STYLE_ITEM_SPACING = enums.ImGuiStyleVar_ItemSpacing # Vec2
 * STYLE_ITEM_INNER_SPACING = enums.ImGuiStyleVar_ItemInnerSpacing # Vec2             # <<<<<<<<<<<<<<
 * STYLE_INDENT_SPACING = enums.ImGuiStyleVar_IndentSpacing # float
 * STYLE_GRAB_MIN_SIZE = enums.ImGuiStyleVar_GrabMinSize # float
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ItemInnerSpacing); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_ITEM_INNER_SPACING, __pyx_t_7) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":54
 * STYLE_ITEM_SPACING = enums.ImGuiStyleVar_ItemSpacing # Vec2
 * STYLE_ITEM_INNER_SPACING = enums.ImGuiStyleVar_ItemInnerSpacing # Vec2
 * STYLE_INDENT_SPACING = enums.ImGuiStyleVar_IndentSpacing # float             # <<<<<<<<<<<<<<
 * STYLE_GRAB_MIN_SIZE = enums.ImGuiStyleVar_GrabMinSize # float
 * IF TARGET_IMGUI_VERSION > (1, 49):
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_IndentSpacing); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_INDENT_SPACING, __pyx_t_7) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":55
 * STYLE_ITEM_INNER_SPACING = enums.ImGuiStyleVar_ItemInnerSpacing # Vec2
 * STYLE_INDENT_SPACING = enums.ImGuiStyleVar_IndentSpacing # float
 * STYLE_GRAB_MIN_SIZE = enums.ImGuiStyleVar_GrabMinSize # float             # <<<<<<<<<<<<<<
 * IF TARGET_IMGUI_VERSION > (1, 49):
 *     STYLE_BUTTON_TEXT_ALIGN = enums.ImGuiStyleVar_ButtonTextAlign # flags ImGuiAlign_*
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_GrabMinSize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STYLE_GRAB_MIN_SIZE, __pyx_t_7) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":60
 * 
 * # ==== Key map enum redefines ====
 * KEY_TAB = enums.ImGuiKey_Tab                 # for tabbing through fields             # <<<<<<<<<<<<<<
 * KEY_LEFT_ARROW = enums.ImGuiKey_LeftArrow    # for text edit
 * KEY_RIGHT_ARROW = enums.ImGuiKey_RightArrow  # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Tab); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_TAB, __pyx_t_7) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":61
 * # ==== Key map enum redefines ====
 * KEY_TAB = enums.ImGuiKey_Tab                 # for tabbing through fields
 * KEY_LEFT_ARROW = enums.ImGuiKey_LeftArrow    # for text edit             # <<<<<<<<<<<<<<
 * KEY_RIGHT_ARROW = enums.ImGuiKey_RightArrow  # for text edit
 * KEY_UP_ARROW = enums.ImGuiKey_UpArrow        # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_LeftArrow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_LEFT_ARROW, __pyx_t_7) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":62
 * KEY_TAB = enums.ImGuiKey_Tab                 # for tabbing through fields
 * KEY_LEFT_ARROW = enums.ImGuiKey_LeftArrow    # for text edit
 * KEY_RIGHT_ARROW = enums.ImGuiKey_RightArrow  # for text edit             # <<<<<<<<<<<<<<
 * KEY_UP_ARROW = enums.ImGuiKey_UpArrow        # for text edit
 * KEY_DOWN_ARROW = enums.ImGuiKey_DownArrow    # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_RightArrow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_RIGHT_ARROW, __pyx_t_7) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":63
 * KEY_LEFT_ARROW = enums.ImGuiKey_LeftArrow    # for text edit
 * KEY_RIGHT_ARROW = enums.ImGuiKey_RightArrow  # for text edit
 * KEY_UP_ARROW = enums.ImGuiKey_UpArrow        # for text edit             # <<<<<<<<<<<<<<
 * KEY_DOWN_ARROW = enums.ImGuiKey_DownArrow    # for text edit
 * KEY_PAGE_UP = enums.ImGuiKey_PageUp
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_UpArrow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_UP_ARROW, __pyx_t_7) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":64
 * KEY_RIGHT_ARROW = enums.ImGuiKey_RightArrow  # for text edit
 * KEY_UP_ARROW = enums.ImGuiKey_UpArrow        # for text edit
 * KEY_DOWN_ARROW = enums.ImGuiKey_DownArrow    # for text edit             # <<<<<<<<<<<<<<
 * KEY_PAGE_UP = enums.ImGuiKey_PageUp
 * KEY_PAGE_DOWN = enums.ImGuiKey_PageDown
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_DownArrow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_DOWN_ARROW, __pyx_t_7) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":65
 * KEY_UP_ARROW = enums.ImGuiKey_UpArrow        # for text edit
 * KEY_DOWN_ARROW = enums.ImGuiKey_DownArrow    # for text edit
 * KEY_PAGE_UP = enums.ImGuiKey_PageUp             # <<<<<<<<<<<<<<
 * KEY_PAGE_DOWN = enums.ImGuiKey_PageDown
 * KEY_HOME = enums.ImGuiKey_Home               # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_PageUp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_PAGE_UP, __pyx_t_7) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":66
 * KEY_DOWN_ARROW = enums.ImGuiKey_DownArrow    # for text edit
 * KEY_PAGE_UP = enums.ImGuiKey_PageUp
 * KEY_PAGE_DOWN = enums.ImGuiKey_PageDown             # <<<<<<<<<<<<<<
 * KEY_HOME = enums.ImGuiKey_Home               # for text edit
 * KEY_END = enums.ImGuiKey_End                 # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_PageDown); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_PAGE_DOWN, __pyx_t_7) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":67
 * KEY_PAGE_UP = enums.ImGuiKey_PageUp
 * KEY_PAGE_DOWN = enums.ImGuiKey_PageDown
 * KEY_HOME = enums.ImGuiKey_Home               # for text edit             # <<<<<<<<<<<<<<
 * KEY_END = enums.ImGuiKey_End                 # for text edit
 * KEY_DELETE = enums.ImGuiKey_Delete           # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Home); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_HOME, __pyx_t_7) < 0) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":68
 * KEY_PAGE_DOWN = enums.ImGuiKey_PageDown
 * KEY_HOME = enums.ImGuiKey_Home               # for text edit
 * KEY_END = enums.ImGuiKey_End                 # for text edit             # <<<<<<<<<<<<<<
 * KEY_DELETE = enums.ImGuiKey_Delete           # for text edit
 * KEY_BACKSPACE = enums.ImGuiKey_Backspace     # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_End); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_END, __pyx_t_7) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":69
 * KEY_HOME = enums.ImGuiKey_Home               # for text edit
 * KEY_END = enums.ImGuiKey_End                 # for text edit
 * KEY_DELETE = enums.ImGuiKey_Delete           # for text edit             # <<<<<<<<<<<<<<
 * KEY_BACKSPACE = enums.ImGuiKey_Backspace     # for text edit
 * KEY_ENTER = enums.ImGuiKey_Enter             # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Delete); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_DELETE, __pyx_t_7) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":70
 * KEY_END = enums.ImGuiKey_End                 # for text edit
 * KEY_DELETE = enums.ImGuiKey_Delete           # for text edit
 * KEY_BACKSPACE = enums.ImGuiKey_Backspace     # for text edit             # <<<<<<<<<<<<<<
 * KEY_ENTER = enums.ImGuiKey_Enter             # for text edit
 * KEY_ESCAPE = enums.ImGuiKey_Escape           # for text edit
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Backspace); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_BACKSPACE, __pyx_t_7) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":71
 * KEY_DELETE = enums.ImGuiKey_Delete           # for text edit
 * KEY_BACKSPACE = enums.ImGuiKey_Backspace     # for text edit
 * KEY_ENTER = enums.ImGuiKey_Enter             # for text edit             # <<<<<<<<<<<<<<
 * KEY_ESCAPE = enums.ImGuiKey_Escape           # for text edit
 * KEY_A = enums.ImGuiKey_A                     # for text edit CTRL+A: select all
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Enter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_ENTER, __pyx_t_7) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":72
 * KEY_BACKSPACE = enums.ImGuiKey_Backspace     # for text edit
 * KEY_ENTER = enums.ImGuiKey_Enter             # for text edit
 * KEY_ESCAPE = enums.ImGuiKey_Escape           # for text edit             # <<<<<<<<<<<<<<
 * KEY_A = enums.ImGuiKey_A                     # for text edit CTRL+A: select all
 * KEY_C = enums.ImGuiKey_C                     # for text edit CTRL+C: copy
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Escape); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_ESCAPE, __pyx_t_7) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":73
 * KEY_ENTER = enums.ImGuiKey_Enter             # for text edit
 * KEY_ESCAPE = enums.ImGuiKey_Escape           # for text edit
 * KEY_A = enums.ImGuiKey_A                     # for text edit CTRL+A: select all             # <<<<<<<<<<<<<<
 * KEY_C = enums.ImGuiKey_C                     # for text edit CTRL+C: copy
 * KEY_V = enums.ImGuiKey_V                     # for text edit CTRL+V: paste
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_A); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_A, __pyx_t_7) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":74
 * KEY_ESCAPE = enums.ImGuiKey_Escape           # for text edit
 * KEY_A = enums.ImGuiKey_A                     # for text edit CTRL+A: select all
 * KEY_C = enums.ImGuiKey_C                     # for text edit CTRL+C: copy             # <<<<<<<<<<<<<<
 * KEY_V = enums.ImGuiKey_V                     # for text edit CTRL+V: paste
 * KEY_X = enums.ImGuiKey_X                     # for text edit CTRL+X: cut
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_C); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_C, __pyx_t_7) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":75
 * KEY_A = enums.ImGuiKey_A                     # for text edit CTRL+A: select all
 * KEY_C = enums.ImGuiKey_C                     # for text edit CTRL+C: copy
 * KEY_V = enums.ImGuiKey_V                     # for text edit CTRL+V: paste             # <<<<<<<<<<<<<<
 * KEY_X = enums.ImGuiKey_X                     # for text edit CTRL+X: cut
 * KEY_Y = enums.ImGuiKey_Y                     # for text edit CTRL+Y: redo
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_V); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_V, __pyx_t_7) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":76
 * KEY_C = enums.ImGuiKey_C                     # for text edit CTRL+C: copy
 * KEY_V = enums.ImGuiKey_V                     # for text edit CTRL+V: paste
 * KEY_X = enums.ImGuiKey_X                     # for text edit CTRL+X: cut             # <<<<<<<<<<<<<<
 * KEY_Y = enums.ImGuiKey_Y                     # for text edit CTRL+Y: redo
 * KEY_Z = enums.ImGuiKey_Z                     # for text edit CTRL+Z: undo
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_X); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_X, __pyx_t_7) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":77
 * KEY_V = enums.ImGuiKey_V                     # for text edit CTRL+V: paste
 * KEY_X = enums.ImGuiKey_X                     # for text edit CTRL+X: cut
 * KEY_Y = enums.ImGuiKey_Y                     # for text edit CTRL+Y: redo             # <<<<<<<<<<<<<<
 * KEY_Z = enums.ImGuiKey_Z                     # for text edit CTRL+Z: undo
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_Y, __pyx_t_7) < 0) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":78
 * KEY_X = enums.ImGuiKey_X                     # for text edit CTRL+X: cut
 * KEY_Y = enums.ImGuiKey_Y                     # for text edit CTRL+Y: redo
 * KEY_Z = enums.ImGuiKey_Z                     # for text edit CTRL+Z: undo             # <<<<<<<<<<<<<<
 * 
 * # ==== Window flags enum redefines ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_Z); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KEY_Z, __pyx_t_7) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":81
 * 
 * # ==== Window flags enum redefines ====
 * WINDOW_NO_TITLE_BAR = enums.ImGuiWindowFlags_NoTitleBar             # <<<<<<<<<<<<<<
 * WINDOW_NO_RESIZE = enums.ImGuiWindowFlags_NoResize
 * WINDOW_NO_MOVE = enums.ImGuiWindowFlags_NoMove
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoTitleBar); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_TITLE_BAR, __pyx_t_7) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":82
 * # ==== Window flags enum redefines ====
 * WINDOW_NO_TITLE_BAR = enums.ImGuiWindowFlags_NoTitleBar
 * WINDOW_NO_RESIZE = enums.ImGuiWindowFlags_NoResize             # <<<<<<<<<<<<<<
 * WINDOW_NO_MOVE = enums.ImGuiWindowFlags_NoMove
 * WINDOW_NO_SCROLLBAR = enums.ImGuiWindowFlags_NoScrollbar
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoResize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_RESIZE, __pyx_t_7) < 0) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":83
 * WINDOW_NO_TITLE_BAR = enums.ImGuiWindowFlags_NoTitleBar
 * WINDOW_NO_RESIZE = enums.ImGuiWindowFlags_NoResize
 * WINDOW_NO_MOVE = enums.ImGuiWindowFlags_NoMove             # <<<<<<<<<<<<<<
 * WINDOW_NO_SCROLLBAR = enums.ImGuiWindowFlags_NoScrollbar
 * WINDOW_NO_SCROLL_WITH_MOUSE = enums.ImGuiWindowFlags_NoScrollWithMouse
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoMove); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_MOVE, __pyx_t_7) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":84
 * WINDOW_NO_RESIZE = enums.ImGuiWindowFlags_NoResize
 * WINDOW_NO_MOVE = enums.ImGuiWindowFlags_NoMove
 * WINDOW_NO_SCROLLBAR = enums.ImGuiWindowFlags_NoScrollbar             # <<<<<<<<<<<<<<
 * WINDOW_NO_SCROLL_WITH_MOUSE = enums.ImGuiWindowFlags_NoScrollWithMouse
 * WINDOW_NO_COLLAPSE = enums.ImGuiWindowFlags_NoCollapse
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoScrollbar); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_SCROLLBAR, __pyx_t_7) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":85
 * WINDOW_NO_MOVE = enums.ImGuiWindowFlags_NoMove
 * WINDOW_NO_SCROLLBAR = enums.ImGuiWindowFlags_NoScrollbar
 * WINDOW_NO_SCROLL_WITH_MOUSE = enums.ImGuiWindowFlags_NoScrollWithMouse             # <<<<<<<<<<<<<<
 * WINDOW_NO_COLLAPSE = enums.ImGuiWindowFlags_NoCollapse
 * WINDOW_ALWAYS_AUTO_RESIZE = enums.ImGuiWindowFlags_AlwaysAutoResize
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoScrollWithMouse); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_SCROLL_WITH_MOUSE, __pyx_t_7) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":86
 * WINDOW_NO_SCROLLBAR = enums.ImGuiWindowFlags_NoScrollbar
 * WINDOW_NO_SCROLL_WITH_MOUSE = enums.ImGuiWindowFlags_NoScrollWithMouse
 * WINDOW_NO_COLLAPSE = enums.ImGuiWindowFlags_NoCollapse             # <<<<<<<<<<<<<<
 * WINDOW_ALWAYS_AUTO_RESIZE = enums.ImGuiWindowFlags_AlwaysAutoResize
 * WINDOW_SHOW_BORDERS = enums.ImGuiWindowFlags_ShowBorders
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoCollapse); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_COLLAPSE, __pyx_t_7) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":87
 * WINDOW_NO_SCROLL_WITH_MOUSE = enums.ImGuiWindowFlags_NoScrollWithMouse
 * WINDOW_NO_COLLAPSE = enums.ImGuiWindowFlags_NoCollapse
 * WINDOW_ALWAYS_AUTO_RESIZE = enums.ImGuiWindowFlags_AlwaysAutoResize             # <<<<<<<<<<<<<<
 * WINDOW_SHOW_BORDERS = enums.ImGuiWindowFlags_ShowBorders
 * WINDOW_NO_SAVED_SETTINGS = enums.ImGuiWindowFlags_NoSavedSettings
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_AlwaysAutoResize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_ALWAYS_AUTO_RESIZE, __pyx_t_7) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":88
 * WINDOW_NO_COLLAPSE = enums.ImGuiWindowFlags_NoCollapse
 * WINDOW_ALWAYS_AUTO_RESIZE = enums.ImGuiWindowFlags_AlwaysAutoResize
 * WINDOW_SHOW_BORDERS = enums.ImGuiWindowFlags_ShowBorders             # <<<<<<<<<<<<<<
 * WINDOW_NO_SAVED_SETTINGS = enums.ImGuiWindowFlags_NoSavedSettings
 * WINDOW_NO_INPUTS = enums.ImGuiWindowFlags_NoInputs
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_ShowBorders); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_SHOW_BORDERS, __pyx_t_7) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":89
 * WINDOW_ALWAYS_AUTO_RESIZE = enums.ImGuiWindowFlags_AlwaysAutoResize
 * WINDOW_SHOW_BORDERS = enums.ImGuiWindowFlags_ShowBorders
 * WINDOW_NO_SAVED_SETTINGS = enums.ImGuiWindowFlags_NoSavedSettings             # <<<<<<<<<<<<<<
 * WINDOW_NO_INPUTS = enums.ImGuiWindowFlags_NoInputs
 * WINDOW_MENU_BAR = enums.ImGuiWindowFlags_MenuBar
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoSavedSettings); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_SAVED_SETTINGS, __pyx_t_7) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":90
 * WINDOW_SHOW_BORDERS = enums.ImGuiWindowFlags_ShowBorders
 * WINDOW_NO_SAVED_SETTINGS = enums.ImGuiWindowFlags_NoSavedSettings
 * WINDOW_NO_INPUTS = enums.ImGuiWindowFlags_NoInputs             # <<<<<<<<<<<<<<
 * WINDOW_MENU_BAR = enums.ImGuiWindowFlags_MenuBar
 * WINDOW_HORIZONTAL_SCROLLING_BAR = enums.ImGuiWindowFlags_HorizontalScrollbar
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoInputs); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_INPUTS, __pyx_t_7) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":91
 * WINDOW_NO_SAVED_SETTINGS = enums.ImGuiWindowFlags_NoSavedSettings
 * WINDOW_NO_INPUTS = enums.ImGuiWindowFlags_NoInputs
 * WINDOW_MENU_BAR = enums.ImGuiWindowFlags_MenuBar             # <<<<<<<<<<<<<<
 * WINDOW_HORIZONTAL_SCROLLING_BAR = enums.ImGuiWindowFlags_HorizontalScrollbar
 * WINDOW_NO_FOCUS_ON_APPEARING = enums.ImGuiWindowFlags_NoFocusOnAppearing
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_MenuBar); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_MENU_BAR, __pyx_t_7) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":92
 * WINDOW_NO_INPUTS = enums.ImGuiWindowFlags_NoInputs
 * WINDOW_MENU_BAR = enums.ImGuiWindowFlags_MenuBar
 * WINDOW_HORIZONTAL_SCROLLING_BAR = enums.ImGuiWindowFlags_HorizontalScrollbar             # <<<<<<<<<<<<<<
 * WINDOW_NO_FOCUS_ON_APPEARING = enums.ImGuiWindowFlags_NoFocusOnAppearing
 * WINDOW_NO_BRING_TO_FRONT_ON_FOCUS = enums.ImGuiWindowFlags_NoBringToFrontOnFocus
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_HorizontalScrollbar); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_HORIZONTAL_SCROLLING_BAR, __pyx_t_7) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":93
 * WINDOW_MENU_BAR = enums.ImGuiWindowFlags_MenuBar
 * WINDOW_HORIZONTAL_SCROLLING_BAR = enums.ImGuiWindowFlags_HorizontalScrollbar
 * WINDOW_NO_FOCUS_ON_APPEARING = enums.ImGuiWindowFlags_NoFocusOnAppearing             # <<<<<<<<<<<<<<
 * WINDOW_NO_BRING_TO_FRONT_ON_FOCUS = enums.ImGuiWindowFlags_NoBringToFrontOnFocus
 * WINDOW_ALWAYS_VERTICAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysVerticalScrollbar
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoFocusOnAppearing); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_FOCUS_ON_APPEARING, __pyx_t_7) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":94
 * WINDOW_HORIZONTAL_SCROLLING_BAR = enums.ImGuiWindowFlags_HorizontalScrollbar
 * WINDOW_NO_FOCUS_ON_APPEARING = enums.ImGuiWindowFlags_NoFocusOnAppearing
 * WINDOW_NO_BRING_TO_FRONT_ON_FOCUS = enums.ImGuiWindowFlags_NoBringToFrontOnFocus             # <<<<<<<<<<<<<<
 * WINDOW_ALWAYS_VERTICAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysVerticalScrollbar
 * WINDOW_ALWAYS_HORIZONTAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysHorizontalScrollbar
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoBringToFrontOnFocus); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_NO_BRING_TO_FRONT_ON_FOCU, __pyx_t_7) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":95
 * WINDOW_NO_FOCUS_ON_APPEARING = enums.ImGuiWindowFlags_NoFocusOnAppearing
 * WINDOW_NO_BRING_TO_FRONT_ON_FOCUS = enums.ImGuiWindowFlags_NoBringToFrontOnFocus
 * WINDOW_ALWAYS_VERTICAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysVerticalScrollbar             # <<<<<<<<<<<<<<
 * WINDOW_ALWAYS_HORIZONTAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysHorizontalScrollbar
 * WINDOW_ALWAYS_USE_WINDOW_PADDING = enums.ImGuiWindowFlags_AlwaysUseWindowPadding
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_AlwaysVerticalScrollbar); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_ALWAYS_VERTICAL_SCROLLBAR, __pyx_t_7) < 0) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":96
 * WINDOW_NO_BRING_TO_FRONT_ON_FOCUS = enums.ImGuiWindowFlags_NoBringToFrontOnFocus
 * WINDOW_ALWAYS_VERTICAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysVerticalScrollbar
 * WINDOW_ALWAYS_HORIZONTAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysHorizontalScrollbar             # <<<<<<<<<<<<<<
 * WINDOW_ALWAYS_USE_WINDOW_PADDING = enums.ImGuiWindowFlags_AlwaysUseWindowPadding
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_AlwaysHorizontalScrollbar); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_ALWAYS_HORIZONTAL_SCROLLB, __pyx_t_7) < 0) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":97
 * WINDOW_ALWAYS_VERTICAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysVerticalScrollbar
 * WINDOW_ALWAYS_HORIZONTAL_SCROLLBAR = enums.ImGuiWindowFlags_AlwaysHorizontalScrollbar
 * WINDOW_ALWAYS_USE_WINDOW_PADDING = enums.ImGuiWindowFlags_AlwaysUseWindowPadding             # <<<<<<<<<<<<<<
 * 
 * # ==== TreeNode flags enum redefines ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_AlwaysUseWindowPadding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WINDOW_ALWAYS_USE_WINDOW_PADDING, __pyx_t_7) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":100
 * 
 * # ==== TreeNode flags enum redefines ====
 * TREE_NODE_SELECTED = enums.ImGuiTreeNodeFlags_Selected             # <<<<<<<<<<<<<<
 * TREE_NODE_FRAMED = enums.ImGuiTreeNodeFlags_Framed
 * TREE_NODE_ALLOW_OVERLAP_MODE = enums.ImGuiTreeNodeFlags_AllowOverlapMode
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_Selected); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_SELECTED, __pyx_t_7) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":101
 * # ==== TreeNode flags enum redefines ====
 * TREE_NODE_SELECTED = enums.ImGuiTreeNodeFlags_Selected
 * TREE_NODE_FRAMED = enums.ImGuiTreeNodeFlags_Framed             # <<<<<<<<<<<<<<
 * TREE_NODE_ALLOW_OVERLAP_MODE = enums.ImGuiTreeNodeFlags_AllowOverlapMode
 * TREE_NODE_NO_TREE_PUSH_ON_OPEN = enums.ImGuiTreeNodeFlags_NoTreePushOnOpen
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_Framed); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_FRAMED, __pyx_t_7) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":102
 * TREE_NODE_SELECTED = enums.ImGuiTreeNodeFlags_Selected
 * TREE_NODE_FRAMED = enums.ImGuiTreeNodeFlags_Framed
 * TREE_NODE_ALLOW_OVERLAP_MODE = enums.ImGuiTreeNodeFlags_AllowOverlapMode             # <<<<<<<<<<<<<<
 * TREE_NODE_NO_TREE_PUSH_ON_OPEN = enums.ImGuiTreeNodeFlags_NoTreePushOnOpen
 * TREE_NODE_NO_AUTO_OPEN_ON_LOG = enums.ImGuiTreeNodeFlags_NoAutoOpenOnLog
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_AllowOverlapMode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_ALLOW_OVERLAP_MODE, __pyx_t_7) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":103
 * TREE_NODE_FRAMED = enums.ImGuiTreeNodeFlags_Framed
 * TREE_NODE_ALLOW_OVERLAP_MODE = enums.ImGuiTreeNodeFlags_AllowOverlapMode
 * TREE_NODE_NO_TREE_PUSH_ON_OPEN = enums.ImGuiTreeNodeFlags_NoTreePushOnOpen             # <<<<<<<<<<<<<<
 * TREE_NODE_NO_AUTO_OPEN_ON_LOG = enums.ImGuiTreeNodeFlags_NoAutoOpenOnLog
 * TREE_NODE_DEFAULT_OPEN = enums.ImGuiTreeNodeFlags_DefaultOpen
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_NoTreePushOnOpen); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_NO_TREE_PUSH_ON_OPEN, __pyx_t_7) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":104
 * TREE_NODE_ALLOW_OVERLAP_MODE = enums.ImGuiTreeNodeFlags_AllowOverlapMode
 * TREE_NODE_NO_TREE_PUSH_ON_OPEN = enums.ImGuiTreeNodeFlags_NoTreePushOnOpen
 * TREE_NODE_NO_AUTO_OPEN_ON_LOG = enums.ImGuiTreeNodeFlags_NoAutoOpenOnLog             # <<<<<<<<<<<<<<
 * TREE_NODE_DEFAULT_OPEN = enums.ImGuiTreeNodeFlags_DefaultOpen
 * TREE_NODE_OPEN_ON_DOUBLE_CLICK = enums.ImGuiTreeNodeFlags_OpenOnDoubleClick
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_NoAutoOpenOnLog); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_NO_AUTO_OPEN_ON_LOG, __pyx_t_7) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":105
 * TREE_NODE_NO_TREE_PUSH_ON_OPEN = enums.ImGuiTreeNodeFlags_NoTreePushOnOpen
 * TREE_NODE_NO_AUTO_OPEN_ON_LOG = enums.ImGuiTreeNodeFlags_NoAutoOpenOnLog
 * TREE_NODE_DEFAULT_OPEN = enums.ImGuiTreeNodeFlags_DefaultOpen             # <<<<<<<<<<<<<<
 * TREE_NODE_OPEN_ON_DOUBLE_CLICK = enums.ImGuiTreeNodeFlags_OpenOnDoubleClick
 * TREE_NODE_OPEN_ON_ARROW = enums.ImGuiTreeNodeFlags_OpenOnArrow
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_DefaultOpen); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_DEFAULT_OPEN, __pyx_t_7) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":106
 * TREE_NODE_NO_AUTO_OPEN_ON_LOG = enums.ImGuiTreeNodeFlags_NoAutoOpenOnLog
 * TREE_NODE_DEFAULT_OPEN = enums.ImGuiTreeNodeFlags_DefaultOpen
 * TREE_NODE_OPEN_ON_DOUBLE_CLICK = enums.ImGuiTreeNodeFlags_OpenOnDoubleClick             # <<<<<<<<<<<<<<
 * TREE_NODE_OPEN_ON_ARROW = enums.ImGuiTreeNodeFlags_OpenOnArrow
 * TREE_NODE_LEAF = enums.ImGuiTreeNodeFlags_Leaf
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_OpenOnDoubleClick); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_OPEN_ON_DOUBLE_CLICK, __pyx_t_7) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":107
 * TREE_NODE_DEFAULT_OPEN = enums.ImGuiTreeNodeFlags_DefaultOpen
 * TREE_NODE_OPEN_ON_DOUBLE_CLICK = enums.ImGuiTreeNodeFlags_OpenOnDoubleClick
 * TREE_NODE_OPEN_ON_ARROW = enums.ImGuiTreeNodeFlags_OpenOnArrow             # <<<<<<<<<<<<<<
 * TREE_NODE_LEAF = enums.ImGuiTreeNodeFlags_Leaf
 * TREE_NODE_BULLET = enums.ImGuiTreeNodeFlags_Bullet
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_OpenOnArrow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_OPEN_ON_ARROW, __pyx_t_7) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":108
 * TREE_NODE_OPEN_ON_DOUBLE_CLICK = enums.ImGuiTreeNodeFlags_OpenOnDoubleClick
 * TREE_NODE_OPEN_ON_ARROW = enums.ImGuiTreeNodeFlags_OpenOnArrow
 * TREE_NODE_LEAF = enums.ImGuiTreeNodeFlags_Leaf             # <<<<<<<<<<<<<<
 * TREE_NODE_BULLET = enums.ImGuiTreeNodeFlags_Bullet
 * TREE_NODE_COLLAPSING_HEADER = enums.ImGuiTreeNodeFlags_CollapsingHeader
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_Leaf); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_LEAF, __pyx_t_7) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":109
 * TREE_NODE_OPEN_ON_ARROW = enums.ImGuiTreeNodeFlags_OpenOnArrow
 * TREE_NODE_LEAF = enums.ImGuiTreeNodeFlags_Leaf
 * TREE_NODE_BULLET = enums.ImGuiTreeNodeFlags_Bullet             # <<<<<<<<<<<<<<
 * TREE_NODE_COLLAPSING_HEADER = enums.ImGuiTreeNodeFlags_CollapsingHeader
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_Bullet); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_BULLET, __pyx_t_7) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":110
 * TREE_NODE_LEAF = enums.ImGuiTreeNodeFlags_Leaf
 * TREE_NODE_BULLET = enums.ImGuiTreeNodeFlags_Bullet
 * TREE_NODE_COLLAPSING_HEADER = enums.ImGuiTreeNodeFlags_CollapsingHeader             # <<<<<<<<<<<<<<
 * 
 * # ==== Selectable flags enum redefines ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_CollapsingHeader); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREE_NODE_COLLAPSING_HEADER, __pyx_t_7) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":113
 * 
 * # ==== Selectable flags enum redefines ====
 * SELECTABLE_DONT_CLOSE_POPUPS = enums.ImGuiSelectableFlags_DontClosePopups             # <<<<<<<<<<<<<<
 * SELECTABLE_SPAN_ALL_COLUMNS = enums.ImGuiSelectableFlags_SpanAllColumns
 * SELECTABLE_ALLOW_DOUBLE_CLICK = enums.ImGuiSelectableFlags_AllowDoubleClick
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_DontClosePopups); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SELECTABLE_DONT_CLOSE_POPUPS, __pyx_t_7) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":114
 * # ==== Selectable flags enum redefines ====
 * SELECTABLE_DONT_CLOSE_POPUPS = enums.ImGuiSelectableFlags_DontClosePopups
 * SELECTABLE_SPAN_ALL_COLUMNS = enums.ImGuiSelectableFlags_SpanAllColumns             # <<<<<<<<<<<<<<
 * SELECTABLE_ALLOW_DOUBLE_CLICK = enums.ImGuiSelectableFlags_AllowDoubleClick
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_SpanAllColumns); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SELECTABLE_SPAN_ALL_COLUMNS, __pyx_t_7) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":115
 * SELECTABLE_DONT_CLOSE_POPUPS = enums.ImGuiSelectableFlags_DontClosePopups
 * SELECTABLE_SPAN_ALL_COLUMNS = enums.ImGuiSelectableFlags_SpanAllColumns
 * SELECTABLE_ALLOW_DOUBLE_CLICK = enums.ImGuiSelectableFlags_AllowDoubleClick             # <<<<<<<<<<<<<<
 * 
 * # ==== Mouse Cursors ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_AllowDoubleClick); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SELECTABLE_ALLOW_DOUBLE_CLICK, __pyx_t_7) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":118
 * 
 * # ==== Mouse Cursors ====
 * MOUSE_CURSOR_ARROW = enums.ImGuiMouseCursor_Arrow             # <<<<<<<<<<<<<<
 * MOUSE_CURSOR_TEXT_INPUT = enums.ImGuiMouseCursor_TextInput
 * MOUSE_CURSOR_MOVE = enums.ImGuiMouseCursor_Move
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_Arrow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_ARROW, __pyx_t_7) < 0) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":119
 * # ==== Mouse Cursors ====
 * MOUSE_CURSOR_ARROW = enums.ImGuiMouseCursor_Arrow
 * MOUSE_CURSOR_TEXT_INPUT = enums.ImGuiMouseCursor_TextInput             # <<<<<<<<<<<<<<
 * MOUSE_CURSOR_MOVE = enums.ImGuiMouseCursor_Move
 * MOUSE_CURSOR_RESIZE_NS = enums.ImGuiMouseCursor_ResizeNS
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_TextInput); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_TEXT_INPUT, __pyx_t_7) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":120
 * MOUSE_CURSOR_ARROW = enums.ImGuiMouseCursor_Arrow
 * MOUSE_CURSOR_TEXT_INPUT = enums.ImGuiMouseCursor_TextInput
 * MOUSE_CURSOR_MOVE = enums.ImGuiMouseCursor_Move             # <<<<<<<<<<<<<<
 * MOUSE_CURSOR_RESIZE_NS = enums.ImGuiMouseCursor_ResizeNS
 * MOUSE_CURSOR_RESIZE_EW = enums.ImGuiMouseCursor_ResizeEW
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_Move); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_MOVE, __pyx_t_7) < 0) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":121
 * MOUSE_CURSOR_TEXT_INPUT = enums.ImGuiMouseCursor_TextInput
 * MOUSE_CURSOR_MOVE = enums.ImGuiMouseCursor_Move
 * MOUSE_CURSOR_RESIZE_NS = enums.ImGuiMouseCursor_ResizeNS             # <<<<<<<<<<<<<<
 * MOUSE_CURSOR_RESIZE_EW = enums.ImGuiMouseCursor_ResizeEW
 * MOUSE_CURSOR_RESIZE_NESW = enums.ImGuiMouseCursor_ResizeNESW
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ResizeNS); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_RESIZE_NS, __pyx_t_7) < 0) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":122
 * MOUSE_CURSOR_MOVE = enums.ImGuiMouseCursor_Move
 * MOUSE_CURSOR_RESIZE_NS = enums.ImGuiMouseCursor_ResizeNS
 * MOUSE_CURSOR_RESIZE_EW = enums.ImGuiMouseCursor_ResizeEW             # <<<<<<<<<<<<<<
 * MOUSE_CURSOR_RESIZE_NESW = enums.ImGuiMouseCursor_ResizeNESW
 * MOUSE_CURSOR_RESIZE_NWSE = enums.ImGuiMouseCursor_ResizeNWSE
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ResizeEW); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_RESIZE_EW, __pyx_t_7) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":123
 * MOUSE_CURSOR_RESIZE_NS = enums.ImGuiMouseCursor_ResizeNS
 * MOUSE_CURSOR_RESIZE_EW = enums.ImGuiMouseCursor_ResizeEW
 * MOUSE_CURSOR_RESIZE_NESW = enums.ImGuiMouseCursor_ResizeNESW             # <<<<<<<<<<<<<<
 * MOUSE_CURSOR_RESIZE_NWSE = enums.ImGuiMouseCursor_ResizeNWSE
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ResizeNESW); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_RESIZE_NESW, __pyx_t_7) < 0) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":124
 * MOUSE_CURSOR_RESIZE_EW = enums.ImGuiMouseCursor_ResizeEW
 * MOUSE_CURSOR_RESIZE_NESW = enums.ImGuiMouseCursor_ResizeNESW
 * MOUSE_CURSOR_RESIZE_NWSE = enums.ImGuiMouseCursor_ResizeNWSE             # <<<<<<<<<<<<<<
 * 
 * # ==== Color identifiers for styling ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ResizeNWSE); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOUSE_CURSOR_RESIZE_NWSE, __pyx_t_7) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":127
 * 
 * # ==== Color identifiers for styling ====
 * COLOR_TEXT = enums.ImGuiCol_Text             # <<<<<<<<<<<<<<
 * COLOR_TEXT_DISABLED = enums.ImGuiCol_TextDisabled
 * COLOR_WINDOW_BACKGROUND = enums.ImGuiCol_WindowBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Text); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_TEXT, __pyx_t_7) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":128
 * # ==== Color identifiers for styling ====
 * COLOR_TEXT = enums.ImGuiCol_Text
 * COLOR_TEXT_DISABLED = enums.ImGuiCol_TextDisabled             # <<<<<<<<<<<<<<
 * COLOR_WINDOW_BACKGROUND = enums.ImGuiCol_WindowBg
 * COLOR_CHILD_WINDOW_BACKGROUND = enums.ImGuiCol_ChildWindowBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TextDisabled); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_TEXT_DISABLED, __pyx_t_7) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":129
 * COLOR_TEXT = enums.ImGuiCol_Text
 * COLOR_TEXT_DISABLED = enums.ImGuiCol_TextDisabled
 * COLOR_WINDOW_BACKGROUND = enums.ImGuiCol_WindowBg             # <<<<<<<<<<<<<<
 * COLOR_CHILD_WINDOW_BACKGROUND = enums.ImGuiCol_ChildWindowBg
 * COLOR_POPUP_BACKGROUND = enums.ImGuiCol_PopupBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_WindowBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_WINDOW_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":130
 * COLOR_TEXT_DISABLED = enums.ImGuiCol_TextDisabled
 * COLOR_WINDOW_BACKGROUND = enums.ImGuiCol_WindowBg
 * COLOR_CHILD_WINDOW_BACKGROUND = enums.ImGuiCol_ChildWindowBg             # <<<<<<<<<<<<<<
 * COLOR_POPUP_BACKGROUND = enums.ImGuiCol_PopupBg
 * COLOR_BORDER = enums.ImGuiCol_Border
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ChildWindowBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_CHILD_WINDOW_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":131
 * COLOR_WINDOW_BACKGROUND = enums.ImGuiCol_WindowBg
 * COLOR_CHILD_WINDOW_BACKGROUND = enums.ImGuiCol_ChildWindowBg
 * COLOR_POPUP_BACKGROUND = enums.ImGuiCol_PopupBg             # <<<<<<<<<<<<<<
 * COLOR_BORDER = enums.ImGuiCol_Border
 * COLOR_BORDER_SHADOW = enums.ImGuiCol_BorderShadow
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_PopupBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_POPUP_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":132
 * COLOR_CHILD_WINDOW_BACKGROUND = enums.ImGuiCol_ChildWindowBg
 * COLOR_POPUP_BACKGROUND = enums.ImGuiCol_PopupBg
 * COLOR_BORDER = enums.ImGuiCol_Border             # <<<<<<<<<<<<<<
 * COLOR_BORDER_SHADOW = enums.ImGuiCol_BorderShadow
 * COLOR_FRAME_BACKGROUND = enums.ImGuiCol_FrameBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Border); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_BORDER, __pyx_t_7) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":133
 * COLOR_POPUP_BACKGROUND = enums.ImGuiCol_PopupBg
 * COLOR_BORDER = enums.ImGuiCol_Border
 * COLOR_BORDER_SHADOW = enums.ImGuiCol_BorderShadow             # <<<<<<<<<<<<<<
 * COLOR_FRAME_BACKGROUND = enums.ImGuiCol_FrameBg
 * COLOR_FRAME_BACKGROUND_HOVERED = enums.ImGuiCol_FrameBgHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_BorderShadow); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_BORDER_SHADOW, __pyx_t_7) < 0) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":134
 * COLOR_BORDER = enums.ImGuiCol_Border
 * COLOR_BORDER_SHADOW = enums.ImGuiCol_BorderShadow
 * COLOR_FRAME_BACKGROUND = enums.ImGuiCol_FrameBg             # <<<<<<<<<<<<<<
 * COLOR_FRAME_BACKGROUND_HOVERED = enums.ImGuiCol_FrameBgHovered
 * COLOR_FRAME_BACKGROUND_ACTIVE = enums.ImGuiCol_FrameBgActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_FrameBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_FRAME_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":135
 * COLOR_BORDER_SHADOW = enums.ImGuiCol_BorderShadow
 * COLOR_FRAME_BACKGROUND = enums.ImGuiCol_FrameBg
 * COLOR_FRAME_BACKGROUND_HOVERED = enums.ImGuiCol_FrameBgHovered             # <<<<<<<<<<<<<<
 * COLOR_FRAME_BACKGROUND_ACTIVE = enums.ImGuiCol_FrameBgActive
 * COLOR_TITLE_BACKGROUND = enums.ImGuiCol_TitleBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_FrameBgHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_FRAME_BACKGROUND_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":136
 * COLOR_FRAME_BACKGROUND = enums.ImGuiCol_FrameBg
 * COLOR_FRAME_BACKGROUND_HOVERED = enums.ImGuiCol_FrameBgHovered
 * COLOR_FRAME_BACKGROUND_ACTIVE = enums.ImGuiCol_FrameBgActive             # <<<<<<<<<<<<<<
 * COLOR_TITLE_BACKGROUND = enums.ImGuiCol_TitleBg
 * COLOR_TITLE_BACKGROUND_COLLAPSED = enums.ImGuiCol_TitleBgCollapsed
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_FrameBgActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_FRAME_BACKGROUND_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":137
 * COLOR_FRAME_BACKGROUND_HOVERED = enums.ImGuiCol_FrameBgHovered
 * COLOR_FRAME_BACKGROUND_ACTIVE = enums.ImGuiCol_FrameBgActive
 * COLOR_TITLE_BACKGROUND = enums.ImGuiCol_TitleBg             # <<<<<<<<<<<<<<
 * COLOR_TITLE_BACKGROUND_COLLAPSED = enums.ImGuiCol_TitleBgCollapsed
 * COLOR_TITLE_BACKGROUND_ACTIVE = enums.ImGuiCol_TitleBgActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TitleBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_TITLE_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":138
 * COLOR_FRAME_BACKGROUND_ACTIVE = enums.ImGuiCol_FrameBgActive
 * COLOR_TITLE_BACKGROUND = enums.ImGuiCol_TitleBg
 * COLOR_TITLE_BACKGROUND_COLLAPSED = enums.ImGuiCol_TitleBgCollapsed             # <<<<<<<<<<<<<<
 * COLOR_TITLE_BACKGROUND_ACTIVE = enums.ImGuiCol_TitleBgActive
 * COLOR_MENUBAR_BACKGROUND = enums.ImGuiCol_MenuBarBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TitleBgCollapsed); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_TITLE_BACKGROUND_COLLAPSED, __pyx_t_7) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":139
 * COLOR_TITLE_BACKGROUND = enums.ImGuiCol_TitleBg
 * COLOR_TITLE_BACKGROUND_COLLAPSED = enums.ImGuiCol_TitleBgCollapsed
 * COLOR_TITLE_BACKGROUND_ACTIVE = enums.ImGuiCol_TitleBgActive             # <<<<<<<<<<<<<<
 * COLOR_MENUBAR_BACKGROUND = enums.ImGuiCol_MenuBarBg
 * COLOR_SCROLLBAR_BACKGROUND = enums.ImGuiCol_ScrollbarBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TitleBgActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_TITLE_BACKGROUND_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":140
 * COLOR_TITLE_BACKGROUND_COLLAPSED = enums.ImGuiCol_TitleBgCollapsed
 * COLOR_TITLE_BACKGROUND_ACTIVE = enums.ImGuiCol_TitleBgActive
 * COLOR_MENUBAR_BACKGROUND = enums.ImGuiCol_MenuBarBg             # <<<<<<<<<<<<<<
 * COLOR_SCROLLBAR_BACKGROUND = enums.ImGuiCol_ScrollbarBg
 * COLOR_SCROLLBAR_GRAB = enums.ImGuiCol_ScrollbarGrab
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_MenuBarBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_MENUBAR_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":141
 * COLOR_TITLE_BACKGROUND_ACTIVE = enums.ImGuiCol_TitleBgActive
 * COLOR_MENUBAR_BACKGROUND = enums.ImGuiCol_MenuBarBg
 * COLOR_SCROLLBAR_BACKGROUND = enums.ImGuiCol_ScrollbarBg             # <<<<<<<<<<<<<<
 * COLOR_SCROLLBAR_GRAB = enums.ImGuiCol_ScrollbarGrab
 * COLOR_SCROLLBAR_GRAB_HOVERED = enums.ImGuiCol_ScrollbarGrabHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ScrollbarBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_SCROLLBAR_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":142
 * COLOR_MENUBAR_BACKGROUND = enums.ImGuiCol_MenuBarBg
 * COLOR_SCROLLBAR_BACKGROUND = enums.ImGuiCol_ScrollbarBg
 * COLOR_SCROLLBAR_GRAB = enums.ImGuiCol_ScrollbarGrab             # <<<<<<<<<<<<<<
 * COLOR_SCROLLBAR_GRAB_HOVERED = enums.ImGuiCol_ScrollbarGrabHovered
 * COLOR_SCROLLBAR_GRAB_ACTIVE = enums.ImGuiCol_ScrollbarGrabActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ScrollbarGrab); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_SCROLLBAR_GRAB, __pyx_t_7) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":143
 * COLOR_SCROLLBAR_BACKGROUND = enums.ImGuiCol_ScrollbarBg
 * COLOR_SCROLLBAR_GRAB = enums.ImGuiCol_ScrollbarGrab
 * COLOR_SCROLLBAR_GRAB_HOVERED = enums.ImGuiCol_ScrollbarGrabHovered             # <<<<<<<<<<<<<<
 * COLOR_SCROLLBAR_GRAB_ACTIVE = enums.ImGuiCol_ScrollbarGrabActive
 * COLOR_COMBO_BACKGROUND = enums.ImGuiCol_ComboBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ScrollbarGrabHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_SCROLLBAR_GRAB_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":144
 * COLOR_SCROLLBAR_GRAB = enums.ImGuiCol_ScrollbarGrab
 * COLOR_SCROLLBAR_GRAB_HOVERED = enums.ImGuiCol_ScrollbarGrabHovered
 * COLOR_SCROLLBAR_GRAB_ACTIVE = enums.ImGuiCol_ScrollbarGrabActive             # <<<<<<<<<<<<<<
 * COLOR_COMBO_BACKGROUND = enums.ImGuiCol_ComboBg
 * COLOR_CHECK_MARK = enums.ImGuiCol_CheckMark
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ScrollbarGrabActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_SCROLLBAR_GRAB_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":145
 * COLOR_SCROLLBAR_GRAB_HOVERED = enums.ImGuiCol_ScrollbarGrabHovered
 * COLOR_SCROLLBAR_GRAB_ACTIVE = enums.ImGuiCol_ScrollbarGrabActive
 * COLOR_COMBO_BACKGROUND = enums.ImGuiCol_ComboBg             # <<<<<<<<<<<<<<
 * COLOR_CHECK_MARK = enums.ImGuiCol_CheckMark
 * COLOR_SLIDER_GRAB = enums.ImGuiCol_SliderGrab
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ComboBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_COMBO_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":146
 * COLOR_SCROLLBAR_GRAB_ACTIVE = enums.ImGuiCol_ScrollbarGrabActive
 * COLOR_COMBO_BACKGROUND = enums.ImGuiCol_ComboBg
 * COLOR_CHECK_MARK = enums.ImGuiCol_CheckMark             # <<<<<<<<<<<<<<
 * COLOR_SLIDER_GRAB = enums.ImGuiCol_SliderGrab
 * COLOR_SLIDER_GRAB_ACTIVE = enums.ImGuiCol_SliderGrabActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_CheckMark); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_CHECK_MARK, __pyx_t_7) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":147
 * COLOR_COMBO_BACKGROUND = enums.ImGuiCol_ComboBg
 * COLOR_CHECK_MARK = enums.ImGuiCol_CheckMark
 * COLOR_SLIDER_GRAB = enums.ImGuiCol_SliderGrab             # <<<<<<<<<<<<<<
 * COLOR_SLIDER_GRAB_ACTIVE = enums.ImGuiCol_SliderGrabActive
 * COLOR_BUTTON = enums.ImGuiCol_Button
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_SliderGrab); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_SLIDER_GRAB, __pyx_t_7) < 0) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":148
 * COLOR_CHECK_MARK = enums.ImGuiCol_CheckMark
 * COLOR_SLIDER_GRAB = enums.ImGuiCol_SliderGrab
 * COLOR_SLIDER_GRAB_ACTIVE = enums.ImGuiCol_SliderGrabActive             # <<<<<<<<<<<<<<
 * COLOR_BUTTON = enums.ImGuiCol_Button
 * COLOR_BUTTON_HOVERED = enums.ImGuiCol_ButtonHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_SliderGrabActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_SLIDER_GRAB_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":149
 * COLOR_SLIDER_GRAB = enums.ImGuiCol_SliderGrab
 * COLOR_SLIDER_GRAB_ACTIVE = enums.ImGuiCol_SliderGrabActive
 * COLOR_BUTTON = enums.ImGuiCol_Button             # <<<<<<<<<<<<<<
 * COLOR_BUTTON_HOVERED = enums.ImGuiCol_ButtonHovered
 * COLOR_BUTTON_ACTIVE = enums.ImGuiCol_ButtonActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Button); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_BUTTON, __pyx_t_7) < 0) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":150
 * COLOR_SLIDER_GRAB_ACTIVE = enums.ImGuiCol_SliderGrabActive
 * COLOR_BUTTON = enums.ImGuiCol_Button
 * COLOR_BUTTON_HOVERED = enums.ImGuiCol_ButtonHovered             # <<<<<<<<<<<<<<
 * COLOR_BUTTON_ACTIVE = enums.ImGuiCol_ButtonActive
 * COLOR_HEADER = enums.ImGuiCol_Header
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ButtonHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_BUTTON_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":151
 * COLOR_BUTTON = enums.ImGuiCol_Button
 * COLOR_BUTTON_HOVERED = enums.ImGuiCol_ButtonHovered
 * COLOR_BUTTON_ACTIVE = enums.ImGuiCol_ButtonActive             # <<<<<<<<<<<<<<
 * COLOR_HEADER = enums.ImGuiCol_Header
 * COLOR_HEADER_HOVERED = enums.ImGuiCol_HeaderHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ButtonActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_BUTTON_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":152
 * COLOR_BUTTON_HOVERED = enums.ImGuiCol_ButtonHovered
 * COLOR_BUTTON_ACTIVE = enums.ImGuiCol_ButtonActive
 * COLOR_HEADER = enums.ImGuiCol_Header             # <<<<<<<<<<<<<<
 * COLOR_HEADER_HOVERED = enums.ImGuiCol_HeaderHovered
 * COLOR_HEADER_ACTIVE = enums.ImGuiCol_HeaderActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Header); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_HEADER, __pyx_t_7) < 0) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":153
 * COLOR_BUTTON_ACTIVE = enums.ImGuiCol_ButtonActive
 * COLOR_HEADER = enums.ImGuiCol_Header
 * COLOR_HEADER_HOVERED = enums.ImGuiCol_HeaderHovered             # <<<<<<<<<<<<<<
 * COLOR_HEADER_ACTIVE = enums.ImGuiCol_HeaderActive
 * COLOR_COLUMN = enums.ImGuiCol_Column
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_HeaderHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_HEADER_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":154
 * COLOR_HEADER = enums.ImGuiCol_Header
 * COLOR_HEADER_HOVERED = enums.ImGuiCol_HeaderHovered
 * COLOR_HEADER_ACTIVE = enums.ImGuiCol_HeaderActive             # <<<<<<<<<<<<<<
 * COLOR_COLUMN = enums.ImGuiCol_Column
 * COLOR_COLUMN_HOVERED = enums.ImGuiCol_ColumnHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_HeaderActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_HEADER_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":155
 * COLOR_HEADER_HOVERED = enums.ImGuiCol_HeaderHovered
 * COLOR_HEADER_ACTIVE = enums.ImGuiCol_HeaderActive
 * COLOR_COLUMN = enums.ImGuiCol_Column             # <<<<<<<<<<<<<<
 * COLOR_COLUMN_HOVERED = enums.ImGuiCol_ColumnHovered
 * COLOR_COLUMN_ACTIVE = enums.ImGuiCol_ColumnActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Column); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_COLUMN, __pyx_t_7) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":156
 * COLOR_HEADER_ACTIVE = enums.ImGuiCol_HeaderActive
 * COLOR_COLUMN = enums.ImGuiCol_Column
 * COLOR_COLUMN_HOVERED = enums.ImGuiCol_ColumnHovered             # <<<<<<<<<<<<<<
 * COLOR_COLUMN_ACTIVE = enums.ImGuiCol_ColumnActive
 * COLOR_RESIZE_GRIP = enums.ImGuiCol_ResizeGrip
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ColumnHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_COLUMN_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":157
 * COLOR_COLUMN = enums.ImGuiCol_Column
 * COLOR_COLUMN_HOVERED = enums.ImGuiCol_ColumnHovered
 * COLOR_COLUMN_ACTIVE = enums.ImGuiCol_ColumnActive             # <<<<<<<<<<<<<<
 * COLOR_RESIZE_GRIP = enums.ImGuiCol_ResizeGrip
 * COLOR_RESIZE_GRIP_HOVERED = enums.ImGuiCol_ResizeGripHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ColumnActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_COLUMN_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":158
 * COLOR_COLUMN_HOVERED = enums.ImGuiCol_ColumnHovered
 * COLOR_COLUMN_ACTIVE = enums.ImGuiCol_ColumnActive
 * COLOR_RESIZE_GRIP = enums.ImGuiCol_ResizeGrip             # <<<<<<<<<<<<<<
 * COLOR_RESIZE_GRIP_HOVERED = enums.ImGuiCol_ResizeGripHovered
 * COLOR_RESIZE_GRIP_ACTIVE = enums.ImGuiCol_ResizeGripActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ResizeGrip); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_RESIZE_GRIP, __pyx_t_7) < 0) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":159
 * COLOR_COLUMN_ACTIVE = enums.ImGuiCol_ColumnActive
 * COLOR_RESIZE_GRIP = enums.ImGuiCol_ResizeGrip
 * COLOR_RESIZE_GRIP_HOVERED = enums.ImGuiCol_ResizeGripHovered             # <<<<<<<<<<<<<<
 * COLOR_RESIZE_GRIP_ACTIVE = enums.ImGuiCol_ResizeGripActive
 * COLOR_CLOSE_BUTTON = enums.ImGuiCol_CloseButton
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ResizeGripHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_RESIZE_GRIP_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":160
 * COLOR_RESIZE_GRIP = enums.ImGuiCol_ResizeGrip
 * COLOR_RESIZE_GRIP_HOVERED = enums.ImGuiCol_ResizeGripHovered
 * COLOR_RESIZE_GRIP_ACTIVE = enums.ImGuiCol_ResizeGripActive             # <<<<<<<<<<<<<<
 * COLOR_CLOSE_BUTTON = enums.ImGuiCol_CloseButton
 * COLOR_CLOSE_BUTTON_HOVERED = enums.ImGuiCol_CloseButtonHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ResizeGripActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_RESIZE_GRIP_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":161
 * COLOR_RESIZE_GRIP_HOVERED = enums.ImGuiCol_ResizeGripHovered
 * COLOR_RESIZE_GRIP_ACTIVE = enums.ImGuiCol_ResizeGripActive
 * COLOR_CLOSE_BUTTON = enums.ImGuiCol_CloseButton             # <<<<<<<<<<<<<<
 * COLOR_CLOSE_BUTTON_HOVERED = enums.ImGuiCol_CloseButtonHovered
 * COLOR_CLOSE_BUTTON_ACTIVE = enums.ImGuiCol_CloseButtonActive
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_CloseButton); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_CLOSE_BUTTON, __pyx_t_7) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":162
 * COLOR_RESIZE_GRIP_ACTIVE = enums.ImGuiCol_ResizeGripActive
 * COLOR_CLOSE_BUTTON = enums.ImGuiCol_CloseButton
 * COLOR_CLOSE_BUTTON_HOVERED = enums.ImGuiCol_CloseButtonHovered             # <<<<<<<<<<<<<<
 * COLOR_CLOSE_BUTTON_ACTIVE = enums.ImGuiCol_CloseButtonActive
 * COLOR_PLOT_LINES = enums.ImGuiCol_PlotLines
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_CloseButtonHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_CLOSE_BUTTON_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":163
 * COLOR_CLOSE_BUTTON = enums.ImGuiCol_CloseButton
 * COLOR_CLOSE_BUTTON_HOVERED = enums.ImGuiCol_CloseButtonHovered
 * COLOR_CLOSE_BUTTON_ACTIVE = enums.ImGuiCol_CloseButtonActive             # <<<<<<<<<<<<<<
 * COLOR_PLOT_LINES = enums.ImGuiCol_PlotLines
 * COLOR_PLOT_LINES_HOVERED = enums.ImGuiCol_PlotLinesHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_CloseButtonActive); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_CLOSE_BUTTON_ACTIVE, __pyx_t_7) < 0) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":164
 * COLOR_CLOSE_BUTTON_HOVERED = enums.ImGuiCol_CloseButtonHovered
 * COLOR_CLOSE_BUTTON_ACTIVE = enums.ImGuiCol_CloseButtonActive
 * COLOR_PLOT_LINES = enums.ImGuiCol_PlotLines             # <<<<<<<<<<<<<<
 * COLOR_PLOT_LINES_HOVERED = enums.ImGuiCol_PlotLinesHovered
 * COLOR_PLOT_HISTOGRAM = enums.ImGuiCol_PlotHistogram
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_PlotLines); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_PLOT_LINES, __pyx_t_7) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":165
 * COLOR_CLOSE_BUTTON_ACTIVE = enums.ImGuiCol_CloseButtonActive
 * COLOR_PLOT_LINES = enums.ImGuiCol_PlotLines
 * COLOR_PLOT_LINES_HOVERED = enums.ImGuiCol_PlotLinesHovered             # <<<<<<<<<<<<<<
 * COLOR_PLOT_HISTOGRAM = enums.ImGuiCol_PlotHistogram
 * COLOR_PLOT_HISTOGRAM_HOVERED = enums.ImGuiCol_PlotHistogramHovered
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_PlotLinesHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_PLOT_LINES_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":166
 * COLOR_PLOT_LINES = enums.ImGuiCol_PlotLines
 * COLOR_PLOT_LINES_HOVERED = enums.ImGuiCol_PlotLinesHovered
 * COLOR_PLOT_HISTOGRAM = enums.ImGuiCol_PlotHistogram             # <<<<<<<<<<<<<<
 * COLOR_PLOT_HISTOGRAM_HOVERED = enums.ImGuiCol_PlotHistogramHovered
 * COLOR_TEXT_SELECTED_BACKGROUND = enums.ImGuiCol_TextSelectedBg
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_PlotHistogram); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_PLOT_HISTOGRAM, __pyx_t_7) < 0) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":167
 * COLOR_PLOT_LINES_HOVERED = enums.ImGuiCol_PlotLinesHovered
 * COLOR_PLOT_HISTOGRAM = enums.ImGuiCol_PlotHistogram
 * COLOR_PLOT_HISTOGRAM_HOVERED = enums.ImGuiCol_PlotHistogramHovered             # <<<<<<<<<<<<<<
 * COLOR_TEXT_SELECTED_BACKGROUND = enums.ImGuiCol_TextSelectedBg
 * COLOR_MODAL_WINDOW_DARKENING = enums.ImGuiCol_ModalWindowDarkening
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_PlotHistogramHovered); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_PLOT_HISTOGRAM_HOVERED, __pyx_t_7) < 0) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":168
 * COLOR_PLOT_HISTOGRAM = enums.ImGuiCol_PlotHistogram
 * COLOR_PLOT_HISTOGRAM_HOVERED = enums.ImGuiCol_PlotHistogramHovered
 * COLOR_TEXT_SELECTED_BACKGROUND = enums.ImGuiCol_TextSelectedBg             # <<<<<<<<<<<<<<
 * COLOR_MODAL_WINDOW_DARKENING = enums.ImGuiCol_ModalWindowDarkening
 * COLOR_COUNT = enums.ImGuiCol_COUNT
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TextSelectedBg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_TEXT_SELECTED_BACKGROUND, __pyx_t_7) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":169
 * COLOR_PLOT_HISTOGRAM_HOVERED = enums.ImGuiCol_PlotHistogramHovered
 * COLOR_TEXT_SELECTED_BACKGROUND = enums.ImGuiCol_TextSelectedBg
 * COLOR_MODAL_WINDOW_DARKENING = enums.ImGuiCol_ModalWindowDarkening             # <<<<<<<<<<<<<<
 * COLOR_COUNT = enums.ImGuiCol_COUNT
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ModalWindowDarkening); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_MODAL_WINDOW_DARKENING, __pyx_t_7) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":170
 * COLOR_TEXT_SELECTED_BACKGROUND = enums.ImGuiCol_TextSelectedBg
 * COLOR_MODAL_WINDOW_DARKENING = enums.ImGuiCol_ModalWindowDarkening
 * COLOR_COUNT = enums.ImGuiCol_COUNT             # <<<<<<<<<<<<<<
 * 
 * # ==== Text input flags ====
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_COUNT); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COLOR_COUNT, __pyx_t_7) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":173
 * 
 * # ==== Text input flags ====
 * INPUT_TEXT_CHARS_DECIMAL = enums.ImGuiInputTextFlags_CharsDecimal             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CHARS_HEXADECIMAL = enums.ImGuiInputTextFlags_CharsHexadecimal
 * INPUT_TEXT_CHARS_UPPERCASE = enums.ImGuiInputTextFlags_CharsUppercase
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CharsDecimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CHARS_DECIMAL, __pyx_t_7) < 0) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":174
 * # ==== Text input flags ====
 * INPUT_TEXT_CHARS_DECIMAL = enums.ImGuiInputTextFlags_CharsDecimal
 * INPUT_TEXT_CHARS_HEXADECIMAL = enums.ImGuiInputTextFlags_CharsHexadecimal             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CHARS_UPPERCASE = enums.ImGuiInputTextFlags_CharsUppercase
 * INPUT_TEXT_CHARS_NO_BLANK = enums.ImGuiInputTextFlags_CharsNoBlank
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CharsHexadecimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CHARS_HEXADECIMAL, __pyx_t_7) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":175
 * INPUT_TEXT_CHARS_DECIMAL = enums.ImGuiInputTextFlags_CharsDecimal
 * INPUT_TEXT_CHARS_HEXADECIMAL = enums.ImGuiInputTextFlags_CharsHexadecimal
 * INPUT_TEXT_CHARS_UPPERCASE = enums.ImGuiInputTextFlags_CharsUppercase             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CHARS_NO_BLANK = enums.ImGuiInputTextFlags_CharsNoBlank
 * INPUT_TEXT_AUTO_SELECT_ALL = enums.ImGuiInputTextFlags_AutoSelectAll
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CharsUppercase); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CHARS_UPPERCASE, __pyx_t_7) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":176
 * INPUT_TEXT_CHARS_HEXADECIMAL = enums.ImGuiInputTextFlags_CharsHexadecimal
 * INPUT_TEXT_CHARS_UPPERCASE = enums.ImGuiInputTextFlags_CharsUppercase
 * INPUT_TEXT_CHARS_NO_BLANK = enums.ImGuiInputTextFlags_CharsNoBlank             # <<<<<<<<<<<<<<
 * INPUT_TEXT_AUTO_SELECT_ALL = enums.ImGuiInputTextFlags_AutoSelectAll
 * INPUT_TEXT_ENTER_RETURNS_TRUE = enums.ImGuiInputTextFlags_EnterReturnsTrue
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CharsNoBlank); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CHARS_NO_BLANK, __pyx_t_7) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":177
 * INPUT_TEXT_CHARS_UPPERCASE = enums.ImGuiInputTextFlags_CharsUppercase
 * INPUT_TEXT_CHARS_NO_BLANK = enums.ImGuiInputTextFlags_CharsNoBlank
 * INPUT_TEXT_AUTO_SELECT_ALL = enums.ImGuiInputTextFlags_AutoSelectAll             # <<<<<<<<<<<<<<
 * INPUT_TEXT_ENTER_RETURNS_TRUE = enums.ImGuiInputTextFlags_EnterReturnsTrue
 * INPUT_TEXT_CALLBACK_COMPLETION = enums.ImGuiInputTextFlags_CallbackCompletion
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_AutoSelectAll); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_AUTO_SELECT_ALL, __pyx_t_7) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":178
 * INPUT_TEXT_CHARS_NO_BLANK = enums.ImGuiInputTextFlags_CharsNoBlank
 * INPUT_TEXT_AUTO_SELECT_ALL = enums.ImGuiInputTextFlags_AutoSelectAll
 * INPUT_TEXT_ENTER_RETURNS_TRUE = enums.ImGuiInputTextFlags_EnterReturnsTrue             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CALLBACK_COMPLETION = enums.ImGuiInputTextFlags_CallbackCompletion
 * INPUT_TEXT_CALLBACK_HISTORY = enums.ImGuiInputTextFlags_CallbackHistory
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_EnterReturnsTrue); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_ENTER_RETURNS_TRUE, __pyx_t_7) < 0) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":179
 * INPUT_TEXT_AUTO_SELECT_ALL = enums.ImGuiInputTextFlags_AutoSelectAll
 * INPUT_TEXT_ENTER_RETURNS_TRUE = enums.ImGuiInputTextFlags_EnterReturnsTrue
 * INPUT_TEXT_CALLBACK_COMPLETION = enums.ImGuiInputTextFlags_CallbackCompletion             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CALLBACK_HISTORY = enums.ImGuiInputTextFlags_CallbackHistory
 * INPUT_TEXT_CALLBACK_ALWAYS = enums.ImGuiInputTextFlags_CallbackAlways
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CallbackCompletion); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CALLBACK_COMPLETION, __pyx_t_7) < 0) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":180
 * INPUT_TEXT_ENTER_RETURNS_TRUE = enums.ImGuiInputTextFlags_EnterReturnsTrue
 * INPUT_TEXT_CALLBACK_COMPLETION = enums.ImGuiInputTextFlags_CallbackCompletion
 * INPUT_TEXT_CALLBACK_HISTORY = enums.ImGuiInputTextFlags_CallbackHistory             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CALLBACK_ALWAYS = enums.ImGuiInputTextFlags_CallbackAlways
 * INPUT_TEXT_CALLBACK_CHAR_FILTER = enums.ImGuiInputTextFlags_CallbackCharFilter
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CallbackHistory); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CALLBACK_HISTORY, __pyx_t_7) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":181
 * INPUT_TEXT_CALLBACK_COMPLETION = enums.ImGuiInputTextFlags_CallbackCompletion
 * INPUT_TEXT_CALLBACK_HISTORY = enums.ImGuiInputTextFlags_CallbackHistory
 * INPUT_TEXT_CALLBACK_ALWAYS = enums.ImGuiInputTextFlags_CallbackAlways             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CALLBACK_CHAR_FILTER = enums.ImGuiInputTextFlags_CallbackCharFilter
 * INPUT_TEXT_ALLOW_TAB_INPUT = enums.ImGuiInputTextFlags_AllowTabInput
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CallbackAlways); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CALLBACK_ALWAYS, __pyx_t_7) < 0) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":182
 * INPUT_TEXT_CALLBACK_HISTORY = enums.ImGuiInputTextFlags_CallbackHistory
 * INPUT_TEXT_CALLBACK_ALWAYS = enums.ImGuiInputTextFlags_CallbackAlways
 * INPUT_TEXT_CALLBACK_CHAR_FILTER = enums.ImGuiInputTextFlags_CallbackCharFilter             # <<<<<<<<<<<<<<
 * INPUT_TEXT_ALLOW_TAB_INPUT = enums.ImGuiInputTextFlags_AllowTabInput
 * INPUT_TEXT_CTRL_ENTER_FOR_NEW_LINE = enums.ImGuiInputTextFlags_CtrlEnterForNewLine
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CallbackCharFilter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CALLBACK_CHAR_FILTER, __pyx_t_7) < 0) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":183
 * INPUT_TEXT_CALLBACK_ALWAYS = enums.ImGuiInputTextFlags_CallbackAlways
 * INPUT_TEXT_CALLBACK_CHAR_FILTER = enums.ImGuiInputTextFlags_CallbackCharFilter
 * INPUT_TEXT_ALLOW_TAB_INPUT = enums.ImGuiInputTextFlags_AllowTabInput             # <<<<<<<<<<<<<<
 * INPUT_TEXT_CTRL_ENTER_FOR_NEW_LINE = enums.ImGuiInputTextFlags_CtrlEnterForNewLine
 * INPUT_TEXT_NO_HORIZONTAL_SCROLL = enums.ImGuiInputTextFlags_NoHorizontalScroll
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_AllowTabInput); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_ALLOW_TAB_INPUT, __pyx_t_7) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":184
 * INPUT_TEXT_CALLBACK_CHAR_FILTER = enums.ImGuiInputTextFlags_CallbackCharFilter
 * INPUT_TEXT_ALLOW_TAB_INPUT = enums.ImGuiInputTextFlags_AllowTabInput
 * INPUT_TEXT_CTRL_ENTER_FOR_NEW_LINE = enums.ImGuiInputTextFlags_CtrlEnterForNewLine             # <<<<<<<<<<<<<<
 * INPUT_TEXT_NO_HORIZONTAL_SCROLL = enums.ImGuiInputTextFlags_NoHorizontalScroll
 * INPUT_TEXT_ALWAYS_INSERT_MODE = enums.ImGuiInputTextFlags_AlwaysInsertMode
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CtrlEnterForNewLine); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_CTRL_ENTER_FOR_NEW_LI, __pyx_t_7) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":185
 * INPUT_TEXT_ALLOW_TAB_INPUT = enums.ImGuiInputTextFlags_AllowTabInput
 * INPUT_TEXT_CTRL_ENTER_FOR_NEW_LINE = enums.ImGuiInputTextFlags_CtrlEnterForNewLine
 * INPUT_TEXT_NO_HORIZONTAL_SCROLL = enums.ImGuiInputTextFlags_NoHorizontalScroll             # <<<<<<<<<<<<<<
 * INPUT_TEXT_ALWAYS_INSERT_MODE = enums.ImGuiInputTextFlags_AlwaysInsertMode
 * INPUT_TEXT_READ_ONLY = enums.ImGuiInputTextFlags_ReadOnly
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_NoHorizontalScroll); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_NO_HORIZONTAL_SCROLL, __pyx_t_7) < 0) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":186
 * INPUT_TEXT_CTRL_ENTER_FOR_NEW_LINE = enums.ImGuiInputTextFlags_CtrlEnterForNewLine
 * INPUT_TEXT_NO_HORIZONTAL_SCROLL = enums.ImGuiInputTextFlags_NoHorizontalScroll
 * INPUT_TEXT_ALWAYS_INSERT_MODE = enums.ImGuiInputTextFlags_AlwaysInsertMode             # <<<<<<<<<<<<<<
 * INPUT_TEXT_READ_ONLY = enums.ImGuiInputTextFlags_ReadOnly
 * INPUT_TEXT_PASSWORD = enums.ImGuiInputTextFlags_Password
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_AlwaysInsertMode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_ALWAYS_INSERT_MODE, __pyx_t_7) < 0) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":187
 * INPUT_TEXT_NO_HORIZONTAL_SCROLL = enums.ImGuiInputTextFlags_NoHorizontalScroll
 * INPUT_TEXT_ALWAYS_INSERT_MODE = enums.ImGuiInputTextFlags_AlwaysInsertMode
 * INPUT_TEXT_READ_ONLY = enums.ImGuiInputTextFlags_ReadOnly             # <<<<<<<<<<<<<<
 * INPUT_TEXT_PASSWORD = enums.ImGuiInputTextFlags_Password
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_ReadOnly); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_READ_ONLY, __pyx_t_7) < 0) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":188
 * INPUT_TEXT_ALWAYS_INSERT_MODE = enums.ImGuiInputTextFlags_AlwaysInsertMode
 * INPUT_TEXT_READ_ONLY = enums.ImGuiInputTextFlags_ReadOnly
 * INPUT_TEXT_PASSWORD = enums.ImGuiInputTextFlags_Password             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_Password); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INPUT_TEXT_PASSWORD, __pyx_t_7) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":191
 * 
 * 
 * Vec2 = namedtuple("Vec2", ['x', 'y'])             # <<<<<<<<<<<<<<
 * Vec4 = namedtuple("Vec4", ['x', 'y', 'z', 'w'])
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_namedtuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_x);
  __Pyx_GIVEREF(__pyx_n_s_x);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_x);
  __Pyx_INCREF(__pyx_n_s_y);
  __Pyx_GIVEREF(__pyx_n_s_y);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_y);
  __pyx_t_9 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_s_Vec2, __pyx_t_2};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_n_s_Vec2, __pyx_t_2};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(__pyx_n_s_Vec2);
    __Pyx_GIVEREF(__pyx_n_s_Vec2);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_6, __pyx_n_s_Vec2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_6, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Vec2, __pyx_t_7) < 0) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":192
 * 
 * Vec2 = namedtuple("Vec2", ['x', 'y'])
 * Vec4 = namedtuple("Vec4", ['x', 'y', 'z', 'w'])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_namedtuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = PyList_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_n_s_x);
  __Pyx_GIVEREF(__pyx_n_s_x);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_x);
  __Pyx_INCREF(__pyx_n_s_y);
  __Pyx_GIVEREF(__pyx_n_s_y);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_n_s_y);
  __Pyx_INCREF(__pyx_n_s_z);
  __Pyx_GIVEREF(__pyx_n_s_z);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_n_s_z);
  __Pyx_INCREF(__pyx_n_s_w);
  __Pyx_GIVEREF(__pyx_n_s_w);
  PyList_SET_ITEM(__pyx_t_8, 3, __pyx_n_s_w);
  __pyx_t_2 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_n_s_Vec4, __pyx_t_8};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_n_s_Vec4, __pyx_t_8};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_n_s_Vec4);
    __Pyx_GIVEREF(__pyx_n_s_Vec4);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_6, __pyx_n_s_Vec4);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_6, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Vec4, __pyx_t_7) < 0) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":971
 * 
 * 
 * _io = None             # <<<<<<<<<<<<<<
 * def get_io():
 *     global _io
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_io, Py_None) < 0) __PYX_ERR(0, 971, __pyx_L1_error)

  /* "imgui/core.pyx":972
 * 
 * _io = None
 * def get_io():             # <<<<<<<<<<<<<<
 *     global _io
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_1get_io, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_io, __pyx_t_7) < 0) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":980
 *     return _io
 * 
 * def get_style():             # <<<<<<<<<<<<<<
 *     raise NotImplementedError
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_3get_style, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_style, __pyx_t_7) < 0) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":984
 * 
 * 
 * def new_frame():             # <<<<<<<<<<<<<<
 *     """Start a new frame.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_5new_frame, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_new_frame, __pyx_t_7) < 0) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":996
 * 
 * 
 * def render():             # <<<<<<<<<<<<<<
 *     """Finalize frame, set rendering data, and run render callback (if set).
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_7render, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_render, __pyx_t_7) < 0) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1005
 * 
 * 
 * def shutdown():             # <<<<<<<<<<<<<<
 *     """Shutdown ImGui context.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_9shutdown, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shutdown, __pyx_t_7) < 0) __PYX_ERR(0, 1005, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1014
 * 
 * 
 * def show_user_guide():             # <<<<<<<<<<<<<<
 *     """Show ImGui user guide editor.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_11show_user_guide, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_show_user_guide, __pyx_t_7) < 0) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1033
 * 
 * 
 * def show_style_editor(GuiStyle style=None):             # <<<<<<<<<<<<<<
 *     """Show ImGui style editor.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_13show_style_editor, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_show_style_editor, __pyx_t_7) < 0) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1057
 * 
 * 
 * def show_test_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui test window.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_15show_test_window, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_show_test_window, __pyx_t_7) < 0) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1086
 * 
 * 
 * def show_metrics_window(closable=False):             # <<<<<<<<<<<<<<
 *     """Show ImGui metrics window.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_17show_metrics_window, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_show_metrics_window, __pyx_t_7) < 0) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1115
 * 
 * 
 * def begin(str name, closable=False, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin a window.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_19begin, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin, __pyx_t_7) < 0) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1147
 * 
 * 
 * def get_draw_data():             # <<<<<<<<<<<<<<
 *     """Get draw data.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_21get_draw_data, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_draw_data, __pyx_t_7) < 0) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1163
 * 
 * 
 * def end():             # <<<<<<<<<<<<<<
 *     """End a window.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_23end, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end, __pyx_t_7) < 0) __PYX_ERR(0, 1163, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "imgui/core.pyx":1181
 * 
 * def begin_child(
 *     child_id name, float width=0, float height=0, bool border=False,             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiWindowFlags flags=0
 * ):
 */
  __pyx_t_7 = __Pyx_PyInt_From_long(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyInt_From_long(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "imgui/core.pyx":1182
 * def begin_child(
 *     child_id name, float width=0, float height=0, bool border=False,
 *     cimgui.ImGuiWindowFlags flags=0             # <<<<<<<<<<<<<<
 * ):
 *     """Begin a scrolling region.
 */
  __pyx_t_8 = __Pyx_PyInt_From_long(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "imgui/core.pyx":1180
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id name, float width=0, float height=0, bool border=False,
 *     cimgui.ImGuiWindowFlags flags=0
 */
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_8);
  __pyx_t_7 = 0;
  __pyx_t_1 = 0;
  __pyx_t_9 = 0;
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":1181
 * 
 * def begin_child(
 *     child_id name, float width=0, float height=0, bool border=False,             # <<<<<<<<<<<<<<
 *     cimgui.ImGuiWindowFlags flags=0
 * ):
 */
  __pyx_t_8 = __Pyx_PyInt_From_long(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_k__22 = __pyx_t_8;
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyInt_From_long(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_k__23 = __pyx_t_8;
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_k__24 = __pyx_t_8;
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;

  /* "imgui/core.pyx":1180
 * 
 * 
 * def begin_child(             # <<<<<<<<<<<<<<
 *     child_id name, float width=0, float height=0, bool border=False,
 *     cimgui.ImGuiWindowFlags flags=0
 */
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __pyx_FusedFunction_NewEx(&__pyx_fuse_0__pyx_mdef_5imgui_4core_328begin_child, 0, __pyx_n_s_begin_child, NULL, __pyx_n_s_imgui_core, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_9, sizeof(__pyx_defaults2), 0)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_t_9)->__pyx_arg_width = 0;
  __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_t_9)->__pyx_arg_height = 0;
  __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_t_9)->__pyx_arg_border = 0;
  __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_t_9)->__pyx_arg_flags = 0;
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_9, __pyx_t_2);
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_9, __pyx_pf_5imgui_4core_337__defaults__);
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_str, __pyx_t_9) < 0) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __pyx_FusedFunction_NewEx(&__pyx_fuse_1__pyx_mdef_5imgui_4core_330begin_child, 0, __pyx_n_s_begin_child, NULL, __pyx_n_s_imgui_core, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_9, sizeof(__pyx_defaults3), 0)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_t_9)->__pyx_arg_width = 0;
  __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_t_9)->__pyx_arg_height = 0;
  __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_t_9)->__pyx_arg_border = 0;
  __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_t_9)->__pyx_arg_flags = 0;
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_9, __pyx_t_2);
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_9, __pyx_pf_5imgui_4core_339__defaults__);
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_ImGuiID, __pyx_t_9) < 0) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __pyx_FusedFunction_NewEx(&__pyx_mdef_5imgui_4core_25begin_child, 0, __pyx_n_s_begin_child, NULL, __pyx_n_s_imgui_core, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_9, __pyx_t_2);
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_9, __pyx_pf_5imgui_4core_337__defaults__);
  ((__pyx_FusedFunctionObject *) __pyx_t_9)->__signatures__ = __pyx_t_8;
  __Pyx_GIVEREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_child, __pyx_t_9) < 0) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imgui/core.pyx":1237
 *     )
 * 
 * def end_child():             # <<<<<<<<<<<<<<
 *     """End scrolling region.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_27end_child, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_child, __pyx_t_1) < 0) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1246
 * 
 * 
 * def get_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get current content boundaries in window coordinates.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_29get_content_region_max, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_content_region_max, __pyx_t_1) < 0) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1261
 * 
 * 
 * def get_content_region_available():             # <<<<<<<<<<<<<<
 *     """Get available content region.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_31get_content_region_available, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_content_region_available, __pyx_t_1) < 0) __PYX_ERR(0, 1261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1278
 * 
 * 
 * def get_content_region_available_width():             # <<<<<<<<<<<<<<
 *     """Get available content region width.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_33get_content_region_available_width, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_content_region_available_wid, __pyx_t_1) < 0) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1290
 * 
 * 
 * def get_window_content_region_min():             # <<<<<<<<<<<<<<
 *     """Get minimal current window content boundaries in window coordinates.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_35get_window_content_region_min, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_content_region_min, __pyx_t_1) < 0) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1304
 * 
 * 
 * def get_window_content_region_max():             # <<<<<<<<<<<<<<
 *     """Get maximal current window content boundaries in window coordinates.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_37get_window_content_region_max, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_content_region_max, __pyx_t_1) < 0) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1318
 * 
 * 
 * def get_window_content_region_width():             # <<<<<<<<<<<<<<
 *     """Get available current window content region width.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_39get_window_content_region_width, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_content_region_width, __pyx_t_1) < 0) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1330
 * 
 * 
 * def set_window_font_scale(float scale):             # <<<<<<<<<<<<<<
 *     """Adjust per-window font scale for current window.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_41set_window_font_scale, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_window_font_scale, __pyx_t_1) < 0) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1358
 * def set_next_window_collapsed(
 *     cimgui.bool collapsed, cimgui.ImGuiSetCond condition=ALWAYS
 * ):             # <<<<<<<<<<<<<<
 *     """Set next window collapsed state.
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ALWAYS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyInt_As_ImGuiSetCond(__pyx_t_1); if (unlikely((__pyx_t_11 == ((ImGuiSetCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__32 = __pyx_t_11;

  /* "imgui/core.pyx":1356
 * 
 * 
 * def set_next_window_collapsed(             # <<<<<<<<<<<<<<
 *     cimgui.bool collapsed, cimgui.ImGuiSetCond condition=ALWAYS
 * ):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_43set_next_window_collapsed, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_next_window_collapsed, __pyx_t_1) < 0) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1386
 * 
 * 
 * def set_next_window_focus():             # <<<<<<<<<<<<<<
 *     """Set next window to be focused (most front).
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_45set_next_window_focus, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_next_window_focus, __pyx_t_1) < 0) __PYX_ERR(0, 1386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1395
 * 
 * 
 * def get_window_position():             # <<<<<<<<<<<<<<
 *     """Get current window position.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_47get_window_position, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_position, __pyx_t_1) < 0) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1410
 * 
 * 
 * def get_window_size():             # <<<<<<<<<<<<<<
 *     """Get current window size.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_49get_window_size, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_size, __pyx_t_1) < 0) __PYX_ERR(0, 1410, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1422
 * 
 * 
 * def get_window_width():             # <<<<<<<<<<<<<<
 *     """Get current window width.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_51get_window_width, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_width, __pyx_t_1) < 0) __PYX_ERR(0, 1422, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1434
 * 
 * 
 * def get_window_height():             # <<<<<<<<<<<<<<
 *     """Get current window height.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_53get_window_height, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_window_height, __pyx_t_1) < 0) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1448
 * def set_next_window_position(
 *     float x, float y, cimgui.ImGuiSetCond condition=ALWAYS
 * ):             # <<<<<<<<<<<<<<
 *     """Set next window position.
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ALWAYS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyInt_As_ImGuiSetCond(__pyx_t_1); if (unlikely((__pyx_t_11 == ((ImGuiSetCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__33 = __pyx_t_11;

  /* "imgui/core.pyx":1446
 * 
 * 
 * def set_next_window_position(             # <<<<<<<<<<<<<<
 *     float x, float y, cimgui.ImGuiSetCond condition=ALWAYS
 * ):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_55set_next_window_position, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_next_window_position, __pyx_t_1) < 0) __PYX_ERR(0, 1446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1477
 * 
 * 
 * def set_next_window_centered(cimgui.ImGuiSetCond condition=ALWAYS):             # <<<<<<<<<<<<<<
 *     """Set next window position to be centered on screen.
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ALWAYS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyInt_As_ImGuiSetCond(__pyx_t_1); if (unlikely((__pyx_t_11 == ((ImGuiSetCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__34 = __pyx_t_11;
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_57set_next_window_centered, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_next_window_centered, __pyx_t_1) < 0) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1505
 * def set_next_window_size(
 *     float width, float height, cimgui.ImGuiSetCond condition=ALWAYS
 * ):             # <<<<<<<<<<<<<<
 *     """Set next window size.
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ALWAYS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyInt_As_ImGuiSetCond(__pyx_t_1); if (unlikely((__pyx_t_11 == ((ImGuiSetCond)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__35 = __pyx_t_11;

  /* "imgui/core.pyx":1503
 * 
 * 
 * def set_next_window_size(             # <<<<<<<<<<<<<<
 *     float width, float height, cimgui.ImGuiSetCond condition=ALWAYS
 * ):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_59set_next_window_size, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_next_window_size, __pyx_t_1) < 0) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1534
 * 
 * 
 * def is_window_collapsed():             # <<<<<<<<<<<<<<
 *     """Check if current window is collapsed.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_61is_window_collapsed, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_window_collapsed, __pyx_t_1) < 0) __PYX_ERR(0, 1534, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1543
 * 
 * 
 * def tree_node(str text, cimgui.ImGuiTreeNodeFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Draw a tree node.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_63tree_node, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tree_node, __pyx_t_1) < 0) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1575
 * 
 * 
 * def tree_pop():             # <<<<<<<<<<<<<<
 *     """Called to clear the tree nodes stack and return back the identation.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_65tree_pop, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tree_pop, __pyx_t_1) < 0) __PYX_ERR(0, 1575, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1587
 * 
 * 
 * def collapsing_header(             # <<<<<<<<<<<<<<
 *     str text,
 *     visible=None,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_67collapsing_header, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_collapsing_header, __pyx_t_1) < 0) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1643
 * 
 * 
 * def selectable(             # <<<<<<<<<<<<<<
 *     str label,
 *     selected=False,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_69selectable, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_selectable, __pyx_t_1) < 0) __PYX_ERR(0, 1643, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1707
 * 
 * 
 * def listbox(             # <<<<<<<<<<<<<<
 *     str label,
 *     int current,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_71listbox, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_listbox, __pyx_t_1) < 0) __PYX_ERR(0, 1707, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1772
 * 
 * 
 * def listbox_header(             # <<<<<<<<<<<<<<
 *     str label,
 *     width=0,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_73listbox_header, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_listbox_header, __pyx_t_1) < 0) __PYX_ERR(0, 1772, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1817
 * 
 * 
 * def listbox_footer():             # <<<<<<<<<<<<<<
 *     """Closing the listbox, previously opened by :func:`listbox_header()`.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_75listbox_footer, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_listbox_footer, __pyx_t_1) < 0) __PYX_ERR(0, 1817, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1828
 * 
 * 
 * def set_tooltip(str text):             # <<<<<<<<<<<<<<
 *     """Set tooltip under mouse-cursor.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_77set_tooltip, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_tooltip, __pyx_t_1) < 0) __PYX_ERR(0, 1828, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1853
 * 
 * 
 * def begin_tooltip():             # <<<<<<<<<<<<<<
 *     """Use to create full-featured tooltip windows that aren't just text.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_79begin_tooltip, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_tooltip, __pyx_t_1) < 0) __PYX_ERR(0, 1853, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1879
 * 
 * 
 * def end_tooltip():             # <<<<<<<<<<<<<<
 *     """End tooltip window.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_81end_tooltip, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_tooltip, __pyx_t_1) < 0) __PYX_ERR(0, 1879, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1890
 * 
 * 
 * def begin_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Create new full-screen menu bar.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_83begin_main_menu_bar, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_main_menu_bar, __pyx_t_1) < 0) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1925
 * 
 * 
 * def end_main_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close main menu bar context.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_85end_main_menu_bar, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_main_menu_bar, __pyx_t_1) < 0) __PYX_ERR(0, 1925, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1939
 * 
 * 
 * def begin_menu_bar():             # <<<<<<<<<<<<<<
 *     """Append new menu menu bar to current window.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_87begin_menu_bar, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_menu_bar, __pyx_t_1) < 0) __PYX_ERR(0, 1939, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1976
 * 
 * 
 * def end_menu_bar():             # <<<<<<<<<<<<<<
 *     """Close menu bar context.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_89end_menu_bar, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_menu_bar, __pyx_t_1) < 0) __PYX_ERR(0, 1976, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":1990
 * 
 * 
 * def begin_menu(str label, enabled=True):             # <<<<<<<<<<<<<<
 *     """Create new expandable menu in current menu bar.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_91begin_menu, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_menu, __pyx_t_1) < 0) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2014
 * 
 * 
 * def end_menu():             # <<<<<<<<<<<<<<
 *     """Close menu context.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_93end_menu, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_menu, __pyx_t_1) < 0) __PYX_ERR(0, 2014, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2029
 * 
 * def menu_item(
 *     str name, str shortcut=None, cimgui.bool selected=None, enabled=True             # <<<<<<<<<<<<<<
 * ):
 *     """Create a menu item.
 */
  __pyx_t_12 = __Pyx_PyObject_IsTrue(Py_None); if (unlikely((__pyx_t_12 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2029, __pyx_L1_error)
  __pyx_k__36 = __pyx_t_12;

  /* "imgui/core.pyx":2028
 * 
 * 
 * def menu_item(             # <<<<<<<<<<<<<<
 *     str name, str shortcut=None, cimgui.bool selected=None, enabled=True
 * ):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_95menu_item, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_menu_item, __pyx_t_1) < 0) __PYX_ERR(0, 2028, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2081
 * 
 * 
 * def open_popup(str name):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_97open_popup, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_open_popup, __pyx_t_1) < 0) __PYX_ERR(0, 2081, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2118
 * 
 * 
 * def begin_popup(str name):             # <<<<<<<<<<<<<<
 *     """Open a popup window.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_99begin_popup, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_popup, __pyx_t_1) < 0) __PYX_ERR(0, 2118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2162
 * 
 * 
 * def begin_popup_modal(str title, visible=None, cimgui.ImGuiWindowFlags flags=0):             # <<<<<<<<<<<<<<
 *     """Begin pouring popup contents.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_101begin_popup_modal, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_popup_modal, __pyx_t_1) < 0) __PYX_ERR(0, 2162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2218
 * 
 * 
 * def begin_popup_context_item(str name, int mouse_button=1):             # <<<<<<<<<<<<<<
 *     """This is a helper function to handle the most simple case of associating
 *     one named popup to one given widget.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_103begin_popup_context_item, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_popup_context_item, __pyx_t_1) < 0) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2254
 * 
 * 
 * def begin_popup_context_window(             # <<<<<<<<<<<<<<
 *     bool also_over_items=True,
 *     str name=None,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_105begin_popup_context_window, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_popup_context_window, __pyx_t_1) < 0) __PYX_ERR(0, 2254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2308
 * 
 * 
 * def end_popup():             # <<<<<<<<<<<<<<
 *     """End a popup window.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_107end_popup, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_popup, __pyx_t_1) < 0) __PYX_ERR(0, 2308, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2322
 * 
 * 
 * def close_current_popup():             # <<<<<<<<<<<<<<
 *     """Close the current popup window begin-ed directly above this call.
 *     Clicking on a :func:`menu_item()` or :func:`selectable()` automatically
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_109close_current_popup, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_close_current_popup, __pyx_t_1) < 0) __PYX_ERR(0, 2322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2336
 * 
 * 
 * def text(str text):             # <<<<<<<<<<<<<<
 *     """Add text to current widget stack.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_111text, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_text, __pyx_t_1) < 0) __PYX_ERR(0, 2336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2358
 * 
 * 
 * def text_colored(str text, float r, float g, float b, float a=1.):             # <<<<<<<<<<<<<<
 *     """Add colored text to current widget stack.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_113text_colored, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_text_colored, __pyx_t_1) < 0) __PYX_ERR(0, 2358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2393
 * 
 * 
 * def label_text(str label, str text):             # <<<<<<<<<<<<<<
 *     """Display text+label aligned the same way as value+label widgets.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_115label_text, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_label_text, __pyx_t_1) < 0) __PYX_ERR(0, 2393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2416
 * 
 * 
 * def text_unformatted(str text):             # <<<<<<<<<<<<<<
 *     """Big area text display - the size is defined by it's container.
 *     Recommended for long chunks of text.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_117text_unformatted, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_text_unformatted, __pyx_t_1) < 0) __PYX_ERR(0, 2416, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2439
 * 
 * 
 * def bullet():             # <<<<<<<<<<<<<<
 *     """Display a small circle and keep the cursor on the same line.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_119bullet, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bullet, __pyx_t_1) < 0) __PYX_ERR(0, 2439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2462
 * 
 * 
 * def bullet_text(str text):             # <<<<<<<<<<<<<<
 *     """Display bullet and text.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_121bullet_text, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bullet_text, __pyx_t_1) < 0) __PYX_ERR(0, 2462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2492
 * 
 * 
 * def button(str label, width=0, height=0):             # <<<<<<<<<<<<<<
 *     """Display button.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_123button, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_button, __pyx_t_1) < 0) __PYX_ERR(0, 2492, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2518
 * 
 * 
 * def small_button(str label):             # <<<<<<<<<<<<<<
 *     """Display small button (with 0 frame padding).
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_125small_button, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_small_button, __pyx_t_1) < 0) __PYX_ERR(0, 2518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2542
 * 
 * 
 * def invisible_button(str identifier, width, height):             # <<<<<<<<<<<<<<
 *     """Create invisible button.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_127invisible_button, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_invisible_button, __pyx_t_1) < 0) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2573
 * 
 * 
 * def color_button(             # <<<<<<<<<<<<<<
 *         float r, float g, float b, a=1.,
 *         cimgui.bool small_height=False,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_129color_button, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_color_button, __pyx_t_1) < 0) __PYX_ERR(0, 2573, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2614
 * 
 * 
 * def image_button(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_131image_button, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_image_button, __pyx_t_1) < 0) __PYX_ERR(0, 2614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2667
 * 
 * 
 * def image(             # <<<<<<<<<<<<<<
 *     texture_id,
 *     float width,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_133image, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_image, __pyx_t_1) < 0) __PYX_ERR(0, 2667, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2720
 * 
 * 
 * def checkbox(str label, cimgui.bool state):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_135checkbox, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_checkbox, __pyx_t_1) < 0) __PYX_ERR(0, 2720, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2754
 * 
 * 
 * def checkbox_flags(str label, unsigned int flags, unsigned int flags_value):             # <<<<<<<<<<<<<<
 *     """Display checkbox widget that handle integer flags (bit fields).
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_137checkbox_flags, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_checkbox_flags, __pyx_t_1) < 0) __PYX_ERR(0, 2754, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2811
 * 
 * 
 * def radio_button(str label, cimgui.bool active):             # <<<<<<<<<<<<<<
 *     """Display radio button widget
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_139radio_button, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_radio_button, __pyx_t_1) < 0) __PYX_ERR(0, 2811, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2840
 * 
 * 
 * def combo(str label, int current, list items, int height_in_items=-1):             # <<<<<<<<<<<<<<
 *     """Display combo widget.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_141combo, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_combo, __pyx_t_1) < 0) __PYX_ERR(0, 2840, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2885
 * 
 * 
 * def color_edit3(str label, float r, float g, float b):             # <<<<<<<<<<<<<<
 *     """Display color edit widget for color without alpha value.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_143color_edit3, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_color_edit3, __pyx_t_1) < 0) __PYX_ERR(0, 2885, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2924
 * 
 * 
 * def color_edit4(             # <<<<<<<<<<<<<<
 *     str label, float r, float g, float b, float a, cimgui.bool show_alpha=True
 * ):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_145color_edit4, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_color_edit4, __pyx_t_1) < 0) __PYX_ERR(0, 2924, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":2966
 * 
 * 
 * def drag_float(             # <<<<<<<<<<<<<<
 *     str label, float value,
 *     float change_speed = 1.0,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_147drag_float, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_float, __pyx_t_1) < 0) __PYX_ERR(0, 2966, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3032
 * 
 * 
 * def drag_float2(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1,
 *     float change_speed = 1.0,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_149drag_float2, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_float2, __pyx_t_1) < 0) __PYX_ERR(0, 3032, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3091
 * 
 * 
 * def drag_float3(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2,
 *     float change_speed = 1.0,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_151drag_float3, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_float3, __pyx_t_1) < 0) __PYX_ERR(0, 3091, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3150
 * 
 * 
 * def drag_float4(             # <<<<<<<<<<<<<<
 *     str label, float value0, float value1, float value2, float value3,
 *     float change_speed = 1.0,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_153drag_float4, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_float4, __pyx_t_1) < 0) __PYX_ERR(0, 3150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3209
 * 
 * 
 * def drag_int(             # <<<<<<<<<<<<<<
 *     str label, int value,
 *     float change_speed = 1.0,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_155drag_int, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_int, __pyx_t_1) < 0) __PYX_ERR(0, 3209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3267
 * 
 * 
 * def drag_int2(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1,
 *     float change_speed = 1.0,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_157drag_int2, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_int2, __pyx_t_1) < 0) __PYX_ERR(0, 3267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3320
 * 
 * 
 * def drag_int3(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2,
 *     float change_speed = 1.0,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_159drag_int3, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_int3, __pyx_t_1) < 0) __PYX_ERR(0, 3320, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3373
 * 
 * 
 * def drag_int4(             # <<<<<<<<<<<<<<
 *     str label, int value0, int value1, int value2, int value3,
 *     float change_speed = 1.0,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_161drag_int4, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_drag_int4, __pyx_t_1) < 0) __PYX_ERR(0, 3373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3426
 * 
 * 
 * def input_text(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_163input_text, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_text, __pyx_t_1) < 0) __PYX_ERR(0, 3426, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3488
 * 
 * 
 * def input_text_multiline(             # <<<<<<<<<<<<<<
 *     str label,
 *     str value,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_165input_text_multiline, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_text_multiline, __pyx_t_1) < 0) __PYX_ERR(0, 3488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3556
 * 
 * 
 * def input_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_167input_float, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_float, __pyx_t_1) < 0) __PYX_ERR(0, 3556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3608
 * 
 * 
 * def input_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_169input_float2, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_float2, __pyx_t_1) < 0) __PYX_ERR(0, 3608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3653
 * 
 * 
 * def input_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_171input_float3, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_float3, __pyx_t_1) < 0) __PYX_ERR(0, 3653, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3698
 * 
 * 
 * def input_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_173input_float4, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_float4, __pyx_t_1) < 0) __PYX_ERR(0, 3698, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3743
 * 
 * 
 * def input_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_175input_int, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_int, __pyx_t_1) < 0) __PYX_ERR(0, 3743, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3791
 * 
 * 
 * def input_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_177input_int2, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_int2, __pyx_t_1) < 0) __PYX_ERR(0, 3791, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3833
 * 
 * 
 * def input_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_179input_int3, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_int3, __pyx_t_1) < 0) __PYX_ERR(0, 3833, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3875
 * 
 * 
 * def input_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_181input_int4, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_input_int4, __pyx_t_1) < 0) __PYX_ERR(0, 3875, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3917
 * 
 * 
 * def slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_183slider_float, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_float, __pyx_t_1) < 0) __PYX_ERR(0, 3917, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":3961
 * 
 * 
 * def slider_float2(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_185slider_float2, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_float2, __pyx_t_1) < 0) __PYX_ERR(0, 3961, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4005
 * 
 * 
 * def slider_float3(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_187slider_float3, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_float3, __pyx_t_1) < 0) __PYX_ERR(0, 4005, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4049
 * 
 * 
 * def slider_float4(             # <<<<<<<<<<<<<<
 *     str label,
 *     float value0, float value1, float value2, float value3,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_189slider_float4, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_float4, __pyx_t_1) < 0) __PYX_ERR(0, 4049, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4108
 * 
 * 
 * def slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_191slider_int, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_int, __pyx_t_1) < 0) __PYX_ERR(0, 4108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4148
 * 
 * 
 * def slider_int2(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_193slider_int2, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_int2, __pyx_t_1) < 0) __PYX_ERR(0, 4148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4188
 * 
 * 
 * def slider_int3(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_195slider_int3, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_int3, __pyx_t_1) < 0) __PYX_ERR(0, 4188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4228
 * 
 * 
 * def slider_int4(             # <<<<<<<<<<<<<<
 *     str label,
 *     int value0, int value1, int value2, int value3,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_197slider_int4, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_slider_int4, __pyx_t_1) < 0) __PYX_ERR(0, 4228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4281
 * 
 * 
 * def v_slider_float(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_199v_slider_float, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_v_slider_float, __pyx_t_1) < 0) __PYX_ERR(0, 4281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4329
 * 
 * 
 * def v_slider_int(             # <<<<<<<<<<<<<<
 *     str label,
 *     float width,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_201v_slider_int, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_v_slider_int, __pyx_t_1) < 0) __PYX_ERR(0, 4329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4373
 * 
 * 
 * def is_item_hovered():             # <<<<<<<<<<<<<<
 *     """Check if the last item is hovered by mouse.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_203is_item_hovered, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_item_hovered, __pyx_t_1) < 0) __PYX_ERR(0, 4373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4385
 * 
 * 
 * def is_item_hovered_rect():             # <<<<<<<<<<<<<<
 *     """Was the last item hovered by mouse? Even if
 *     another item is active or window is blocked by popup
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_205is_item_hovered_rect, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_item_hovered_rect, __pyx_t_1) < 0) __PYX_ERR(0, 4385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4399
 * 
 * 
 * def is_item_active():             # <<<<<<<<<<<<<<
 *     """Was the last item active? For ex. button being held or text field
 *     being edited. Items that don't interact will always return false.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_207is_item_active, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_item_active, __pyx_t_1) < 0) __PYX_ERR(0, 4399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4412
 * 
 * 
 * def is_item_clicked(int mouse_button = 0):             # <<<<<<<<<<<<<<
 *     """Was the last item clicked? For ex. button or node that was
 *     just being clicked on.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_209is_item_clicked, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_item_clicked, __pyx_t_1) < 0) __PYX_ERR(0, 4412, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4425
 * 
 * 
 * def is_item_visible():             # <<<<<<<<<<<<<<
 *     """Was the last item visible? Aka not out of sight due to
 *     clipping/scrolling.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_211is_item_visible, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_item_visible, __pyx_t_1) < 0) __PYX_ERR(0, 4425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4438
 * 
 * 
 * def is_any_item_hovered():             # <<<<<<<<<<<<<<
 *     """Was any of the items hovered.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_213is_any_item_hovered, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_any_item_hovered, __pyx_t_1) < 0) __PYX_ERR(0, 4438, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4450
 * 
 * 
 * def is_any_item_active():             # <<<<<<<<<<<<<<
 *     """Was any of the items active.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_215is_any_item_active, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_any_item_active, __pyx_t_1) < 0) __PYX_ERR(0, 4450, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4462
 * 
 * 
 * def get_item_rect_min():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_217get_item_rect_min, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_item_rect_min, __pyx_t_1) < 0) __PYX_ERR(0, 4462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4474
 * 
 * 
 * def get_item_rect_max():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_219get_item_rect_max, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_item_rect_max, __pyx_t_1) < 0) __PYX_ERR(0, 4474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4486
 * 
 * 
 * def get_item_rect_size():             # <<<<<<<<<<<<<<
 *     """Get bounding rect of the last item in screen space.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_221get_item_rect_size, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_item_rect_size, __pyx_t_1) < 0) __PYX_ERR(0, 4486, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4498
 * 
 * 
 * def set_item_allow_overlap():             # <<<<<<<<<<<<<<
 *     """Allow last item to be overlapped by a subsequent item.
 *     Sometimes useful with invisible buttons, selectables, etc.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_223set_item_allow_overlap, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_item_allow_overlap, __pyx_t_1) < 0) __PYX_ERR(0, 4498, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4509
 * 
 * 
 * def is_window_hovered():             # <<<<<<<<<<<<<<
 *     """Is current window hovered and hoverable (not blocked by a popup).
 *     Differentiate child windows from each others.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_225is_window_hovered, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_window_hovered, __pyx_t_1) < 0) __PYX_ERR(0, 4509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4522
 * 
 * 
 * def is_window_focused():             # <<<<<<<<<<<<<<
 *     """Is current window focused.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_227is_window_focused, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_window_focused, __pyx_t_1) < 0) __PYX_ERR(0, 4522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4534
 * 
 * 
 * def is_root_window_focused():             # <<<<<<<<<<<<<<
 *     """Is root window focused.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_229is_root_window_focused, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_root_window_focused, __pyx_t_1) < 0) __PYX_ERR(0, 4534, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4546
 * 
 * 
 * def is_root_window_or_any_child_focused():             # <<<<<<<<<<<<<<
 *     """Is the current root window or any of its children on focus.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_231is_root_window_or_any_child_focused, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_root_window_or_any_child_focu, __pyx_t_1) < 0) __PYX_ERR(0, 4546, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4558
 * 
 * 
 * def is_root_window_or_any_child_hovered():             # <<<<<<<<<<<<<<
 *     """Is the current root window or any of its children
 *     hovered with the mouse.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_233is_root_window_or_any_child_hovered, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_root_window_or_any_child_hove, __pyx_t_1) < 0) __PYX_ERR(0, 4558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4571
 * 
 * 
 * def is_rect_visible(float size_width, float size_height):             # <<<<<<<<<<<<<<
 *     """Test if a rectangle of the given size, starting from the cursor
 *     position is visible (not clipped).
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_235is_rect_visible, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_rect_visible, __pyx_t_1) < 0) __PYX_ERR(0, 4571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4588
 * 
 * 
 * def is_pos_hovering_any_window(float position_x, float position_y):             # <<<<<<<<<<<<<<
 *     """Test if position is hovering any active ImGui window.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_237is_pos_hovering_any_window, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_pos_hovering_any_window, __pyx_t_1) < 0) __PYX_ERR(0, 4588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4606
 * 
 * 
 * def is_mouse_hovering_window():             # <<<<<<<<<<<<<<
 *     """Test if mouse is hovering the current window.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_239is_mouse_hovering_window, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_mouse_hovering_window, __pyx_t_1) < 0) __PYX_ERR(0, 4606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4618
 * 
 * 
 * def is_mouse_hovering_any_window():             # <<<<<<<<<<<<<<
 *     """Test if mouse is hovering any visible window.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_241is_mouse_hovering_any_window, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_mouse_hovering_any_window, __pyx_t_1) < 0) __PYX_ERR(0, 4618, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4630
 * 
 * 
 * def is_mouse_hovering_rect(             # <<<<<<<<<<<<<<
 *     float r_min_x, float r_min_y,
 *     float r_max_x, float r_max_y,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_243is_mouse_hovering_rect, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_mouse_hovering_rect, __pyx_t_1) < 0) __PYX_ERR(0, 4630, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4658
 * 
 * 
 * def is_mouse_dragging(int button = 0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Returns if mouse is dragging.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_245is_mouse_dragging, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_mouse_dragging, __pyx_t_1) < 0) __PYX_ERR(0, 4658, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4675
 * 
 * 
 * def get_mouse_drag_delta(int button=0, float lock_threshold = -1.0):             # <<<<<<<<<<<<<<
 *     """Dragging amount since clicking.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_247get_mouse_drag_delta, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_mouse_drag_delta, __pyx_t_1) < 0) __PYX_ERR(0, 4675, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4694
 * 
 * 
 * def reset_mouse_drag_delta(int button = 0):             # <<<<<<<<<<<<<<
 *     """Reset the mouse dragging delta.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_249reset_mouse_drag_delta, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reset_mouse_drag_delta, __pyx_t_1) < 0) __PYX_ERR(0, 4694, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4706
 * 
 * 
 * def get_mouse_cursor():             # <<<<<<<<<<<<<<
 *     """Return the mouse cursor id.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_251get_mouse_cursor, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_mouse_cursor, __pyx_t_1) < 0) __PYX_ERR(0, 4706, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4715
 * 
 * 
 * def set_mouse_cursor(cimgui.ImGuiMouseCursor mouse_cursor_type):             # <<<<<<<<<<<<<<
 *     """Set the mouse cursor id.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_253set_mouse_cursor, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_mouse_cursor, __pyx_t_1) < 0) __PYX_ERR(0, 4715, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4727
 * 
 * 
 * def push_font(_Font font):             # <<<<<<<<<<<<<<
 *     """Push font on a stack.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_255push_font, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_push_font, __pyx_t_1) < 0) __PYX_ERR(0, 4727, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":4759
 *     cimgui.PushFont(font._ptr)
 * 
 * def pop_font():             # <<<<<<<<<<<<<<
 *     """Pop font on a stack.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_257pop_font, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pop_font, __pyx_t_1) < 0) __PYX_ERR(0, 4759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5002
 * 
 * 
 * def separator():             # <<<<<<<<<<<<<<
 *     """Add vertical line as a separator beween elements.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_277separator, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_separator, __pyx_t_1) < 0) __PYX_ERR(0, 5002, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5029
 * 
 * 
 * def same_line(float position=0.0, float spacing=-1.0):             # <<<<<<<<<<<<<<
 *     """Call between widgets or groups to layout them horizontally.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_279same_line, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_same_line, __pyx_t_1) < 0) __PYX_ERR(0, 5029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5062
 * 
 * 
 * def new_line():             # <<<<<<<<<<<<<<
 *     """Undo :any:`same_line()` call.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_281new_line, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_new_line, __pyx_t_1) < 0) __PYX_ERR(0, 5062, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5071
 * 
 * 
 * def spacing():             # <<<<<<<<<<<<<<
 *     """Add vertical spacing beween elements.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_283spacing, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_spacing, __pyx_t_1) < 0) __PYX_ERR(0, 5071, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5098
 * 
 * 
 * def dummy(width, height):             # <<<<<<<<<<<<<<
 *     """Add dummy element of given size.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_285dummy, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dummy, __pyx_t_1) < 0) __PYX_ERR(0, 5098, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5122
 * 
 * 
 * def indent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to right by indent width.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_287indent, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_indent, __pyx_t_1) < 0) __PYX_ERR(0, 5122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5153
 * 
 * 
 * def unindent(float width=0.0):             # <<<<<<<<<<<<<<
 *     """Move content to left by indent width.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_289unindent, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_unindent, __pyx_t_1) < 0) __PYX_ERR(0, 5153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5184
 * 
 * 
 * def columns(int count=1, str identifier=None, bool border=True):             # <<<<<<<<<<<<<<
 *     """Setup number of columns. Use an identifier to distinguish multiple
 *     column sets. close with ``columns(1)``.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_291columns, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_columns, __pyx_t_1) < 0) __PYX_ERR(0, 5184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5244
 * 
 * 
 * def next_column():             # <<<<<<<<<<<<<<
 *     """Move to the next column drawing.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_293next_column, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_next_column, __pyx_t_1) < 0) __PYX_ERR(0, 5244, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5255
 * 
 * 
 * def get_column_index():             # <<<<<<<<<<<<<<
 *     """Returns the current column index.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_295get_column_index, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_column_index, __pyx_t_1) < 0) __PYX_ERR(0, 5255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5269
 * 
 * 
 * def get_column_offset(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Returns position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column, otherwise 0 to
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_297get_column_offset, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_column_offset, __pyx_t_1) < 0) __PYX_ERR(0, 5269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5289
 * 
 * 
 * def set_column_offset(int column_index, float offset_x):             # <<<<<<<<<<<<<<
 *     """Set the position of column line (in pixels, from the left side of the
 *     contents region). Pass -1 to use current column.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_299set_column_offset, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_column_offset, __pyx_t_1) < 0) __PYX_ERR(0, 5289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5305
 * 
 * 
 * def get_column_width(int column_index=-1):             # <<<<<<<<<<<<<<
 *     """Return the column width.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_301get_column_width, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_column_width, __pyx_t_1) < 0) __PYX_ERR(0, 5305, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5319
 * 
 * 
 * def get_columns_count():             # <<<<<<<<<<<<<<
 *     """Get count of the columns in the current table.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_303get_columns_count, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_columns_count, __pyx_t_1) < 0) __PYX_ERR(0, 5319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5333
 * 
 * 
 * def begin_group():             # <<<<<<<<<<<<<<
 *     """Start item group and lock its horizontal starting position.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_305begin_group, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_group, __pyx_t_1) < 0) __PYX_ERR(0, 5333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5368
 * 
 * 
 * def end_group():             # <<<<<<<<<<<<<<
 *     """End group (see: :any:`begin_group`).
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_307end_group, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_group, __pyx_t_1) < 0) __PYX_ERR(0, 5368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5379
 * # todo: move to separate extension module (extra?)
 * 
 * @contextmanager             # <<<<<<<<<<<<<<
 * def font(_Font font):
 *     """Use specified font in given context.
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_contextmanager); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "imgui/core.pyx":5380
 * 
 * @contextmanager
 * def font(_Font font):             # <<<<<<<<<<<<<<
 *     """Use specified font in given context.
 * 
 */
  __pyx_t_13 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_309font, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 5380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_14) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5379, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_13};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5379, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_13};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5379, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    {
      __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 5379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_14); __pyx_t_14 = NULL;
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_t_13);
      __pyx_t_13 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_font, __pyx_t_1) < 0) __PYX_ERR(0, 5380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5407
 *     pop_font()
 * 
 * @contextmanager             # <<<<<<<<<<<<<<
 * def styled(cimgui.ImGuiStyleVar variable, value):
 *     # note: we treat bool value as integer to guess if we are required to pop
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_contextmanager); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "imgui/core.pyx":5408
 * 
 * @contextmanager
 * def styled(cimgui.ImGuiStyleVar variable, value):             # <<<<<<<<<<<<<<
 *     # note: we treat bool value as integer to guess if we are required to pop
 *     #       anything because IMGUI may simply skip pushing
 */
  __pyx_t_15 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_312styled, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 5408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_13 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_13) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5407, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_t_15};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5407, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_t_15};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5407, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    } else
    #endif
    {
      __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 5407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_13); __pyx_t_13 = NULL;
      __Pyx_GIVEREF(__pyx_t_15);
      PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_15);
      __pyx_t_15 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_styled, __pyx_t_1) < 0) __PYX_ERR(0, 5408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5416
 * 
 * 
 * @contextmanager             # <<<<<<<<<<<<<<
 * def istyled(*variables_and_values):
 *     # todo: rename to nstyled?
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_contextmanager); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "imgui/core.pyx":5417
 * 
 * @contextmanager
 * def istyled(*variables_and_values):             # <<<<<<<<<<<<<<
 *     # todo: rename to nstyled?
 *     count = 0
 */
  __pyx_t_14 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_315istyled, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 5417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_15)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_15) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5416, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_15, __pyx_t_14};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5416, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_15, __pyx_t_14};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5416, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    } else
    #endif
    {
      __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 5416, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_15); __pyx_t_15 = NULL;
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_t_14);
      __pyx_t_14 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5416, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_istyled, __pyx_t_1) < 0) __PYX_ERR(0, 5417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5444
 * 
 * 
 * def vertex_buffer_vertex_pos_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_318vertex_buffer_vertex_pos_offset, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_vertex_buffer_vertex_pos_offset, __pyx_t_1) < 0) __PYX_ERR(0, 5444, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5447
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).pos
 * 
 * def vertex_buffer_vertex_uv_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_320vertex_buffer_vertex_uv_offset, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_vertex_buffer_vertex_uv_offset, __pyx_t_1) < 0) __PYX_ERR(0, 5447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5450
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).uv
 * 
 * def vertex_buffer_vertex_col_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_322vertex_buffer_vertex_col_offset, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_vertex_buffer_vertex_col_offset, __pyx_t_1) < 0) __PYX_ERR(0, 5450, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5453
 *     return <uintptr_t><size_t>&(<cimgui.ImDrawVert*>NULL).col
 * 
 * def vertex_buffer_vertex_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawVert)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_324vertex_buffer_vertex_size, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_vertex_buffer_vertex_size, __pyx_t_1) < 0) __PYX_ERR(0, 5453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5456
 *     return sizeof(cimgui.ImDrawVert)
 * 
 * def index_buffer_index_size():             # <<<<<<<<<<<<<<
 *     return sizeof(cimgui.ImDrawIdx)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5imgui_4core_326index_buffer_index_size, NULL, __pyx_n_s_imgui_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_index_buffer_index_size, __pyx_t_1) < 0) __PYX_ERR(0, 5456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imgui/core.pyx":5464
 * 
 * cdef public _ImGuiError "ImGuiError" = PyErr_NewException(
 *     "imgui.core.ImGuiError", Exception, {}             # <<<<<<<<<<<<<<
 * )
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "imgui/core.pyx":5463
 * from cpython.exc cimport PyErr_NewException
 * 
 * cdef public _ImGuiError "ImGuiError" = PyErr_NewException(             # <<<<<<<<<<<<<<
 *     "imgui.core.ImGuiError", Exception, {}
 * )
 */
  __pyx_t_7 = PyErr_NewException(((char *)"imgui.core.ImGuiError"), ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 5463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(ImGuiError);
  __Pyx_DECREF_SET(ImGuiError, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "imgui/core.pyx":5467
 * )
 * 
 * ImGuiError = _ImGuiError # make visible to Python             # <<<<<<<<<<<<<<
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ImGuiError, ImGuiError) < 0) __PYX_ERR(0, 5467, __pyx_L1_error)

  /* "imgui/core.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # distutils: sources = imgui-cpp/imgui.cpp imgui-cpp/imgui_draw.cpp imgui-cpp/imgui_demo.cpp config-cpp/py_imconfig.cpp
 * # distutils: include_dirs = imgui-cpp
 */
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "View.MemoryView":207
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_7 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_7) < 0) __PYX_ERR(1, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":282
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__307, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "View.MemoryView":283
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__308, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "View.MemoryView":284
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__309, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "View.MemoryView":287
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__310, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "View.MemoryView":288
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__311, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "View.MemoryView":312
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":313
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_16[0] = PyThread_allocate_lock();
  __pyx_t_16[1] = PyThread_allocate_lock();
  __pyx_t_16[2] = PyThread_allocate_lock();
  __pyx_t_16[3] = PyThread_allocate_lock();
  __pyx_t_16[4] = PyThread_allocate_lock();
  __pyx_t_16[5] = PyThread_allocate_lock();
  __pyx_t_16[6] = PyThread_allocate_lock();
  __pyx_t_16[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_16, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":535
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_7) < 0) __PYX_ERR(1, 535, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":981
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_7) < 0) __PYX_ERR(1, 981, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":9
 *         __pyx_unpickle_Enum__set_state(<Enum> result, __pyx_state)
 *     return result
 * cdef __pyx_unpickle_Enum__set_state(Enum result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     result.name = __pyx_state[0]
 *     if hasattr(result, '__dict__'):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init imgui.core", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init imgui.core");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
  #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseTooManyValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
    static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
    static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* WriteUnraisableException */
    static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseArgTupleInvalid */
    static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
    static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCallMethO */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseDoubleKeywords */
      static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
      static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
      static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* GetItemInt */
      static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* SetItemInt */
      static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyObjectCallMethod0 */
        static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNoneIterError */
        static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
        static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
        static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
        static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        const char *name = PyUnicode_AsUTF8(method_name);
        PyObject **pp = NULL;
        if (strcmp(name, "iteritems") == 0) pp = &py_items;
        else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
        else if (strcmp(name, "itervalues") == 0) pp = &py_values;
        if (pp) {
            if (!*pp) {
                *pp = PyUnicode_FromString(name + 4);
                if (!*pp)
                    return NULL;
            }
            method_name = *pp;
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* StringJoin */
        #if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* pyobject_as_double */
        static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
    float_value = PyNumber_Float(obj);  if (0) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* SaveResetException */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
        #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
          #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* BytesEquals */
          static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
          static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* None */
          static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* GetAttr */
          static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* decode_c_string */
          static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* GetAttr3 */
          static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            goto bad;
        PyErr_Clear();
        r = d;
        Py_INCREF(d);
    }
    return r;
bad:
    return NULL;
}

/* ExtTypeTest */
          static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* Import */
          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* PyIntBinop */
          #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
          static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* None */
          static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* ImportFrom */
          static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
          static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* SetVTable */
          static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
          #define __Pyx_setup_reduce_GET_ATTR_OR_BAD(res, obj, name) res = PyObject_GetAttrString(obj, name); if (res == NULL) goto BAD;
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = PyObject_GetAttrString(meth, "__name__");
  if (name_attr) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (ret < 0) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject* builtin_object = NULL;
    static PyObject *object_reduce = NULL;
    static PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    if (PyObject_HasAttrString(type_obj, "__getstate__")) goto GOOD;
    if (object_reduce_ex == NULL) {
        __Pyx_setup_reduce_GET_ATTR_OR_BAD(builtin_object, __pyx_b, "object");
        __Pyx_setup_reduce_GET_ATTR_OR_BAD(object_reduce, builtin_object, "__reduce__");
        __Pyx_setup_reduce_GET_ATTR_OR_BAD(object_reduce_ex, builtin_object, "__reduce_ex__");
    }
    __Pyx_setup_reduce_GET_ATTR_OR_BAD(reduce_ex, type_obj, "__reduce_ex__");
    if (reduce_ex == object_reduce_ex) {
        __Pyx_setup_reduce_GET_ATTR_OR_BAD(reduce, type_obj, "__reduce__");
        if (object_reduce == reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            __Pyx_setup_reduce_GET_ATTR_OR_BAD(reduce_cython, type_obj, "__reduce_cython__");
            ret = PyDict_SetItemString(((PyTypeObject*)type_obj)->tp_dict, "__reduce__", reduce_cython); if (ret < 0) goto BAD;
            ret = PyDict_DelItemString(((PyTypeObject*)type_obj)->tp_dict, "__reduce_cython__"); if (ret < 0) goto BAD;
            setstate = PyObject_GetAttrString(type_obj, "__setstate__");
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
            __Pyx_setup_reduce_GET_ATTR_OR_BAD(setstate_cython, type_obj, "__setstate_cython__");
                ret = PyDict_SetItemString(((PyTypeObject*)type_obj)->tp_dict, "__setstate__", setstate_cython); if (ret < 0) goto BAD;
                ret = PyDict_DelItemString(((PyTypeObject*)type_obj)->tp_dict, "__setstate_cython__"); if (ret < 0) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred()) PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
    Py_XDECREF(builtin_object);
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* FetchCommonType */
          static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
          static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* FusedFunction */
              static PyObject *
__pyx_FusedFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags,
                        PyObject *qualname, PyObject *self,
                        PyObject *module, PyObject *globals,
                        PyObject *code)
{
    __pyx_FusedFunctionObject *fusedfunc =
        (__pyx_FusedFunctionObject *) __Pyx_CyFunction_New(type, ml, flags, qualname,
                                                           self, module, globals, code);
    if (!fusedfunc)
        return NULL;
    fusedfunc->__signatures__ = NULL;
    fusedfunc->type = NULL;
    fusedfunc->self = NULL;
    return (PyObject *) fusedfunc;
}
static void __pyx_FusedFunction_dealloc(__pyx_FusedFunctionObject *self) {
    __pyx_FusedFunction_clear(self);
    __pyx_FusedFunctionType->tp_free((PyObject *) self);
}
static int
__pyx_FusedFunction_traverse(__pyx_FusedFunctionObject *self,
                             visitproc visit,
                             void *arg)
{
    Py_VISIT(self->self);
    Py_VISIT(self->type);
    Py_VISIT(self->__signatures__);
    return __Pyx_CyFunction_traverse((__pyx_CyFunctionObject *) self, visit, arg);
}
static int
__pyx_FusedFunction_clear(__pyx_FusedFunctionObject *self)
{
    Py_CLEAR(self->self);
    Py_CLEAR(self->type);
    Py_CLEAR(self->__signatures__);
    return __Pyx_CyFunction_clear((__pyx_CyFunctionObject *) self);
}
static PyObject *
__pyx_FusedFunction_descr_get(PyObject *self, PyObject *obj, PyObject *type)
{
    __pyx_FusedFunctionObject *func, *meth;
    func = (__pyx_FusedFunctionObject *) self;
    if (func->self || func->func.flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(self);
        return self;
    }
    if (obj == Py_None)
        obj = NULL;
    meth = (__pyx_FusedFunctionObject *) __pyx_FusedFunction_NewEx(
                    ((PyCFunctionObject *) func)->m_ml,
                    ((__pyx_CyFunctionObject *) func)->flags,
                    ((__pyx_CyFunctionObject *) func)->func_qualname,
                    ((__pyx_CyFunctionObject *) func)->func_closure,
                    ((PyCFunctionObject *) func)->m_module,
                    ((__pyx_CyFunctionObject *) func)->func_globals,
                    ((__pyx_CyFunctionObject *) func)->func_code);
    if (!meth)
        return NULL;
    Py_XINCREF(func->func.func_classobj);
    meth->func.func_classobj = func->func.func_classobj;
    Py_XINCREF(func->__signatures__);
    meth->__signatures__ = func->__signatures__;
    Py_XINCREF(type);
    meth->type = type;
    Py_XINCREF(func->func.defaults_tuple);
    meth->func.defaults_tuple = func->func.defaults_tuple;
    if (func->func.flags & __Pyx_CYFUNCTION_CLASSMETHOD)
        obj = type;
    Py_XINCREF(obj);
    meth->self = obj;
    return (PyObject *) meth;
}
static PyObject *
_obj_to_str(PyObject *obj)
{
    if (PyType_Check(obj))
        return PyObject_GetAttr(obj, __pyx_n_s_name);
    else
        return PyObject_Str(obj);
}
static PyObject *
__pyx_FusedFunction_getitem(__pyx_FusedFunctionObject *self, PyObject *idx)
{
    PyObject *signature = NULL;
    PyObject *unbound_result_func;
    PyObject *result_func = NULL;
    if (self->__signatures__ == NULL) {
        PyErr_SetString(PyExc_TypeError, "Function is not fused");
        return NULL;
    }
    if (PyTuple_Check(idx)) {
        PyObject *list = PyList_New(0);
        Py_ssize_t n = PyTuple_GET_SIZE(idx);
        PyObject *string = NULL;
        PyObject *sep = NULL;
        int i;
        if (!list)
            return NULL;
        for (i = 0; i < n; i++) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            PyObject *item = PyTuple_GET_ITEM(idx, i);
#else
            PyObject *item = PySequence_ITEM(idx, i);
#endif
            string = _obj_to_str(item);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
            Py_DECREF(item);
#endif
            if (!string || PyList_Append(list, string) < 0)
                goto __pyx_err;
            Py_DECREF(string);
        }
        sep = PyUnicode_FromString("|");
        if (sep)
            signature = PyUnicode_Join(sep, list);
__pyx_err:
;
        Py_DECREF(list);
        Py_XDECREF(sep);
    } else {
        signature = _obj_to_str(idx);
    }
    if (!signature)
        return NULL;
    unbound_result_func = PyObject_GetItem(self->__signatures__, signature);
    if (unbound_result_func) {
        if (self->self || self->type) {
            __pyx_FusedFunctionObject *unbound = (__pyx_FusedFunctionObject *) unbound_result_func;
            Py_CLEAR(unbound->func.func_classobj);
            Py_XINCREF(self->func.func_classobj);
            unbound->func.func_classobj = self->func.func_classobj;
            result_func = __pyx_FusedFunction_descr_get(unbound_result_func,
                                                        self->self, self->type);
        } else {
            result_func = unbound_result_func;
            Py_INCREF(result_func);
        }
    }
    Py_DECREF(signature);
    Py_XDECREF(unbound_result_func);
    return result_func;
}
static PyObject *
__pyx_FusedFunction_callfunction(PyObject *func, PyObject *args, PyObject *kw)
{
     __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    int static_specialized = (cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD &&
                              !((__pyx_FusedFunctionObject *) func)->__signatures__);
    if (cyfunc->flags & __Pyx_CYFUNCTION_CCLASS && !static_specialized) {
        return __Pyx_CyFunction_CallAsMethod(func, args, kw);
    } else {
        return __Pyx_CyFunction_Call(func, args, kw);
    }
}
static PyObject *
__pyx_FusedFunction_call(PyObject *func, PyObject *args, PyObject *kw)
{
    __pyx_FusedFunctionObject *binding_func = (__pyx_FusedFunctionObject *) func;
    Py_ssize_t argc = PyTuple_GET_SIZE(args);
    PyObject *new_args = NULL;
    __pyx_FusedFunctionObject *new_func = NULL;
    PyObject *result = NULL;
    PyObject *self = NULL;
    int is_staticmethod = binding_func->func.flags & __Pyx_CYFUNCTION_STATICMETHOD;
    int is_classmethod = binding_func->func.flags & __Pyx_CYFUNCTION_CLASSMETHOD;
    if (binding_func->self) {
        Py_ssize_t i;
        new_args = PyTuple_New(argc + 1);
        if (!new_args)
            return NULL;
        self = binding_func->self;
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_INCREF(self);
#endif
        Py_INCREF(self);
        PyTuple_SET_ITEM(new_args, 0, self);
        for (i = 0; i < argc; i++) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            PyObject *item = PyTuple_GET_ITEM(args, i);
            Py_INCREF(item);
#else
            PyObject *item = PySequence_ITEM(args, i);  if (unlikely(!item)) goto bad;
#endif
            PyTuple_SET_ITEM(new_args, i + 1, item);
        }
        args = new_args;
    } else if (binding_func->type) {
        if (argc < 1) {
            PyErr_SetString(PyExc_TypeError, "Need at least one argument, 0 given.");
            return NULL;
        }
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        self = PyTuple_GET_ITEM(args, 0);
#else
        self = PySequence_ITEM(args, 0);  if (unlikely(!self)) return NULL;
#endif
    }
    if (self && !is_classmethod && !is_staticmethod) {
        int is_instance = PyObject_IsInstance(self, binding_func->type);
        if (unlikely(!is_instance)) {
            PyErr_Format(PyExc_TypeError,
                         "First argument should be of type %.200s, got %.200s.",
                         ((PyTypeObject *) binding_func->type)->tp_name,
                         self->ob_type->tp_name);
            goto bad;
        } else if (unlikely(is_instance == -1)) {
            goto bad;
        }
    }
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
    Py_XDECREF(self);
    self = NULL;
#endif
    if (binding_func->__signatures__) {
        PyObject *tup;
        if (is_staticmethod && binding_func->func.flags & __Pyx_CYFUNCTION_CCLASS) {
            tup = PyTuple_Pack(3, args,
                               kw == NULL ? Py_None : kw,
                               binding_func->func.defaults_tuple);
            if (unlikely(!tup)) goto bad;
            new_func = (__pyx_FusedFunctionObject *) __Pyx_CyFunction_CallMethod(
                func, binding_func->__signatures__, tup, NULL);
        } else {
            tup = PyTuple_Pack(4, binding_func->__signatures__, args,
                               kw == NULL ? Py_None : kw,
                               binding_func->func.defaults_tuple);
            if (unlikely(!tup)) goto bad;
            new_func = (__pyx_FusedFunctionObject *) __pyx_FusedFunction_callfunction(func, tup, NULL);
        }
        Py_DECREF(tup);
        if (unlikely(!new_func))
            goto bad;
        Py_XINCREF(binding_func->func.func_classobj);
        Py_CLEAR(new_func->func.func_classobj);
        new_func->func.func_classobj = binding_func->func.func_classobj;
        func = (PyObject *) new_func;
    }
    result = __pyx_FusedFunction_callfunction(func, args, kw);
bad:
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
    Py_XDECREF(self);
#endif
    Py_XDECREF(new_args);
    Py_XDECREF((PyObject *) new_func);
    return result;
}
static PyMemberDef __pyx_FusedFunction_members[] = {
    {(char *) "__signatures__",
     T_OBJECT,
     offsetof(__pyx_FusedFunctionObject, __signatures__),
     READONLY,
     0},
    {0, 0, 0, 0, 0},
};
static PyMappingMethods __pyx_FusedFunction_mapping_methods = {
    0,
    (binaryfunc) __pyx_FusedFunction_getitem,
    0,
};
static PyTypeObject __pyx_FusedFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "fused_cython_function",
    sizeof(__pyx_FusedFunctionObject),
    0,
    (destructor) __pyx_FusedFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    0,
    0,
    0,
    &__pyx_FusedFunction_mapping_methods,
    0,
    (ternaryfunc) __pyx_FusedFunction_call,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __pyx_FusedFunction_traverse,
    (inquiry) __pyx_FusedFunction_clear,
    0,
    0,
    0,
    0,
    0,
    __pyx_FusedFunction_members,
    __pyx_CyFunction_getsets,
    &__pyx_CyFunctionType_type,
    0,
    __pyx_FusedFunction_descr_get,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_FusedFunction_init(void) {
    __pyx_FusedFunctionType = __Pyx_FetchCommonType(&__pyx_FusedFunctionType_type);
    if (__pyx_FusedFunctionType == NULL) {
        return -1;
    }
    return 0;
}

/* CLineInTraceback */
              static int __Pyx_CLineForTraceback(int c_line) {
#ifdef CYTHON_CLINE_IN_TRACEBACK
    return ((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0;
#else
    PyObject **cython_runtime_dict;
    PyObject *use_cline;
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (unlikely(!cython_runtime_dict)) {
      PyObject *ptype, *pvalue, *ptraceback;
      PyObject *use_cline_obj;
      PyErr_Fetch(&ptype, &pvalue, &ptraceback);
      use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        use_cline = NULL;
      }
      PyErr_Restore(ptype, pvalue, ptraceback);
    } else {
      use_cline = PyDict_GetItem(*_PyObject_GetDictPtr(__pyx_cython_runtime), __pyx_n_s_cline_in_traceback);
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    return c_line;
#endif
}

/* CodeObjectCache */
              static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
              #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif


              /* MemviewSliceIsContig */
              static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs,
                             char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
              static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
              static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* IsLittleEndian */
              static int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSetCond_(ImGuiSetCond_ value) {
    const ImGuiSetCond_ neg_one = (ImGuiSetCond_) -1, const_zero = (ImGuiSetCond_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiSetCond_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiSetCond_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSetCond_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiSetCond_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSetCond_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiSetCond_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ value) {
    const ImGuiStyleVar_ neg_one = (ImGuiStyleVar_) -1, const_zero = (ImGuiStyleVar_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiStyleVar_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiStyleVar_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiStyleVar_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiStyleVar_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiStyleVar_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiStyleVar_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiKey_(ImGuiKey_ value) {
    const ImGuiKey_ neg_one = (ImGuiKey_) -1, const_zero = (ImGuiKey_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiKey_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiKey_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiKey_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiKey_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiKey_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiKey_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_ value) {
    const ImGuiWindowFlags_ neg_one = (ImGuiWindowFlags_) -1, const_zero = (ImGuiWindowFlags_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiWindowFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiWindowFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiWindowFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiWindowFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiWindowFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiWindowFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_ value) {
    const ImGuiTreeNodeFlags_ neg_one = (ImGuiTreeNodeFlags_) -1, const_zero = (ImGuiTreeNodeFlags_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiTreeNodeFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiTreeNodeFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTreeNodeFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiTreeNodeFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTreeNodeFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiTreeNodeFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_ value) {
    const ImGuiSelectableFlags_ neg_one = (ImGuiSelectableFlags_) -1, const_zero = (ImGuiSelectableFlags_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiSelectableFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiSelectableFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSelectableFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiSelectableFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSelectableFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiSelectableFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ value) {
    const ImGuiMouseCursor_ neg_one = (ImGuiMouseCursor_) -1, const_zero = (ImGuiMouseCursor_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiMouseCursor_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiMouseCursor_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiMouseCursor_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiMouseCursor_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiMouseCursor_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiMouseCursor_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ value) {
    const ImGuiCol_ neg_one = (ImGuiCol_) -1, const_zero = (ImGuiCol_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiCol_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiCol_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiCol_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiCol_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiCol_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiCol_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_ value) {
    const ImGuiInputTextFlags_ neg_one = (ImGuiInputTextFlags_) -1, const_zero = (ImGuiInputTextFlags_) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiInputTextFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiInputTextFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiInputTextFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiInputTextFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiInputTextFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiInputTextFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
              #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiWindowFlags(ImGuiWindowFlags value) {
    const ImGuiWindowFlags neg_one = (ImGuiWindowFlags) -1, const_zero = (ImGuiWindowFlags) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiWindowFlags) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiWindowFlags) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiWindowFlags) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiWindowFlags) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiWindowFlags) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiWindowFlags),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiID(ImGuiID value) {
    const ImGuiID neg_one = (ImGuiID) -1, const_zero = (ImGuiID) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiID) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiID) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiID) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiID) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiID) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiID),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiMouseCursor(ImGuiMouseCursor value) {
    const ImGuiMouseCursor neg_one = (ImGuiMouseCursor) -1, const_zero = (ImGuiMouseCursor) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiMouseCursor) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiMouseCursor) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiMouseCursor) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiMouseCursor) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiMouseCursor) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiMouseCursor),
                                     little, !is_unsigned);
    }
}

/* MemviewSliceCopyTemplate */
              static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (from_mvs->suboffsets[i] >= 0) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* BufferFormatCheck */
              static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

/* MemviewSliceInit */
                static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (!buf) {
        PyErr_SetString(PyExc_ValueError,
            "buf is NULL.");
        goto fail;
    } else if (memviewslice->memview || memviewslice->data) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
static CYTHON_INLINE void __pyx_fatalerror(const char *fmt, ...) {
    va_list vargs;
    char msg[200];
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    Py_FatalError(msg);
    va_end(vargs);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview || (PyObject *) memview == Py_None)
        return;
    if (__pyx_get_slice_count(memview) < 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (first_time) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview ) {
        return;
    } else if ((PyObject *) memview == Py_None) {
        memslice->memview = NULL;
        return;
    }
    if (__pyx_get_slice_count(memview) <= 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (last_time) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* CIntFromPy */
                static CYTHON_INLINE ImWchar __Pyx_PyInt_As_ImWchar(PyObject *x) {
    const ImWchar neg_one = (ImWchar) -1, const_zero = (ImWchar) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImWchar) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImWchar, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImWchar) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImWchar) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImWchar, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImWchar) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) >= 2 * PyLong_SHIFT) {
                            return (ImWchar) (((((ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImWchar) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) >= 3 * PyLong_SHIFT) {
                            return (ImWchar) (((((((ImWchar)digits[2]) << PyLong_SHIFT) | (ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImWchar) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) >= 4 * PyLong_SHIFT) {
                            return (ImWchar) (((((((((ImWchar)digits[3]) << PyLong_SHIFT) | (ImWchar)digits[2]) << PyLong_SHIFT) | (ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImWchar) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImWchar) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImWchar, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImWchar) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImWchar, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImWchar) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImWchar, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImWchar,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImWchar) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) - 1 > 2 * PyLong_SHIFT) {
                            return (ImWchar) (((ImWchar)-1)*(((((ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImWchar) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) - 1 > 2 * PyLong_SHIFT) {
                            return (ImWchar) ((((((ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImWchar) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) - 1 > 3 * PyLong_SHIFT) {
                            return (ImWchar) (((ImWchar)-1)*(((((((ImWchar)digits[2]) << PyLong_SHIFT) | (ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImWchar) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) - 1 > 3 * PyLong_SHIFT) {
                            return (ImWchar) ((((((((ImWchar)digits[2]) << PyLong_SHIFT) | (ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImWchar) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) - 1 > 4 * PyLong_SHIFT) {
                            return (ImWchar) (((ImWchar)-1)*(((((((((ImWchar)digits[3]) << PyLong_SHIFT) | (ImWchar)digits[2]) << PyLong_SHIFT) | (ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImWchar) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImWchar, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImWchar) - 1 > 4 * PyLong_SHIFT) {
                            return (ImWchar) ((((((((((ImWchar)digits[3]) << PyLong_SHIFT) | (ImWchar)digits[2]) << PyLong_SHIFT) | (ImWchar)digits[1]) << PyLong_SHIFT) | (ImWchar)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImWchar) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImWchar, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImWchar) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImWchar, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImWchar val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImWchar) -1;
        }
    } else {
        ImWchar val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImWchar) -1;
        val = __Pyx_PyInt_As_ImWchar(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImWchar");
    return (ImWchar) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImWchar");
    return (ImWchar) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE ImGuiWindowFlags __Pyx_PyInt_As_ImGuiWindowFlags(PyObject *x) {
    const ImGuiWindowFlags neg_one = (ImGuiWindowFlags) -1, const_zero = (ImGuiWindowFlags) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiWindowFlags) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiWindowFlags) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiWindowFlags) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiWindowFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) >= 2 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((((ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiWindowFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) >= 3 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((((((ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiWindowFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) >= 4 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((((((((ImGuiWindowFlags)digits[3]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiWindowFlags) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiWindowFlags) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiWindowFlags, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiWindowFlags) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiWindowFlags, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiWindowFlags) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiWindowFlags) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((ImGuiWindowFlags)-1)*(((((ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiWindowFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) ((((((ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiWindowFlags) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((ImGuiWindowFlags)-1)*(((((((ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiWindowFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) ((((((((ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiWindowFlags) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((ImGuiWindowFlags)-1)*(((((((((ImGuiWindowFlags)digits[3]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiWindowFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) ((((((((((ImGuiWindowFlags)digits[3]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiWindowFlags) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiWindowFlags, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiWindowFlags) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiWindowFlags, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiWindowFlags val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiWindowFlags) -1;
        }
    } else {
        ImGuiWindowFlags val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiWindowFlags) -1;
        val = __Pyx_PyInt_As_ImGuiWindowFlags(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiWindowFlags");
    return (ImGuiWindowFlags) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiWindowFlags");
    return (ImGuiWindowFlags) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE ImGuiID __Pyx_PyInt_As_ImGuiID(PyObject *x) {
    const ImGuiID neg_one = (ImGuiID) -1, const_zero = (ImGuiID) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiID) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiID, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiID) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiID) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiID, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiID) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) >= 2 * PyLong_SHIFT) {
                            return (ImGuiID) (((((ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiID) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) >= 3 * PyLong_SHIFT) {
                            return (ImGuiID) (((((((ImGuiID)digits[2]) << PyLong_SHIFT) | (ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiID) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) >= 4 * PyLong_SHIFT) {
                            return (ImGuiID) (((((((((ImGuiID)digits[3]) << PyLong_SHIFT) | (ImGuiID)digits[2]) << PyLong_SHIFT) | (ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiID) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiID) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiID, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiID) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiID, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiID) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiID, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiID,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiID) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiID) (((ImGuiID)-1)*(((((ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiID) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiID) ((((((ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiID) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiID) (((ImGuiID)-1)*(((((((ImGuiID)digits[2]) << PyLong_SHIFT) | (ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiID) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiID) ((((((((ImGuiID)digits[2]) << PyLong_SHIFT) | (ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiID) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiID) (((ImGuiID)-1)*(((((((((ImGuiID)digits[3]) << PyLong_SHIFT) | (ImGuiID)digits[2]) << PyLong_SHIFT) | (ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiID) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiID, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiID) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiID) ((((((((((ImGuiID)digits[3]) << PyLong_SHIFT) | (ImGuiID)digits[2]) << PyLong_SHIFT) | (ImGuiID)digits[1]) << PyLong_SHIFT) | (ImGuiID)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiID) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiID, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiID) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiID, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiID val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiID) -1;
        }
    } else {
        ImGuiID val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiID) -1;
        val = __Pyx_PyInt_As_ImGuiID(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiID");
    return (ImGuiID) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiID");
    return (ImGuiID) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE ImGuiSetCond __Pyx_PyInt_As_ImGuiSetCond(PyObject *x) {
    const ImGuiSetCond neg_one = (ImGuiSetCond) -1, const_zero = (ImGuiSetCond) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiSetCond) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiSetCond, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiSetCond) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiSetCond) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiSetCond, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiSetCond) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiSetCond, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiSetCond) >= 2 * PyLong_SHIFT) {
                            return (ImGuiSetCond) (((((ImGuiSetCond)digits[1]) << PyLong_SHIFT) | (ImGuiSetCond)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiSetCond) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiSetCond, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiSetCond) >= 3 * PyLong_SHIFT) {
                            return (ImGuiSetCond) (((((((ImGuiSetCond)digits[2]) << PyLong_SHIFT) | (ImGuiSetCond)digits[1]) << PyLong_SHIFT) | (ImGuiSetCond)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiSetCond) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiSetCond, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiSetCond) >= 4 * PyLong_SHIFT) {
                            return (ImGuiSetCond) (((((((((ImGuiSetCond)digits[3]) << PyLong_SHIFT) | (ImGuiSetCond)digits[2]) << PyLong_SHIFT) | (ImGuiSetCond)digits[1]) << PyLong_SHIFT) | (ImGuiSetCond)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiSetCond) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiSetCond) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiSetCond, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiSetCond) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiSetCond, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiSetCond) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiSetCond, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiSetCond,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiSetCond) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiSetCond, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiSetCond) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiSetCond) (((ImGuiSetCond)-1)*(((((ImGuiSetCond)digits[1]) << PyLong_SHIFT) | (ImGuiSetCond)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiSetCond) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiSetCond, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiSetCond) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiSetCond) ((((((ImGuiSetCond)digits[1]) << PyLong_SHIFT) | (ImGuiSetCond)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiSetCond) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiSetCond, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiSetCond) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiSetCond) (((ImGuiSetCond)-1)*(((((((ImGuiSetCond)digits[2]) << PyLong_SHIFT) | (ImGuiSetCond)digits[1]) << PyLong_SHIFT) | (ImGuiSetCond)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiSetCond) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiSetCond, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiSetCond) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiSetCond) ((((((((ImGuiSetCond)digits[2]) << PyLong_SHIFT) | (ImGuiSetCond)digits[1]) << PyLong_SHIFT) | (ImGuiSetCond)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiSetCond) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiSetCond, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiSetCond) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiSetCond) (((ImGuiSetCond)-1)*(((((((((ImGuiSetCond)digits[3]) << PyLong_SHIFT) | (ImGuiSetCond)digits[2]) << PyLong_SHIFT) | (ImGuiSetCond)digits[1]) << PyLong_SHIFT) | (ImGuiSetCond)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiSetCond) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiSetCond, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiSetCond) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiSetCond) ((((((((((ImGuiSetCond)digits[3]) << PyLong_SHIFT) | (ImGuiSetCond)digits[2]) << PyLong_SHIFT) | (ImGuiSetCond)digits[1]) << PyLong_SHIFT) | (ImGuiSetCond)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiSetCond) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiSetCond, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiSetCond) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiSetCond, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiSetCond val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiSetCond) -1;
        }
    } else {
        ImGuiSetCond val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiSetCond) -1;
        val = __Pyx_PyInt_As_ImGuiSetCond(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiSetCond");
    return (ImGuiSetCond) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiSetCond");
    return (ImGuiSetCond) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE ImGuiTreeNodeFlags __Pyx_PyInt_As_ImGuiTreeNodeFlags(PyObject *x) {
    const ImGuiTreeNodeFlags neg_one = (ImGuiTreeNodeFlags) -1, const_zero = (ImGuiTreeNodeFlags) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiTreeNodeFlags) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiTreeNodeFlags) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiTreeNodeFlags) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiTreeNodeFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) >= 2 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) (((((ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiTreeNodeFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) >= 3 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) (((((((ImGuiTreeNodeFlags)digits[2]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiTreeNodeFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) >= 4 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) (((((((((ImGuiTreeNodeFlags)digits[3]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[2]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiTreeNodeFlags) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiTreeNodeFlags) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiTreeNodeFlags, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiTreeNodeFlags) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiTreeNodeFlags, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiTreeNodeFlags) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) (((ImGuiTreeNodeFlags)-1)*(((((ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiTreeNodeFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) ((((((ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) (((ImGuiTreeNodeFlags)-1)*(((((((ImGuiTreeNodeFlags)digits[2]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiTreeNodeFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) ((((((((ImGuiTreeNodeFlags)digits[2]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) (((ImGuiTreeNodeFlags)-1)*(((((((((ImGuiTreeNodeFlags)digits[3]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[2]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiTreeNodeFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiTreeNodeFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiTreeNodeFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiTreeNodeFlags) ((((((((((ImGuiTreeNodeFlags)digits[3]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[2]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[1]) << PyLong_SHIFT) | (ImGuiTreeNodeFlags)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiTreeNodeFlags) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiTreeNodeFlags, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiTreeNodeFlags) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiTreeNodeFlags, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiTreeNodeFlags val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiTreeNodeFlags) -1;
        }
    } else {
        ImGuiTreeNodeFlags val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiTreeNodeFlags) -1;
        val = __Pyx_PyInt_As_ImGuiTreeNodeFlags(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiTreeNodeFlags");
    return (ImGuiTreeNodeFlags) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiTreeNodeFlags");
    return (ImGuiTreeNodeFlags) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE ImGuiInputTextFlags __Pyx_PyInt_As_ImGuiInputTextFlags(PyObject *x) {
    const ImGuiInputTextFlags neg_one = (ImGuiInputTextFlags) -1, const_zero = (ImGuiInputTextFlags) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiInputTextFlags) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiInputTextFlags) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiInputTextFlags) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiInputTextFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) >= 2 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) (((((ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiInputTextFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) >= 3 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) (((((((ImGuiInputTextFlags)digits[2]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiInputTextFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) >= 4 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) (((((((((ImGuiInputTextFlags)digits[3]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[2]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiInputTextFlags) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiInputTextFlags) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiInputTextFlags, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiInputTextFlags) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiInputTextFlags, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiInputTextFlags) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiInputTextFlags) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) (((ImGuiInputTextFlags)-1)*(((((ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiInputTextFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) ((((((ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiInputTextFlags) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) (((ImGuiInputTextFlags)-1)*(((((((ImGuiInputTextFlags)digits[2]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiInputTextFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) ((((((((ImGuiInputTextFlags)digits[2]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiInputTextFlags) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) (((ImGuiInputTextFlags)-1)*(((((((((ImGuiInputTextFlags)digits[3]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[2]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiInputTextFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiInputTextFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiInputTextFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiInputTextFlags) ((((((((((ImGuiInputTextFlags)digits[3]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[2]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[1]) << PyLong_SHIFT) | (ImGuiInputTextFlags)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiInputTextFlags) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiInputTextFlags, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiInputTextFlags) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiInputTextFlags, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiInputTextFlags val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiInputTextFlags) -1;
        }
    } else {
        ImGuiInputTextFlags val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiInputTextFlags) -1;
        val = __Pyx_PyInt_As_ImGuiInputTextFlags(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiInputTextFlags");
    return (ImGuiInputTextFlags) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiInputTextFlags");
    return (ImGuiInputTextFlags) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE ImGuiMouseCursor __Pyx_PyInt_As_ImGuiMouseCursor(PyObject *x) {
    const ImGuiMouseCursor neg_one = (ImGuiMouseCursor) -1, const_zero = (ImGuiMouseCursor) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiMouseCursor) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiMouseCursor) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiMouseCursor) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiMouseCursor) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) >= 2 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) (((((ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiMouseCursor) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) >= 3 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) (((((((ImGuiMouseCursor)digits[2]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiMouseCursor) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) >= 4 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) (((((((((ImGuiMouseCursor)digits[3]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[2]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiMouseCursor) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiMouseCursor) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiMouseCursor, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiMouseCursor) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiMouseCursor, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiMouseCursor) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiMouseCursor) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) (((ImGuiMouseCursor)-1)*(((((ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiMouseCursor) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) ((((((ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiMouseCursor) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) (((ImGuiMouseCursor)-1)*(((((((ImGuiMouseCursor)digits[2]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiMouseCursor) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) ((((((((ImGuiMouseCursor)digits[2]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiMouseCursor) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) (((ImGuiMouseCursor)-1)*(((((((((ImGuiMouseCursor)digits[3]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[2]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiMouseCursor) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiMouseCursor, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiMouseCursor) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiMouseCursor) ((((((((((ImGuiMouseCursor)digits[3]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[2]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[1]) << PyLong_SHIFT) | (ImGuiMouseCursor)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiMouseCursor) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiMouseCursor, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiMouseCursor) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiMouseCursor, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiMouseCursor val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiMouseCursor) -1;
        }
    } else {
        ImGuiMouseCursor val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiMouseCursor) -1;
        val = __Pyx_PyInt_As_ImGuiMouseCursor(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiMouseCursor");
    return (ImGuiMouseCursor) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiMouseCursor");
    return (ImGuiMouseCursor) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE ImGuiStyleVar __Pyx_PyInt_As_ImGuiStyleVar(PyObject *x) {
    const ImGuiStyleVar neg_one = (ImGuiStyleVar) -1, const_zero = (ImGuiStyleVar) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiStyleVar) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiStyleVar) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiStyleVar) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiStyleVar) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) >= 2 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) (((((ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiStyleVar) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) >= 3 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) (((((((ImGuiStyleVar)digits[2]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiStyleVar) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) >= 4 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) (((((((((ImGuiStyleVar)digits[3]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[2]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiStyleVar) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiStyleVar) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiStyleVar, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiStyleVar) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiStyleVar, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiStyleVar) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiStyleVar,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiStyleVar) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) (((ImGuiStyleVar)-1)*(((((ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiStyleVar) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) ((((((ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiStyleVar) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) (((ImGuiStyleVar)-1)*(((((((ImGuiStyleVar)digits[2]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiStyleVar) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) ((((((((ImGuiStyleVar)digits[2]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiStyleVar) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) (((ImGuiStyleVar)-1)*(((((((((ImGuiStyleVar)digits[3]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[2]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiStyleVar) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiStyleVar, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiStyleVar) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiStyleVar) ((((((((((ImGuiStyleVar)digits[3]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[2]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[1]) << PyLong_SHIFT) | (ImGuiStyleVar)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiStyleVar) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiStyleVar, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiStyleVar) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiStyleVar, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiStyleVar val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiStyleVar) -1;
        }
    } else {
        ImGuiStyleVar val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiStyleVar) -1;
        val = __Pyx_PyInt_As_ImGuiStyleVar(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiStyleVar");
    return (ImGuiStyleVar) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiStyleVar");
    return (ImGuiStyleVar) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE ImGuiCol __Pyx_PyInt_As_ImGuiCol(PyObject *x) {
    const ImGuiCol neg_one = (ImGuiCol) -1, const_zero = (ImGuiCol) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiCol) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiCol, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiCol) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiCol) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiCol, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiCol) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) >= 2 * PyLong_SHIFT) {
                            return (ImGuiCol) (((((ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiCol) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) >= 3 * PyLong_SHIFT) {
                            return (ImGuiCol) (((((((ImGuiCol)digits[2]) << PyLong_SHIFT) | (ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiCol) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) >= 4 * PyLong_SHIFT) {
                            return (ImGuiCol) (((((((((ImGuiCol)digits[3]) << PyLong_SHIFT) | (ImGuiCol)digits[2]) << PyLong_SHIFT) | (ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiCol) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiCol) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiCol, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiCol) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiCol, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiCol) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiCol, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiCol,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiCol) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiCol) (((ImGuiCol)-1)*(((((ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiCol) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiCol) ((((((ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiCol) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiCol) (((ImGuiCol)-1)*(((((((ImGuiCol)digits[2]) << PyLong_SHIFT) | (ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiCol) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiCol) ((((((((ImGuiCol)digits[2]) << PyLong_SHIFT) | (ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiCol) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiCol) (((ImGuiCol)-1)*(((((((((ImGuiCol)digits[3]) << PyLong_SHIFT) | (ImGuiCol)digits[2]) << PyLong_SHIFT) | (ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiCol) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiCol, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiCol) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiCol) ((((((((((ImGuiCol)digits[3]) << PyLong_SHIFT) | (ImGuiCol)digits[2]) << PyLong_SHIFT) | (ImGuiCol)digits[1]) << PyLong_SHIFT) | (ImGuiCol)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiCol) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiCol, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiCol) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiCol, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiCol val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiCol) -1;
        }
    } else {
        ImGuiCol val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiCol) -1;
        val = __Pyx_PyInt_As_ImGuiCol(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiCol");
    return (ImGuiCol) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiCol");
    return (ImGuiCol) -1;
}

/* ImportNumPyArray */
                static PyObject* __Pyx__ImportNumPyArray(void) {
    PyObject *numpy_module, *ndarray_object = NULL;
    numpy_module = __Pyx_Import(__pyx_n_s_numpy, NULL, 0);
    if (likely(numpy_module)) {
        ndarray_object = PyObject_GetAttrString(numpy_module, "ndarray");
        Py_DECREF(numpy_module);
    }
    if (unlikely(!ndarray_object)) {
        PyErr_Clear();
    }
    if (unlikely(!ndarray_object || !PyObject_TypeCheck(ndarray_object, &PyType_Type))) {
        Py_XDECREF(ndarray_object);
        Py_INCREF(Py_None);
        ndarray_object = Py_None;
    }
    return ndarray_object;
}
static CYTHON_INLINE PyObject* __Pyx_ImportNumPyArrayTypeIfAvailable(void) {
    if (unlikely(!__pyx_numpy_ndarray)) {
        __pyx_numpy_ndarray = __Pyx__ImportNumPyArray();
    }
    Py_INCREF(__pyx_numpy_ndarray);
    return __pyx_numpy_ndarray;
}

/* CIntFromPy */
                static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) -1, const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* PyObjectCallMethod1 */
                static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* CoroutineBase */
                #include <structmember.h>
#include <frameobject.h>
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Coroutine_CheckRunning(__pyx_CoroutineObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value) {
    PyObject *retval;
    __Pyx_PyThreadState_declare
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    __Pyx_PyThreadState_assign
    if (value) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(__pyx_tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = __pyx_tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject *retval) {
    if (unlikely(!retval && !PyErr_Occurred())) {
        PyErr_SetNone(PyExc_StopIteration);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Coroutine_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value);
    }
    return __Pyx_Coroutine_MethodReturn(retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
            goto throw_here;
        }
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
}
static int __Pyx_Coroutine_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Coroutine_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
                    static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
                    #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (!abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_VERSION_HEX >= 0x03030000) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_VERSION_HEX >= 0x03030000) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if (0) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
                    static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Coroutine_del,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
                    static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                    #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                    #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
                    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
